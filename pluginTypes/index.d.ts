/// <amd-module name="@scom/scom-designer/index.css.ts" />
declare module "@scom/scom-designer/index.css.ts" {
    export const hoverFullOpacity: string;
    export const rowItemHoverStyled: string;
    export const rowItemActiveStyled: string;
    export const rowDragOverActiveStyled: string;
    export const iconButtonStyled: string;
    export const blockItemHoverStyled: string;
    export const customLabelTabStyled: string;
    export const labelActiveStyled: string;
    export const customIconTabStyled: string;
    export const customIconTabActiveStyled: string;
    export const customTabStyled: string;
    export const codeTabsStyle: string;
    export const blockStyle: string;
    export const customTransition: string;
}
/// <amd-module name="@scom/scom-designer/components/index.css.ts" />
declare module "@scom/scom-designer/components/index.css.ts" {
    export const componentStyle: string;
    export const iconTabsStyle: string;
    export const codeTabsStyle: string;
    export const navbarStyle: string;
    export const titlebarStyle: string;
    export const modalStyle: string;
    export const sourceControlStyle: string;
    export const githubTabStyle: string;
}
/// <amd-module name="@scom/scom-designer/assets.ts" />
declare module "@scom/scom-designer/assets.ts" {
    function fullPath(path: string): string;
    const _default: {
        fullPath: typeof fullPath;
    };
    export default _default;
}
/// <amd-module name="@scom/scom-designer/helpers/store.ts" />
declare module "@scom/scom-designer/helpers/store.ts" {
    const setBreakpoint: (breakpoint: number) => void;
    const getBreakpoint: () => number;
    export { setBreakpoint, getBreakpoint };
}
/// <amd-module name="@scom/scom-designer/helpers/config.ts" />
declare module "@scom/scom-designer/helpers/config.ts" {
    import { IconName } from "@ijstech/components";
    import { IMediaQuery } from "@scom/scom-designer/interface.ts";
    const enum BREAKPOINTS {
        MOBILE = 0,
        TABLET = 1,
        LAPTOP = 2,
        DESKTOP = 3,
        BIG_SCREEN = 4
    }
    const breakpoints: {
        tooltip: string;
        type: string;
        icon: {
            width: string;
            height: string;
            padding: {
                top: number;
                left: number;
                right: number;
                bottom: number;
            };
            name: string;
        };
        value: BREAKPOINTS;
    }[];
    const getBreakpointInfo: (index: number) => {
        icon?: undefined;
        name?: undefined;
    } | {
        icon: IconName;
        name: string;
    };
    const breakpointsMap: {
        [key: number]: IMediaQuery;
    };
    const enum PREVIEWS {
        DRAFT = 0,
        WEB = 1,
        IOS = 2,
        ANDROID = 3
    }
    const previews: ({
        tooltip: string;
        icon: {
            width: string;
            height: string;
            padding: {
                top: number;
                left: number;
                right: number;
                bottom: number;
            };
            name: string;
            image?: undefined;
        };
        type: string;
        value: PREVIEWS;
    } | {
        tooltip: string;
        icon: {
            image: {
                width: string;
                height: string;
                padding: {
                    top: number;
                    left: number;
                    right: number;
                    bottom: number;
                };
                url: string;
            };
        };
        type: string;
        value: PREVIEWS;
    })[];
    const getMediaQueries: () => IMediaQuery[];
    const getDefaultMediaQuery: (breakpoint: number) => any;
    const getMediaQuery: (mediaQueries: any) => any;
    const getMediaQueryProps: (mediaQueries: any) => any;
    const getFont: (value: boolean) => {
        size: string;
        color: string;
    };
    const GroupMetadata: {
        Layout: {
            name: string;
            tooltipText: string;
        };
        Basic: {
            name: string;
            tooltipText: string;
        };
        Fields: {
            name: string;
            tooltipText: string;
        };
    };
    export { BREAKPOINTS, breakpoints, previews, breakpointsMap, getMediaQueries, getDefaultMediaQuery, GroupMetadata, getBreakpointInfo, getMediaQueryProps, getMediaQuery, getFont };
}
/// <amd-module name="@scom/scom-designer/components/components.tsx" />
declare module "@scom/scom-designer/components/components.tsx" {
    import { Module, ControlElement } from '@ijstech/components';
    import { IComponent, IScreen } from "@scom/scom-designer/interface.ts";
    import "@scom/scom-designer/components/index.css.ts";
    type visibleCallback = (component: IComponent, visible: boolean) => void;
    type selectCallback = (component: IComponent) => void;
    interface DesignerComponentsElement extends ControlElement {
        onShowComponentPicker: selectCallback;
        onSelect?: selectCallback;
        onVisible?: visibleCallback;
        onDelete?: selectCallback;
        onUpdate?: () => void;
        screen?: IScreen;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-components']: DesignerComponentsElement;
            }
        }
    }
    export default class DesignerComponents extends Module {
        private vStackComponents;
        private _screen;
        private mdActions;
        private mdAlert;
        private pnlSide;
        private currentComponent;
        private _activeComponent;
        private dragId;
        private targetConfig;
        private elementsMap;
        onShowComponentPicker: selectCallback;
        onSelect: selectCallback;
        onVisible: visibleCallback;
        onDelete: selectCallback;
        onUpdate: () => void;
        get screen(): IScreen;
        set screen(value: IScreen);
        get activeComponent(): IComponent;
        set activeComponent(value: IComponent);
        private get isContainer();
        private updateActiveStyle;
        renderUI(): void;
        private renderTreeItems;
        private initEvents;
        private isRootPanel;
        private showHightlight;
        private clearHoverStyle;
        private resetData;
        private handleDragEnd;
        private appendItem;
        private changeParent;
        private getParentID;
        private onHideComponent;
        private onShowActions;
        private initModalActions;
        private onConfirm;
        private removeElements;
        private onClose;
        private handleDelete;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/index.css.ts" />
declare module "@scom/scom-designer/tools/index.css.ts" {
    export const customIconBorderStyled: string;
    export const customIconLayoutStyled: string;
    export const customIconLayoutActiveStyled: string;
    export const borderRadiusLeft: string;
    export const borderRadiusRight: string;
    export const textInputRight: string;
    export const bgInputTransparent: string;
    export const customColorStyled: string;
    export const unitStyled: string;
    export const buttonAutoStyled: string;
    export const customFormStyle: string;
    export const customSwitchStyle: string;
}
/// <amd-module name="@scom/scom-designer/tools/stylesheet.tsx" />
declare module "@scom/scom-designer/tools/stylesheet.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { onChangedCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolStylesheetElement extends ControlElement {
        onChanged?: onChangedCallback;
    }
    interface IDesignerStylesheet {
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-stylesheet']: DesignerToolStylesheetElement;
            }
        }
    }
    export default class DesignerToolStylesheet extends Module {
        private vStackContent;
        private stylesSelect;
        private lblStats;
        private _data;
        onChanged: onChangedCallback;
        constructor(parent?: Container, options?: DesignerToolStylesheetElement);
        private onCollapse;
        setData(value: IDesignerStylesheet): void;
        private renderUI;
        private getStylesOptions;
        private handleEdit;
        private handleCopy;
        private handleMove;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/helpers/utils.ts" />
declare module "@scom/scom-designer/helpers/utils.ts" {
    export const backgroundOptions: {
        value: string;
        label: string;
    }[];
    export function getAlignProps(type: string): any;
    export const justifyProps: ({
        tooltip: string;
        value: string;
        type: string;
        icon: {
            image: {
                url: string;
            };
        };
        rotate?: undefined;
        placement?: undefined;
    } | {
        tooltip: string;
        value: string;
        type: string;
        icon: {
            image: {
                url: string;
            };
        };
        rotate: number;
        placement?: undefined;
    } | {
        tooltip: string;
        placement: string;
        value: string;
        type: string;
        icon: {
            image: {
                url: string;
            };
        };
        rotate?: undefined;
    })[];
    export const alignContentProps: ({
        tooltip: string;
        value: string;
        type: string;
        icon: {
            image: {
                url: string;
            };
        };
        rotate?: undefined;
    } | {
        tooltip: string;
        value: string;
        type: string;
        icon: {
            image: {
                url: string;
            };
        };
        rotate: number;
    })[];
    export const borderStyles: {
        tooltip: string;
        value: string;
        type: string;
        icon: {
            image: {
                url: string;
            };
        };
    }[];
    export const fontStyles: {
        tooltip: string;
        value: string;
        type: string;
        icon: {
            name: string;
        };
    }[];
    export const fontTransforms: ({
        tooltip: string;
        value: string;
        type: string;
        icon: {
            name: string;
            image?: undefined;
        };
    } | {
        tooltip: string;
        value: string;
        type: string;
        icon: {
            image: {
                url: string;
            };
            name?: undefined;
        };
    })[];
    export const fontDecorations: {
        tooltip: string;
        value: string;
        type: string;
        icon: {
            name: string;
        };
    }[];
    export const getFileContent: (url: string) => Promise<string>;
    export const extractFileName: (path: string) => string;
    export const parseProps: (props: any) => {};
    export const parsePropValue: (value: any) => any;
    export const parseNumberValue: (value: string | number) => {
        value: any;
        unit: string;
    };
    export const isSameValue: (defaultVal: any, value: any) => boolean;
    export const isNumber: (value: string | number) => boolean;
}
/// <amd-module name="@scom/scom-designer/tools/selector.tsx" />
declare module "@scom/scom-designer/tools/selector.tsx" {
    import { ControlElement, Module } from "@ijstech/components";
    type selectorChanged = (type: string, value: string | number) => void;
    interface DesignerSelectorElement extends ControlElement {
        items?: IItem[];
        title?: string;
        direction?: 'horizontal' | 'vertical';
        activeItem?: string;
        isChanged?: boolean;
        onChanged?: selectorChanged;
    }
    interface IItem {
        caption?: string;
        tooltip?: string;
        value: string | number;
        type: string;
        icon?: any;
        placement?: string;
        rotate?: number;
        isActive?: boolean;
    }
    interface ISelector {
        items: IItem[];
        title?: string;
        direction?: 'horizontal' | 'vertical';
        activeItem?: string | number;
        isChanged?: boolean;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                'designer-selector': DesignerSelectorElement;
            }
        }
    }
    export default class DesignerSelector extends Module {
        private pnlList;
        private lblTitle;
        private currentTarget;
        private gridSelector;
        private listMap;
        onChanged: selectorChanged;
        private _data;
        get items(): IItem[];
        set items(value: IItem[]);
        get title(): string;
        set title(value: string);
        get activeItem(): string | number;
        set activeItem(value: string | number);
        get direction(): 'horizontal' | 'vertical';
        set direction(value: 'horizontal' | 'vertical');
        get isChanged(): boolean;
        set isChanged(value: boolean);
        setData(value: ISelector): void;
        private renderUI;
        private onActiveChanged;
        private updateActiveItem;
        init(): void;
        render(): void;
    }
}
/// <amd-module name="@scom/scom-designer/tools/header.tsx" />
declare module "@scom/scom-designer/tools/header.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    interface DesignerToolHeaderElement extends ControlElement {
        name: string;
        tooltipText?: string;
        hasMediaQuery?: boolean;
        hasClear?: boolean;
        onCollapse: (isShown: boolean) => void;
        onReset?: () => void;
        onToggleMediaQuery?: (value: boolean) => void;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-header']: DesignerToolHeaderElement;
            }
        }
    }
    export default class DesignerToolHeader extends Module {
        private _name;
        private _tooltipText;
        private _hasMediaQuery;
        private _hasClear;
        private isShown;
        private lbName;
        private iconArrow;
        private iconTooltip;
        private querySwitch;
        private lblSwitch;
        private pnlSwitch;
        private pnlClear;
        onCollapse: (isShown: boolean) => void;
        onReset: () => void;
        onToggleMediaQuery: (value: boolean) => void;
        constructor(parent?: Container, options?: DesignerToolHeaderElement);
        get name(): string;
        set name(value: string);
        get tooltipText(): string;
        set tooltipText(value: string);
        get hasMediaQuery(): boolean;
        set hasMediaQuery(value: boolean);
        get checked(): boolean;
        set checked(value: boolean);
        set isChanged(value: boolean);
        get hasClear(): boolean;
        set hasClear(value: boolean);
        set isQueryChanged(value: boolean);
        private renderUI;
        private _onCollapse;
        private _onClear;
        private onQueryChanged;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/layout.tsx" />
declare module "@scom/scom-designer/tools/layout.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IMediaQuery, onChangedCallback, onUpdateCallback } from "@scom/scom-designer/interface.ts";
    interface IDesignerLayout {
        wrap?: string;
        direction?: string;
        alignItems?: string;
        justifyContent?: string;
        alignSelf?: string;
        alignContent?: string;
        name?: string;
        stack?: IStack;
        reverse?: boolean;
        mediaQuery?: IMediaQuery;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_LAYOUT_PROPS: string[];
    interface IStack {
        basis?: string;
        grow?: string;
        shrink?: string;
    }
    interface DesignerToolLayoutElement extends ControlElement {
        onChanged?: onChangedCallback;
        onUpdate?: onUpdateCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-layout']: DesignerToolLayoutElement;
            }
        }
    }
    export default class DesignerToolLayout extends Module {
        private vStackContent;
        private lbTypeFlex;
        private inputBasicFlex;
        private wrapperAdvancedFlex;
        private pnlFlexContent;
        private pnlFlexItems;
        private pnlSelectedItem;
        private directionSelector;
        private wrapSelector;
        private justifySelector;
        private alignSelector;
        private alignSelfSelector;
        private alignContentSelector;
        private reverseSwitch;
        private shrinkInput;
        private growInput;
        private basisInput;
        private designerHeader;
        private lblReverse;
        private _data;
        private isBasicFlex;
        onChanged: onChangedCallback;
        onUpdate: onUpdateCallback;
        constructor(parent?: Container, options?: DesignerToolLayoutElement);
        get name(): string;
        set name(value: string);
        get isStack(): boolean;
        private get isChecked();
        private get currentData();
        private hasMediaQuery;
        setData(data: IDesignerLayout): void;
        private renderUI;
        private updateHighlight;
        private checkValues;
        private togglePanels;
        private onCollapse;
        private onFlexChanged;
        private onSelectChanged;
        private onReverseSwitch;
        private onBasicFlexChanged;
        private onAdvFlexChanged;
        private handleValueChanged;
        private handleMediaQuery;
        private onToggleMediaQuery;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/background.tsx" />
declare module "@scom/scom-designer/tools/background.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IMediaQuery, onChangedCallback, onUpdateCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolBackgroundElement extends ControlElement {
        onChanged?: onChangedCallback;
        onUpdate?: onUpdateCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-background']: DesignerToolBackgroundElement;
            }
        }
    }
    interface IDesignerBackground {
        background?: {
            color?: string;
            image?: string;
        };
        mediaQuery?: IMediaQuery;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_BACKGROUND_PROPS: string[];
    export default class DesignerToolBackground extends Module {
        private vStackContent;
        private bgColor;
        private designerHeader;
        private lblColor;
        private _data;
        onChanged: onChangedCallback;
        onUpdate: onUpdateCallback;
        constructor(parent?: Container, options?: DesignerToolBackgroundElement);
        static create(options?: DesignerToolBackgroundElement, parent?: Container): Promise<DesignerToolBackground>;
        private get isChecked();
        private hasMediaQuery;
        setData(value: IDesignerBackground): void;
        private renderUI;
        private updateHighlight;
        private onCollapse;
        private onTypeChanged;
        private onColorChanged;
        private handleValueChanged;
        private handleMediaQuery;
        private onToggleMediaQuery;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/size.tsx" />
declare module "@scom/scom-designer/tools/size.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IMediaQuery, onChangedCallback, onUpdateCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolSizeElement extends ControlElement {
        onChanged?: onChangedCallback;
        onUpdate?: onUpdateCallback;
    }
    interface IDesignerSize {
        width?: number | string;
        height?: number | string;
        minWidth?: number | string;
        minHeight?: number | string;
        maxWidth?: number | string;
        maxHeight?: number | string;
        mediaQuery?: IMediaQuery;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_SIZE_PROPS: string[];
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-size']: DesignerToolSizeElement;
            }
        }
    }
    export default class DesignerToolSize extends Module {
        private vStackContent;
        private mdUnits;
        private currentLabel;
        private pnlSizes;
        private designerHeader;
        private _data;
        private currentProp;
        onChanged: onChangedCallback;
        onUpdate: onUpdateCallback;
        constructor(parent?: Container, options?: DesignerToolSizeElement);
        private get isChecked();
        private hasMediaQuery;
        setData(value: IDesignerSize): void;
        private onCollapse;
        private renderUI;
        private checkValues;
        private onValueChanged;
        private handleValueChanged;
        private handleMediaQuery;
        private onToggleMediaQuery;
        private onResetData;
        private onShowUnits;
        private initModalUnits;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/modal-spacing.tsx" />
declare module "@scom/scom-designer/tools/modal-spacing.tsx" {
    import { Module, ControlElement, Container, IconName, Button } from '@ijstech/components';
    type onChangedCallback = (type: string, position: string, value: string) => void;
    interface DesignerToolModalSpacingElement extends ControlElement {
        config?: IConfig;
        data?: ISpacing;
        onChanged?: onChangedCallback;
    }
    interface ISpacing {
        value?: string | number;
        type?: string;
        position?: string;
    }
    interface IConfig {
        title?: string;
        breakpointText?: string;
        iconName?: IconName;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-modal-spacing']: DesignerToolModalSpacingElement;
            }
        }
    }
    export default class DesignerToolModalSpacing extends Module {
        private unit;
        private spacing;
        private config;
        private modal;
        private vStackIndUnits;
        private lbIndUnit;
        private lbTitle;
        private lbBreakpoint;
        private iconTitle;
        private inputValue;
        onChanged: onChangedCallback;
        constructor(parent?: Container, options?: DesignerToolModalSpacingElement);
        private initModal;
        private updateHeader;
        onShowModal(target: Button, value: ISpacing, config: IConfig): void;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/margins-padding.tsx" />
declare module "@scom/scom-designer/tools/margins-padding.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IMediaQuery, onChangedCallback, onUpdateCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolMarginsAndPaddingElement extends ControlElement {
        onChanged?: onChangedCallback;
        onUpdate?: onUpdateCallback;
    }
    interface IDesignerSpacing {
        margin?: {
            top?: string | number;
            right?: string | number;
            bottom?: string | number;
            left?: string | number;
        };
        padding?: {
            top?: string | number;
            right?: string | number;
            bottom?: string | number;
            left?: string | number;
        };
        mediaQuery?: IMediaQuery;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_SPACING_PROPS: string[];
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-margins-padding']: DesignerToolMarginsAndPaddingElement;
            }
        }
    }
    export default class DesignerToolMarginsAndPadding extends Module {
        private vStackContent;
        private mdUnits;
        private mdSpacing;
        private currentLabel;
        private marginInput;
        private paddingInput;
        private vStackIndividual;
        private designerHeader;
        private lblPadding;
        private lblMargin;
        private _data;
        private currentProp;
        private _idvChanged;
        onChanged: onChangedCallback;
        onUpdate: onUpdateCallback;
        constructor(parent?: Container, options?: DesignerToolMarginsAndPaddingElement);
        private get isChecked();
        private get currentData();
        private hasMediaQuery;
        setData(data: IDesignerSpacing): void;
        private onCollapse;
        private renderUI;
        private resetInputs;
        private updateHighlight;
        private checkValues;
        private updateButtons;
        private onOverallChanged;
        private onShowUnitsModal;
        private initModalUnits;
        private onShowSpacingModal;
        private onSpacingChanged;
        private handleValueChanged;
        private handleMediaQuery;
        private onToggleMediaQuery;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/position.tsx" />
declare module "@scom/scom-designer/tools/position.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IMediaQuery, onChangedCallback, onUpdateCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolPositionElement extends ControlElement {
        onChanged?: onChangedCallback;
        onUpdate?: onUpdateCallback;
    }
    interface IDesignerPosition {
        position?: string;
        top?: number | string;
        right?: number | string;
        bottom?: number | string;
        left?: number | string;
        overflow?: {
            x?: string;
            y?: string;
        };
        zIndex?: string;
        display?: string;
        mediaQuery?: IMediaQuery;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_POSITION_PROPS: string[];
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-position']: DesignerToolPositionElement;
            }
        }
    }
    export default class DesignerToolPosition extends Module {
        private vStackContent;
        private mdSpacing;
        private zIndexInput;
        private pnlPosition;
        private overflowSelector;
        private posSelector;
        private designerHeader;
        private lblZIndex;
        private displaySelect;
        private lblDisplay;
        private _data;
        private _idvChanged;
        onChanged: onChangedCallback;
        onUpdate: onUpdateCallback;
        constructor(parent?: Container, options?: DesignerToolPositionElement);
        private get isChecked();
        private get currentData();
        private hasMediaQuery;
        setData(data: IDesignerPosition): void;
        private onCollapse;
        private renderUI;
        private updateHighlight;
        private checkValues;
        private updateButtons;
        private onShowModal;
        private onSelectChanged;
        private onSpacingChanged;
        private onDisplayChanged;
        private handleValueChanged;
        private handleMediaQuery;
        private onToggleMediaQuery;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/borders.tsx" />
declare module "@scom/scom-designer/tools/borders.tsx" {
    import { Module, ControlElement, Container, IBorder } from '@ijstech/components';
    import { IMediaQuery, onChangedCallback, onUpdateCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolBordersElement extends ControlElement {
        onChanged?: onChangedCallback;
        onUpdate?: onUpdateCallback;
    }
    interface IDesignerBorder {
        border?: IBorder;
        mediaQuery?: IMediaQuery;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_BORDER_PROPS: string[];
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-borders']: DesignerToolBordersElement;
            }
        }
    }
    export default class DesignerToolBorders extends Module {
        private vStackContent;
        private mdSpacing;
        private inputRadius;
        private inputWidth;
        private pnlIndividual;
        private styleSelector;
        private bgColor;
        private lblColor;
        private designerHeader;
        private lblWidth;
        private lblRadius;
        private _data;
        private radiusObj;
        private _idvChanged;
        onChanged: onChangedCallback;
        onUpdate: onUpdateCallback;
        constructor(parent?: Container, options?: DesignerToolBordersElement);
        private get isChecked();
        private get currentData();
        private hasMediaQuery;
        setData(value: IDesignerBorder): void;
        private onCollapse;
        private renderUI;
        private updateOverall;
        private updateHighlight;
        private checkValues;
        private updateButtons;
        private onShowSpacingModal;
        private radiusByPosition;
        private onPropChanged;
        private onSpacingChanged;
        private handleValueChanged;
        private handleMediaQuery;
        private onToggleMediaQuery;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/effects.tsx" />
declare module "@scom/scom-designer/tools/effects.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { onChangedCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolEffectsElement extends ControlElement {
        onChanged?: onChangedCallback;
    }
    interface IDesignerEffect {
        opacity?: number | string;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_EFFECT_PROPS: string[];
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-effects']: DesignerToolEffectsElement;
            }
        }
    }
    export default class DesignerToolEffects extends Module {
        private vStackContent;
        private inputEffect;
        private rangeEffect;
        private designerHeader;
        private _data;
        onChanged: onChangedCallback;
        constructor(parent?: Container, options?: DesignerToolEffectsElement);
        setData(value: IDesignerEffect): void;
        private get defaultOpacity();
        private onCollapse;
        private renderUI;
        private updateHighlight;
        private onInputEffectChanged;
        private onRangeChanged;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/content.tsx" />
declare module "@scom/scom-designer/tools/content.tsx" {
    import { Module, ControlElement, Container, IFont } from '@ijstech/components';
    import { IMediaQuery, onChangedCallback, onUpdateCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerToolContentElement extends ControlElement {
        onChanged?: onChangedCallback;
        onUpdate?: onUpdateCallback;
    }
    interface IDesignerContent {
        name?: string;
        font?: IFont;
        mediaQuery?: IMediaQuery;
        default?: {
            [name: string]: any;
        };
    }
    export const DESIGNER_CONTENT_PROPS: string[];
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-content']: DesignerToolContentElement;
            }
        }
    }
    export default class DesignerToolContent extends Module {
        private vStackContent;
        private inputFontSize;
        private inputFontWeight;
        private designerHeader;
        private lblWeight;
        private lblSize;
        private transformSelector;
        private styleSelector;
        private inputShadow;
        private lblShadow;
        private _data;
        onChanged: onChangedCallback;
        onUpdate: onUpdateCallback;
        constructor(parent?: Container, options?: DesignerToolContentElement);
        private get isChecked();
        private get isLabel();
        private hasMediaQuery;
        private get currentData();
        setData(value: IDesignerContent): void;
        private onCollapse;
        private renderUI;
        private updateHighlight;
        private checkFontProp;
        private onFontChanged;
        private onStyleChanged;
        private handleValueChanged;
        private handleMediaQuery;
        private onToggleMediaQuery;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/group.tsx" />
declare module "@scom/scom-designer/tools/group.tsx" {
    import { Module, ControlElement, Container, IDataSchema, IUISchema } from '@ijstech/components';
    interface DesignerToolGroupElement extends ControlElement {
        title?: string;
        tooltip?: string;
        uiSchema?: IUISchema;
        dataSchema?: IDataSchema;
        props?: any;
        customControls?: any;
        onChanged?: (data: any) => void;
    }
    interface IDesignerGroup {
        title?: string;
        tooltip?: string;
        uiSchema?: IUISchema;
        dataSchema?: IDataSchema;
        props?: any;
        customControls?: any;
        default?: {
            [name: string]: any;
        };
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-tool-group']: DesignerToolGroupElement;
            }
        }
    }
    export default class DesignerToolGroup extends Module {
        private vStackContent;
        private designerHeader;
        private form;
        private _data;
        onChanged: (data: any) => void;
        constructor(parent?: Container, options?: DesignerToolGroupElement);
        setData(value: IDesignerGroup): void;
        private onCollapse;
        private renderUI;
        private onResetData;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/tools/index.ts" />
declare module "@scom/scom-designer/tools/index.ts" {
    import DesignerToolStylesheet from "@scom/scom-designer/tools/stylesheet.tsx";
    import DesignerToolLayout, { DESIGNER_LAYOUT_PROPS } from "@scom/scom-designer/tools/layout.tsx";
    import DesignerToolBackground, { DESIGNER_BACKGROUND_PROPS } from "@scom/scom-designer/tools/background.tsx";
    import DesignerToolSize, { DESIGNER_SIZE_PROPS } from "@scom/scom-designer/tools/size.tsx";
    import DesignerToolMarginsAndPadding, { DESIGNER_SPACING_PROPS } from "@scom/scom-designer/tools/margins-padding.tsx";
    import DesignerToolPosition, { DESIGNER_POSITION_PROPS } from "@scom/scom-designer/tools/position.tsx";
    import DesignerToolBorders, { DESIGNER_BORDER_PROPS } from "@scom/scom-designer/tools/borders.tsx";
    import DesignerToolEffects, { DESIGNER_EFFECT_PROPS } from "@scom/scom-designer/tools/effects.tsx";
    import DesignerToolContent, { DESIGNER_CONTENT_PROPS } from "@scom/scom-designer/tools/content.tsx";
    import DesignerToolGroup from "@scom/scom-designer/tools/group.tsx";
    import DesignerToolHeader from "@scom/scom-designer/tools/header.tsx";
    import DesignerSelector from "@scom/scom-designer/tools/selector.tsx";
    export * from "@scom/scom-designer/tools/index.css.ts";
    export { DesignerToolStylesheet, DesignerToolLayout, DesignerToolBackground, DesignerToolSize, DesignerToolMarginsAndPadding, DesignerToolPosition, DesignerToolBorders, DesignerToolEffects, DesignerToolHeader, DesignerSelector, DesignerToolContent, DesignerToolGroup, DESIGNER_BACKGROUND_PROPS, DESIGNER_BORDER_PROPS, DESIGNER_POSITION_PROPS, DESIGNER_SIZE_PROPS, DESIGNER_SPACING_PROPS, DESIGNER_LAYOUT_PROPS, DESIGNER_EFFECT_PROPS, DESIGNER_CONTENT_PROPS };
}
/// <amd-module name="@scom/scom-designer/settings/basic.tsx" />
declare module "@scom/scom-designer/settings/basic.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    interface DesignerSettingsBasicElement extends ControlElement {
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-settings-basic']: DesignerSettingsBasicElement;
            }
        }
    }
    export default class DesignerSettingsBasic extends Module {
        private vStackContent;
        private inputName;
        constructor(parent?: Container, options?: DesignerSettingsBasicElement);
        private onCollapse;
        private renderUI;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/settings/advanced.tsx" />
declare module "@scom/scom-designer/settings/advanced.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    interface DesignerSettingsAdvancedElement extends ControlElement {
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-settings-advanced']: DesignerSettingsAdvancedElement;
            }
        }
    }
    export default class DesignerSettingsAdvanced extends Module {
        private vStackContent;
        constructor(parent?: Container, options?: DesignerSettingsAdvancedElement);
        private onCollapse;
        private renderUI;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/settings/index.ts" />
declare module "@scom/scom-designer/settings/index.ts" {
    import DesignerSettingsBasic from "@scom/scom-designer/settings/basic.tsx";
    import DesignerSettingsAdvanced from "@scom/scom-designer/settings/advanced.tsx";
    export { DesignerSettingsBasic, DesignerSettingsAdvanced };
}
/// <amd-module name="@scom/scom-designer/triggers/trigger.tsx" />
declare module "@scom/scom-designer/triggers/trigger.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { onEventChangedCallback, onEventDblClickCallback } from "@scom/scom-designer/interface.ts";
    interface DesignerTriggerElement extends ControlElement {
        events?: {
            [name: string]: any;
        };
        props?: {
            [name: string]: any;
        };
        onChanged?: onEventChangedCallback;
        onEventDblClick?: onEventDblClickCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-trigger']: DesignerTriggerElement;
            }
        }
    }
    export default class DesignerTrigger extends Module {
        private vStackContent;
        private gdEvents;
        private _events;
        private _props;
        onChanged: onEventChangedCallback;
        onEventDblClick: onEventDblClickCallback;
        constructor(parent?: Container, options?: DesignerTriggerElement);
        static create(options?: DesignerTriggerElement, parent?: Container): Promise<DesignerTrigger>;
        get events(): {
            [name: string]: any;
        };
        set events(value: {
            [name: string]: any;
        });
        get props(): {
            [name: string]: any;
        };
        set props(value: {
            [name: string]: any;
        });
        setData({ events, props }: {
            events: {
                [name: string]: any;
            };
            props?: {
                [name: string]: any;
            };
        }): void;
        private onCollapse;
        private renderUI;
        private onInputChanged;
        private onHandleDbClick;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/triggers/index.ts" />
declare module "@scom/scom-designer/triggers/index.ts" {
    import DesignerTrigger from "@scom/scom-designer/triggers/trigger.tsx";
    export { DesignerTrigger };
}
/// <amd-module name="@scom/scom-designer/setting-data/params.tsx" />
declare module "@scom/scom-designer/setting-data/params.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    interface DesignerDataParamsElement extends ControlElement {
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-data-params']: DesignerDataParamsElement;
            }
        }
    }
    export default class DesignerDataParams extends Module {
        private vStackContent;
        constructor(parent?: Container, options?: DesignerDataParamsElement);
        private onCollapse;
        private renderUI;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/setting-data/linking.tsx" />
declare module "@scom/scom-designer/setting-data/linking.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    interface DesignerDataLinkingElement extends ControlElement {
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-data-linking']: DesignerDataLinkingElement;
            }
        }
    }
    export default class DesignerDataLinking extends Module {
        private vStackContent;
        constructor(parent?: Container, options?: DesignerDataLinkingElement);
        private onCollapse;
        private renderUI;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/setting-data/index.tsx" />
declare module "@scom/scom-designer/setting-data/index.tsx" {
    import DesignerDataParams from "@scom/scom-designer/setting-data/params.tsx";
    import DesignerDataLinking from "@scom/scom-designer/setting-data/linking.tsx";
    export { DesignerDataParams, DesignerDataLinking };
}
/// <amd-module name="@scom/scom-designer/components/properties.tsx" />
declare module "@scom/scom-designer/components/properties.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IControl, onChangedCallback, onEventChangedCallback, onEventDblClickCallback } from "@scom/scom-designer/interface.ts";
    import "@scom/scom-designer/settings/index.ts";
    import "@scom/scom-designer/triggers/index.ts";
    import "@scom/scom-designer/setting-data/index.tsx";
    interface DesignerPropertiesElement extends ControlElement {
        component?: IControl;
        onChanged?: onChangedCallback;
        onEventChanged?: onEventChangedCallback;
        onEventDblClick?: onEventDblClickCallback;
        onBreakpointChanged?: (value: number) => void;
        onPreviewChanged?: onChangedCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-properties']: DesignerPropertiesElement;
            }
        }
    }
    export default class DesignerProperties extends Module {
        private hStackInfo;
        private designerStylesheet;
        private designerLayout;
        private designerBackground;
        private designerSize;
        private designerSpacing;
        private designerPosition;
        private designerBorders;
        private designerEffects;
        private designerContent;
        private customGroup;
        private breakpointSelector;
        private previewSelector;
        private designerTrigger;
        private inputId;
        private _component;
        onChanged: onChangedCallback;
        onBreakpointChanged: (value: number) => void;
        onPreviewChanged: onChangedCallback;
        onEventChanged: onEventChangedCallback;
        onEventDblClick: onEventDblClickCallback;
        constructor(parent?: Container, options?: any);
        static create(options?: DesignerPropertiesElement, parent?: Container): Promise<DesignerProperties>;
        get component(): IControl;
        set component(value: IControl);
        private get designerProps();
        clear(): void;
        private renderUI;
        private renderCustomGroup;
        private updateInfo;
        onUpdate(): void;
        private updateProps;
        private getDefaultValues;
        private onPropChanged;
        private onGroupChanged;
        private onUpdateUI;
        private onIDChanged;
        private onControlEventChanged;
        private onBreakpointClick;
        private onPreviewClick;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/components/screens.tsx" />
declare module "@scom/scom-designer/components/screens.tsx" {
    import { Module, ControlElement } from '@ijstech/components';
    import { IScreen } from "@scom/scom-designer/interface.ts";
    interface DesignerScreensElement extends ControlElement {
        onScreenChanged: callbackType;
        onScreenHistoryShown: callbackShowType;
    }
    type callbackType = (screen?: IScreen) => void;
    type callbackShowType = (shown: boolean) => void;
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-screens']: DesignerScreensElement;
            }
        }
    }
    export default class DesignerScreens extends Module {
        private wrapperScreens;
        private wrapperDeletedScreens;
        private vStackScreens;
        private vStackDeletedScreens;
        private lbScreens;
        private lbDeletedScreens;
        private mdActions;
        private mdAlert;
        private listScreen;
        private selectedId;
        onScreenChanged: callbackType;
        onScreenHistoryShown: callbackShowType;
        onShow(options?: any): void;
        get screens(): IScreen[];
        private onHideScreen;
        private onShowModalDelete;
        private onDeleteScreen;
        private onDuplicateScreen;
        private getNewName;
        private onUpdateName;
        private onAddScreen;
        private onShowActions;
        private initModalActions;
        private onShowDeletedScreens;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/components/pickerBlocks.tsx" />
declare module "@scom/scom-designer/components/pickerBlocks.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IBlock } from "@scom/scom-designer/interface.ts";
    interface DesignerPickerBlocksElement extends ControlElement {
        items: IBlock[];
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-picker-blocks']: DesignerPickerBlocksElement;
            }
        }
    }
    export default class DesignerPickerBlocks extends Module {
        private items;
        private isShown;
        private iconArrow;
        private vStackItems;
        constructor(parent?: Container, options?: DesignerPickerBlocksElement);
        private onDeleteCustomBlock;
        private renderUI;
        private onCollapse;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/components/pickerComponents.tsx" />
declare module "@scom/scom-designer/components/pickerComponents.tsx" {
    import { Module, ControlElement, Container, Control } from '@ijstech/components';
    import { IComponentItem } from "@scom/scom-designer/interface.ts";
    type onSelectCallback = (target: Control, component: IComponentItem) => void;
    interface DesignerPickerComponentsElement extends ControlElement {
        name: string;
        tooltipText?: string;
        items: IComponentItem[];
        onSelect?: onSelectCallback;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['designer-picker-components']: DesignerPickerComponentsElement;
            }
        }
    }
    export default class DesignerPickerComponents extends Module {
        private name;
        private tooltipText;
        private items;
        private isShown;
        private lbName;
        private iconArrow;
        private iconTooltip;
        private hStackItems;
        onSelect: onSelectCallback;
        constructor(parent?: Container, options?: DesignerPickerComponentsElement);
        private renderUI;
        private onItemSelected;
        private onCollapse;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/components/index.ts" />
declare module "@scom/scom-designer/components/index.ts" {
    import DesignerComponents from "@scom/scom-designer/components/components.tsx";
    import DesignerProperties from "@scom/scom-designer/components/properties.tsx";
    import DesignerScreens from "@scom/scom-designer/components/screens.tsx";
    import DesignerPickerBlocks from "@scom/scom-designer/components/pickerBlocks.tsx";
    import DesignerPickerComponents from "@scom/scom-designer/components/pickerComponents.tsx";
    export { DesignerComponents, DesignerProperties, DesignerScreens, DesignerPickerBlocks, DesignerPickerComponents };
}
/// <amd-module name="@scom/scom-designer/data.ts" />
declare module "@scom/scom-designer/data.ts" {
    import { IBlock, IComponentPicker, IScreen } from "@scom/scom-designer/interface.ts";
    export const recentComponents: IComponentPicker[];
    export const pickerComponents: IComponentPicker[];
    export const blockComponents: IBlock[];
    export const screen: IScreen;
}
/// <amd-module name="@scom/scom-designer/designer.tsx" />
declare module "@scom/scom-designer/designer.tsx" {
    import { Module, ControlElement, Container } from '@ijstech/components';
    import { IComponent, IComponentPicker, IControl, IStudio } from "@scom/scom-designer/interface.ts";
    import { Parser } from "@ijstech/compiler";
    interface ScomDesignerFormElement extends ControlElement {
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-scom-designer--form']: ScomDesignerFormElement;
            }
        }
    }
    export class ScomDesignerForm extends Module {
        private designerScreens;
        private designerComponents;
        private designerProperties;
        private pnlComponentPicker;
        private pnlBlockPicker;
        private wrapperComponentPicker;
        private wrapperTab;
        private inputSearch;
        private currentTab;
        private pnlFormDesigner;
        private mdPicker;
        private designerWrapper;
        private pnlScreens;
        private pathMapping;
        private mouseDown;
        private resizing;
        private resizerPos;
        private mouseDownPos;
        private recentComponents;
        private _rootComponent;
        private selectedComponent;
        private currentParent;
        private designingPos;
        selectedControl: IControl;
        modified: boolean;
        studio: IStudio;
        constructor(parent?: Container, options?: any);
        static create(options?: ScomDesignerFormElement, parent?: Container): Promise<ScomDesignerForm>;
        setData(): void;
        get pickerComponentsFiltered(): IComponentPicker[];
        private getComponents;
        get pickerBlocksFiltered(): import("@scom/scom-designer/interface.ts").IBlock[];
        private createControl;
        private updateDesignProps;
        private isSameValue;
        private formatDesignProp;
        get rootComponent(): Parser.IComponent;
        clear(): void;
        private onScreenChanged;
        private onScreenHistoryShown;
        private onTabChanged;
        private onFilterComponent;
        private onShowComponentPicker;
        private onSelectComponent;
        private onVisibleComponent;
        private onDeleteComponent;
        private renderComponent;
        private renderControl;
        private isParentGroup;
        private bindControlEvents;
        private handleSelectControl;
        private showDesignProperties;
        private onCloseComponentPicker;
        private handleAddControl;
        private updateStructure;
        private initComponentPicker;
        private onAddComponent;
        private initBlockPicker;
        private onPropertiesChanged;
        private onControlEventChanged;
        private onControlEventDblClick;
        renderUI(root: IComponent): void;
        private onUpdateDesigner;
        private handleControlMouseMove;
        private updatePosition;
        private updateDesignPosition;
        private handleBreakpoint;
        private onToggleClick;
        private initEvents;
        private handleControlMouseUp;
        init(): void;
        render(): any;
    }
}
/// <amd-module name="@scom/scom-designer/interface.ts" />
declare module "@scom/scom-designer/interface.ts" {
    import { Parser } from "@ijstech/compiler";
    import { Control, IconName } from "@ijstech/components";
    import { ScomDesignerForm } from "@scom/scom-designer/designer.tsx";
    export interface IStudio {
        addEventHandler(designer: ScomDesignerForm, eventName: string, funcName: string): void;
        locateMethod(designer: ScomDesignerForm, funcName: string): void;
        removeComponent(designer: ScomDesignerForm): void;
        renameComponent(designer: ScomDesignerForm, oldId: string, newId: string): boolean;
        renameEventHandler(designer: ScomDesignerForm, funcName: string, newFuncName: string): boolean;
    }
    export interface IScreen {
        id: string;
        name: string;
        elements: IComponent[];
        isHidden?: boolean;
        isDeleted?: boolean;
    }
    export interface IComponentPicker {
        name: string;
        tooltipText?: string;
        items: IComponentItem[];
    }
    export interface IComponentItem extends Parser.IComponent {
        path: string;
        name: string;
        image?: string;
        icon?: IconName;
        category?: string;
    }
    export interface IComponent extends IComponentItem {
        items?: IComponent[];
    }
    export interface IBlock {
        id: string;
        path: string;
        caption: string;
        image: string;
    }
    export interface IControl extends IComponent {
        control: Control;
    }
    export type onChangedCallback = (prop: string, value: string | number | boolean | object, mediaQueryProp?: string) => void;
    export type onUpdateCallback = (isChecked: boolean, props: string[]) => void;
    export type onEventChangedCallback = (prop: string, newValue: string, oldValue: string) => void;
    export type onEventDblClickCallback = (funcName: string) => void;
    export interface IFileHandler {
        openFile(file: IIPFSData, transportEndpoint: string, parentCid: string, parent: Control): Promise<void>;
    }
    export interface IIPFSData {
        cid: string;
        name?: string;
        size?: number;
        type?: string | 'dir' | 'file';
        links?: IIPFSData[];
        path?: string;
        sort?: 'asc' | 'desc';
        root?: boolean;
    }
    export interface IMediaQuery {
        minWidth: string;
        maxWidth?: string;
        properties: any;
    }
}
/// <amd-module name="@scom/scom-designer/types/components.ts" />
declare module "@scom/scom-designer/types/components.ts" {
    const _default_1: "declare module \"moment\"{\n    /**\n * @param strict Strict parsing disables the deprecated fallback to the native Date constructor when\n * parsing a string.\n */\n function moment(inp?: moment.MomentInput, strict?: boolean): moment.Moment;\n/**\n * @param strict Strict parsing requires that the format and input match exactly, including delimiters.\n * Strict parsing is frequently the best parsing option. For more information about choosing strict vs\n * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).\n */\n function moment(inp?: moment.MomentInput, format?: moment.MomentFormatSpecification, strict?: boolean): moment.Moment;\n/**\n * @param strict Strict parsing requires that the format and input match exactly, including delimiters.\n * Strict parsing is frequently the best parsing option. For more information about choosing strict vs\n * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).\n */\n function moment(inp?: moment.MomentInput, format?: moment.MomentFormatSpecification, language?: string, strict?: boolean): moment.Moment;\n\n namespace moment {\n  type RelativeTimeKey = 's' | 'ss' | 'm' | 'mm' | 'h' | 'hh' | 'd' | 'dd' | 'w' | 'ww' | 'M' | 'MM' | 'y' | 'yy';\n  type CalendarKey = 'sameDay' | 'nextDay' | 'lastDay' | 'nextWeek' | 'lastWeek' | 'sameElse' | string;\n  type LongDateFormatKey = 'LTS' | 'LT' | 'L' | 'LL' | 'LLL' | 'LLLL' | 'lts' | 'lt' | 'l' | 'll' | 'lll' | 'llll';\n\n  interface Locale {\n    calendar(key?: CalendarKey, m?: Moment, now?: Moment): string;\n\n    longDateFormat(key: LongDateFormatKey): string;\n    invalidDate(): string;\n    ordinal(n: number): string;\n\n    preparse(inp: string): string;\n    postformat(inp: string): string;\n    relativeTime(n: number, withoutSuffix: boolean,\n                 key: RelativeTimeKey, isFuture: boolean): string;\n    pastFuture(diff: number, absRelTime: string): string;\n    set(config: Object): void;\n\n    months(): string[];\n    months(m: Moment, format?: string): string;\n    monthsShort(): string[];\n    monthsShort(m: Moment, format?: string): string;\n    monthsParse(monthName: string, format: string, strict: boolean): number;\n    monthsRegex(strict: boolean): RegExp;\n    monthsShortRegex(strict: boolean): RegExp;\n\n    week(m: Moment): number;\n    firstDayOfYear(): number;\n    firstDayOfWeek(): number;\n\n    weekdays(): string[];\n    weekdays(m: Moment, format?: string): string;\n    weekdaysMin(): string[];\n    weekdaysMin(m: Moment): string;\n    weekdaysShort(): string[];\n    weekdaysShort(m: Moment): string;\n    weekdaysParse(weekdayName: string, format: string, strict: boolean): number;\n    weekdaysRegex(strict: boolean): RegExp;\n    weekdaysShortRegex(strict: boolean): RegExp;\n    weekdaysMinRegex(strict: boolean): RegExp;\n\n    isPM(input: string): boolean;\n    meridiem(hour: number, minute: number, isLower: boolean): string;\n  }\n\n  interface StandaloneFormatSpec {\n    format: string[];\n    standalone: string[];\n    isFormat?: RegExp;\n  }\n\n  interface WeekSpec {\n    dow: number;\n    doy?: number;\n  }\n\n  type CalendarSpecVal = string | ((m?: MomentInput, now?: Moment) => string);\n  interface CalendarSpec {\n    sameDay?: CalendarSpecVal;\n    nextDay?: CalendarSpecVal;\n    lastDay?: CalendarSpecVal;\n    nextWeek?: CalendarSpecVal;\n    lastWeek?: CalendarSpecVal;\n    sameElse?: CalendarSpecVal;\n\n    // any additional properties might be used with moment.calendarFormat\n    [x: string]: CalendarSpecVal | void; // undefined\n  }\n\n  type RelativeTimeSpecVal = (\n    string |\n    ((n: number, withoutSuffix: boolean,\n      key: RelativeTimeKey, isFuture: boolean) => string)\n  );\n  type RelativeTimeFuturePastVal = string | ((relTime: string) => string);\n\n  interface RelativeTimeSpec {\n    future?: RelativeTimeFuturePastVal;\n    past?: RelativeTimeFuturePastVal;\n    s?: RelativeTimeSpecVal;\n    ss?: RelativeTimeSpecVal;\n    m?: RelativeTimeSpecVal;\n    mm?: RelativeTimeSpecVal;\n    h?: RelativeTimeSpecVal;\n    hh?: RelativeTimeSpecVal;\n    d?: RelativeTimeSpecVal;\n    dd?: RelativeTimeSpecVal;\n    w?: RelativeTimeSpecVal\n    ww?: RelativeTimeSpecVal;\n    M?: RelativeTimeSpecVal;\n    MM?: RelativeTimeSpecVal;\n    y?: RelativeTimeSpecVal;\n    yy?: RelativeTimeSpecVal;\n  }\n\n  interface LongDateFormatSpec {\n    LTS: string;\n    LT: string;\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n\n    // lets forget for a sec that any upper/lower permutation will also work\n    lts?: string;\n    lt?: string;\n    l?: string;\n    ll?: string;\n    lll?: string;\n    llll?: string;\n  }\n\n  type MonthWeekdayFn = (momentToFormat: Moment, format?: string) => string;\n  type WeekdaySimpleFn = (momentToFormat: Moment) => string;\n  interface EraSpec {\n    since: string | number;\n    until: string | number;\n    offset: number;\n    name: string;\n    narrow: string;\n    abbr: string;\n  }\n\n  interface LocaleSpecification {\n    months?: string[] | StandaloneFormatSpec | MonthWeekdayFn;\n    monthsShort?: string[] | StandaloneFormatSpec | MonthWeekdayFn;\n\n    weekdays?: string[] | StandaloneFormatSpec | MonthWeekdayFn;\n    weekdaysShort?: string[] | StandaloneFormatSpec | WeekdaySimpleFn;\n    weekdaysMin?: string[] | StandaloneFormatSpec | WeekdaySimpleFn;\n\n    meridiemParse?: RegExp;\n    meridiem?: (hour: number, minute:number, isLower: boolean) => string;\n\n    isPM?: (input: string) => boolean;\n\n    longDateFormat?: LongDateFormatSpec;\n    calendar?: CalendarSpec;\n    relativeTime?: RelativeTimeSpec;\n    invalidDate?: string;\n    ordinal?: (n: number) => string;\n    ordinalParse?: RegExp;\n\n    week?: WeekSpec;\n    eras?: EraSpec[];\n\n    // Allow anything: in general any property that is passed as locale spec is\n    // put in the locale object so it can be used by locale functions\n    [x: string]: any;\n  }\n\n  interface MomentObjectOutput {\n    years: number;\n    /* One digit */\n    months: number;\n    /* Day of the month */\n    date: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n  }\n\n  interface argThresholdOpts {\n    ss?: number;\n    s?: number;\n    m?: number;\n    h?: number;\n    d?: number;\n    w?: number | void;\n    M?: number;\n  }\n\n  interface Duration {\n    clone(): Duration;\n\n    humanize(argWithSuffix?: boolean, argThresholds?: argThresholdOpts): string;\n    \n    humanize(argThresholds?: argThresholdOpts): string;\n\n    abs(): Duration;\n\n    as(units: unitOfTime.Base): number;\n    get(units: unitOfTime.Base): number;\n\n    milliseconds(): number;\n    asMilliseconds(): number;\n\n    seconds(): number;\n    asSeconds(): number;\n\n    minutes(): number;\n    asMinutes(): number;\n\n    hours(): number;\n    asHours(): number;\n\n    days(): number;\n    asDays(): number;\n\n    weeks(): number;\n    asWeeks(): number;\n\n    months(): number;\n    asMonths(): number;\n\n    years(): number;\n    asYears(): number;\n\n    add(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;\n    subtract(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;\n\n    locale(): string;\n    locale(locale: LocaleSpecifier): Duration;\n    localeData(): Locale;\n\n    toISOString(): string;\n    toJSON(): string;\n\n    isValid(): boolean;\n\n    /**\n     * @deprecated since version 2.8.0\n     */\n    lang(locale: LocaleSpecifier): Moment;\n    /**\n     * @deprecated since version 2.8.0\n     */\n    lang(): Locale;\n    /**\n     * @deprecated\n     */\n    toIsoString(): string;\n  }\n\n  interface MomentRelativeTime {\n    future: any;\n    past: any;\n    s: any;\n    ss: any;\n    m: any;\n    mm: any;\n    h: any;\n    hh: any;\n    d: any;\n    dd: any;\n    M: any;\n    MM: any;\n    y: any;\n    yy: any;\n  }\n\n  interface MomentLongDateFormat {\n    L: string;\n    LL: string;\n    LLL: string;\n    LLLL: string;\n    LT: string;\n    LTS: string;\n\n    l?: string;\n    ll?: string;\n    lll?: string;\n    llll?: string;\n    lt?: string;\n    lts?: string;\n  }\n\n  interface MomentParsingFlags {\n    empty: boolean;\n    unusedTokens: string[];\n    unusedInput: string[];\n    overflow: number;\n    charsLeftOver: number;\n    nullInput: boolean;\n    invalidMonth: string | void; // null\n    invalidFormat: boolean;\n    userInvalidated: boolean;\n    iso: boolean;\n    parsedDateParts: any[];\n    meridiem: string | void; // null\n  }\n\n  interface MomentParsingFlagsOpt {\n    empty?: boolean;\n    unusedTokens?: string[];\n    unusedInput?: string[];\n    overflow?: number;\n    charsLeftOver?: number;\n    nullInput?: boolean;\n    invalidMonth?: string;\n    invalidFormat?: boolean;\n    userInvalidated?: boolean;\n    iso?: boolean;\n    parsedDateParts?: any[];\n    meridiem?: string;\n  }\n\n  interface MomentBuiltinFormat {\n    __momentBuiltinFormatBrand: any;\n  }\n\n  type MomentFormatSpecification = string | MomentBuiltinFormat | (string | MomentBuiltinFormat)[];\n\n  export namespace unitOfTime {\n    type Base = (\n      \"year\" | \"years\" | \"y\" |\n      \"month\" | \"months\" | \"M\" |\n      \"week\" | \"weeks\" | \"w\" |\n      \"day\" | \"days\" | \"d\" |\n      \"hour\" | \"hours\" | \"h\" |\n      \"minute\" | \"minutes\" | \"m\" |\n      \"second\" | \"seconds\" | \"s\" |\n      \"millisecond\" | \"milliseconds\" | \"ms\"\n    );\n\n    type _quarter = \"quarter\" | \"quarters\" | \"Q\";\n    type _isoWeek = \"isoWeek\" | \"isoWeeks\" | \"W\";\n    type _date = \"date\" | \"dates\" | \"D\";\n    type DurationConstructor = Base | _quarter | _isoWeek;\n\n    export type DurationAs = Base;\n\n    export type StartOf = Base | _quarter | _isoWeek | _date | void; // null\n\n    export type Diff = Base | _quarter;\n\n    export type MomentConstructor = Base | _date;\n\n    export type All = Base | _quarter | _isoWeek | _date |\n      \"weekYear\" | \"weekYears\" | \"gg\" |\n      \"isoWeekYear\" | \"isoWeekYears\" | \"GG\" |\n      \"dayOfYear\" | \"dayOfYears\" | \"DDD\" |\n      \"weekday\" | \"weekdays\" | \"e\" |\n      \"isoWeekday\" | \"isoWeekdays\" | \"E\";\n  }\n\n  type numberlike = number | string;\n  interface MomentInputObject {\n    years?: numberlike;\n    year?: numberlike;\n    y?: numberlike;\n\n    months?: numberlike;\n    month?: numberlike;\n    M?: numberlike;\n\n    days?: numberlike;\n    day?: numberlike;\n    d?: numberlike;\n\n    dates?: numberlike;\n    date?: numberlike;\n    D?: numberlike;\n\n    hours?: numberlike;\n    hour?: numberlike;\n    h?: numberlike;\n\n    minutes?: numberlike;\n    minute?: numberlike;\n    m?: numberlike;\n\n    seconds?: numberlike;\n    second?: numberlike;\n    s?: numberlike;\n\n    milliseconds?: numberlike;\n    millisecond?: numberlike;\n    ms?: numberlike;\n  }\n\n  interface DurationInputObject extends MomentInputObject {\n    quarters?: numberlike;\n    quarter?: numberlike;\n    Q?: numberlike;\n\n    weeks?: numberlike;\n    week?: numberlike;\n    w?: numberlike;\n  }\n\n  interface MomentSetObject extends MomentInputObject {\n    weekYears?: numberlike;\n    weekYear?: numberlike;\n    gg?: numberlike;\n\n    isoWeekYears?: numberlike;\n    isoWeekYear?: numberlike;\n    GG?: numberlike;\n\n    quarters?: numberlike;\n    quarter?: numberlike;\n    Q?: numberlike;\n\n    weeks?: numberlike;\n    week?: numberlike;\n    w?: numberlike;\n\n    isoWeeks?: numberlike;\n    isoWeek?: numberlike;\n    W?: numberlike;\n\n    dayOfYears?: numberlike;\n    dayOfYear?: numberlike;\n    DDD?: numberlike;\n\n    weekdays?: numberlike;\n    weekday?: numberlike;\n    e?: numberlike;\n\n    isoWeekdays?: numberlike;\n    isoWeekday?: numberlike;\n    E?: numberlike;\n  }\n\n  interface FromTo {\n    from: MomentInput;\n    to: MomentInput;\n  }\n\n  type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined\n  type DurationInputArg1 = Duration | number | string | FromTo | DurationInputObject | void; // null | undefined\n  type DurationInputArg2 = unitOfTime.DurationConstructor;\n  type LocaleSpecifier = string | Moment | Duration | string[] | boolean;\n\n  interface MomentCreationData {\n    input: MomentInput;\n    format?: MomentFormatSpecification;\n    locale: Locale;\n    isUTC: boolean;\n    strict?: boolean;\n  }\n\n  interface Moment extends Object {\n    format(format?: string): string;\n\n    startOf(unitOfTime: unitOfTime.StartOf): Moment;\n    endOf(unitOfTime: unitOfTime.StartOf): Moment;\n\n    add(amount?: DurationInputArg1, unit?: DurationInputArg2): Moment;\n    /**\n     * @deprecated reverse syntax\n     */\n    add(unit: unitOfTime.DurationConstructor, amount: number|string): Moment;\n\n    subtract(amount?: DurationInputArg1, unit?: DurationInputArg2): Moment;\n    /**\n     * @deprecated reverse syntax\n     */\n    subtract(unit: unitOfTime.DurationConstructor, amount: number|string): Moment;\n\n    calendar(): string;\n    calendar(formats: CalendarSpec): string;\n    calendar(time: MomentInput, formats?: CalendarSpec): string;\n\n    clone(): Moment;\n\n    /**\n     * @return Unix timestamp in milliseconds\n     */\n    valueOf(): number;\n\n    // current date/time in local mode\n    local(keepLocalTime?: boolean): Moment;\n    isLocal(): boolean;\n\n    // current date/time in UTC mode\n    utc(keepLocalTime?: boolean): Moment;\n    isUTC(): boolean;\n    /**\n     * @deprecated use isUTC\n     */\n    isUtc(): boolean;\n\n    parseZone(): Moment;\n    isValid(): boolean;\n    invalidAt(): number;\n\n    hasAlignedHourOffset(other?: MomentInput): boolean;\n\n    creationData(): MomentCreationData;\n    parsingFlags(): MomentParsingFlags;\n\n    year(y: number): Moment;\n    year(): number;\n    /**\n     * @deprecated use year(y)\n     */\n    years(y: number): Moment;\n    /**\n     * @deprecated use year()\n     */\n    years(): number;\n    quarter(): number;\n    quarter(q: number): Moment;\n    quarters(): number;\n    quarters(q: number): Moment;\n    month(M: number|string): Moment;\n    month(): number;\n    /**\n     * @deprecated use month(M)\n     */\n    months(M: number|string): Moment;\n    /**\n     * @deprecated use month()\n     */\n    months(): number;\n    day(d: number|string): Moment;\n    day(): number;\n    days(d: number|string): Moment;\n    days(): number;\n    date(d: number): Moment;\n    date(): number;\n    /**\n     * @deprecated use date(d)\n     */\n    dates(d: number): Moment;\n    /**\n     * @deprecated use date()\n     */\n    dates(): number;\n    hour(h: number): Moment;\n    hour(): number;\n    hours(h: number): Moment;\n    hours(): number;\n    minute(m: number): Moment;\n    minute(): number;\n    minutes(m: number): Moment;\n    minutes(): number;\n    second(s: number): Moment;\n    second(): number;\n    seconds(s: number): Moment;\n    seconds(): number;\n    millisecond(ms: number): Moment;\n    millisecond(): number;\n    milliseconds(ms: number): Moment;\n    milliseconds(): number;\n    weekday(): number;\n    weekday(d: number): Moment;\n    isoWeekday(): number;\n    isoWeekday(d: number|string): Moment;\n    weekYear(): number;\n    weekYear(d: number): Moment;\n    isoWeekYear(): number;\n    isoWeekYear(d: number): Moment;\n    week(): number;\n    week(d: number): Moment;\n    weeks(): number;\n    weeks(d: number): Moment;\n    isoWeek(): number;\n    isoWeek(d: number): Moment;\n    isoWeeks(): number;\n    isoWeeks(d: number): Moment;\n    weeksInYear(): number;\n    weeksInWeekYear(): number;\n    isoWeeksInYear(): number;\n    isoWeeksInISOWeekYear(): number;\n    dayOfYear(): number;\n    dayOfYear(d: number): Moment;\n\n    from(inp: MomentInput, suffix?: boolean): string;\n    to(inp: MomentInput, suffix?: boolean): string;\n    fromNow(withoutSuffix?: boolean): string;\n    toNow(withoutPrefix?: boolean): string;\n\n    diff(b: MomentInput, unitOfTime?: unitOfTime.Diff, precise?: boolean): number;\n\n    toArray(): number[];\n    toDate(): Date;\n    toISOString(keepOffset?: boolean): string;\n    inspect(): string;\n    toJSON(): string;\n    unix(): number;\n\n    isLeapYear(): boolean;\n    /**\n     * @deprecated in favor of utcOffset\n     */\n    zone(): number;\n    zone(b: number|string): Moment;\n    utcOffset(): number;\n    utcOffset(b: number|string, keepLocalTime?: boolean): Moment;\n    isUtcOffset(): boolean;\n    daysInMonth(): number;\n    isDST(): boolean;\n\n    zoneAbbr(): string;\n    zoneName(): string;\n\n    isBefore(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;\n    isAfter(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;\n    isSame(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;\n    isSameOrAfter(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;\n    isSameOrBefore(inp?: MomentInput, granularity?: unitOfTime.StartOf): boolean;\n    isBetween(a: MomentInput, b: MomentInput, granularity?: unitOfTime.StartOf, inclusivity?: \"()\" | \"[)\" | \"(]\" | \"[]\"): boolean;\n\n    /**\n     * @deprecated as of 2.8.0, use locale\n     */\n    lang(language: LocaleSpecifier): Moment;\n    /**\n     * @deprecated as of 2.8.0, use locale\n     */\n    lang(): Locale;\n\n    locale(): string;\n    locale(locale: LocaleSpecifier): Moment;\n\n    localeData(): Locale;\n\n    /**\n     * @deprecated no reliable implementation\n     */\n    isDSTShifted(): boolean;\n\n    // NOTE(constructor): Same as moment constructor\n    /**\n     * @deprecated as of 2.7.0, use moment.min/max\n     */\n    max(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;\n    /**\n     * @deprecated as of 2.7.0, use moment.min/max\n     */\n    max(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;\n\n    // NOTE(constructor): Same as moment constructor\n    /**\n     * @deprecated as of 2.7.0, use moment.min/max\n     */\n    min(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;\n    /**\n     * @deprecated as of 2.7.0, use moment.min/max\n     */\n    min(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;\n\n    get(unit: unitOfTime.All): number;\n    set(unit: unitOfTime.All, value: number): Moment;\n    set(objectLiteral: MomentSetObject): Moment;\n\n    toObject(): MomentObjectOutput;\n  }\n\n  export var version: string;\n  export var fn: Moment;\n\n  // NOTE(constructor): Same as moment constructor\n  /**\n   * @param strict Strict parsing disables the deprecated fallback to the native Date constructor when\n   * parsing a string.\n   */\n  export function utc(inp?: MomentInput, strict?: boolean): Moment;\n  /**\n   * @param strict Strict parsing requires that the format and input match exactly, including delimiters.\n   * Strict parsing is frequently the best parsing option. For more information about choosing strict vs\n   * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).\n   */\n  export function utc(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;\n  /**\n   * @param strict Strict parsing requires that the format and input match exactly, including delimiters.\n   * Strict parsing is frequently the best parsing option. For more information about choosing strict vs\n   * forgiving parsing, see the [parsing guide](https://momentjs.com/guides/#/parsing/).\n   */\n  export function utc(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;\n\n  export function unix(timestamp: number): Moment;\n\n  export function invalid(flags?: MomentParsingFlagsOpt): Moment;\n  export function isMoment(m: any): m is Moment;\n  export function isDate(m: any): m is Date;\n  export function isDuration(d: any): d is Duration;\n\n  /**\n   * @deprecated in 2.8.0\n   */\n  export function lang(language?: string): string;\n  /**\n   * @deprecated in 2.8.0\n   */\n  export function lang(language?: string, definition?: Locale): string;\n\n  export function locale(language?: string): string;\n  export function locale(language?: string[]): string;\n  export function locale(language?: string, definition?: LocaleSpecification | void): string; // null | undefined\n\n  export function localeData(key?: string | string[]): Locale;\n\n  export function duration(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;\n\n  // NOTE(constructor): Same as moment constructor\n  export function parseZone(inp?: MomentInput, format?: MomentFormatSpecification, strict?: boolean): Moment;\n  export function parseZone(inp?: MomentInput, format?: MomentFormatSpecification, language?: string, strict?: boolean): Moment;\n\n  export function months(): string[];\n  export function months(index: number): string;\n  export function months(format: string): string[];\n  export function months(format: string, index: number): string;\n  export function monthsShort(): string[];\n  export function monthsShort(index: number): string;\n  export function monthsShort(format: string): string[];\n  export function monthsShort(format: string, index: number): string;\n\n  export function weekdays(): string[];\n  export function weekdays(index: number): string;\n  export function weekdays(format: string): string[];\n  export function weekdays(format: string, index: number): string;\n  export function weekdays(localeSorted: boolean): string[];\n  export function weekdays(localeSorted: boolean, index: number): string;\n  export function weekdays(localeSorted: boolean, format: string): string[];\n  export function weekdays(localeSorted: boolean, format: string, index: number): string;\n  export function weekdaysShort(): string[];\n  export function weekdaysShort(index: number): string;\n  export function weekdaysShort(format: string): string[];\n  export function weekdaysShort(format: string, index: number): string;\n  export function weekdaysShort(localeSorted: boolean): string[];\n  export function weekdaysShort(localeSorted: boolean, index: number): string;\n  export function weekdaysShort(localeSorted: boolean, format: string): string[];\n  export function weekdaysShort(localeSorted: boolean, format: string, index: number): string;\n  export function weekdaysMin(): string[];\n  export function weekdaysMin(index: number): string;\n  export function weekdaysMin(format: string): string[];\n  export function weekdaysMin(format: string, index: number): string;\n  export function weekdaysMin(localeSorted: boolean): string[];\n  export function weekdaysMin(localeSorted: boolean, index: number): string;\n  export function weekdaysMin(localeSorted: boolean, format: string): string[];\n  export function weekdaysMin(localeSorted: boolean, format: string, index: number): string;\n\n  export function min(moments: Moment[]): Moment;\n  export function min(...moments: Moment[]): Moment;\n  export function max(moments: Moment[]): Moment;\n  export function max(...moments: Moment[]): Moment;\n\n  /**\n   * Returns unix time in milliseconds. Overwrite for profit.\n   */\n  export function now(): number;\n\n  export function defineLocale(language: string, localeSpec: LocaleSpecification | void): Locale; // null\n  export function updateLocale(language: string, localeSpec: LocaleSpecification | void): Locale; // null\n\n  export function locales(): string[];\n\n  export function normalizeUnits(unit: unitOfTime.All): string;\n  export function relativeTimeThreshold(threshold: string): number | boolean;\n  export function relativeTimeThreshold(threshold: string, limit: number): boolean;\n  export function relativeTimeRounding(fn: (num: number) => number): boolean;\n  export function relativeTimeRounding(): (num: number) => number;\n  export function calendarFormat(m: Moment, now: Moment): string;\n\n  export function parseTwoDigitYear(input: string): number;\n\n  /**\n   * Constant used to enable explicit ISO_8601 format parsing.\n   */\n  export var ISO_8601: MomentBuiltinFormat;\n  export var RFC_2822: MomentBuiltinFormat;\n\n  export var defaultFormat: string;\n  export var defaultFormatUtc: string;\n  export var suppressDeprecationWarnings: boolean;\n  export var deprecationHandler: ((name: string | void, msg: string) => void) | void;\n\n  export var HTML5_FMT: {\n    DATETIME_LOCAL: string,\n    DATETIME_LOCAL_SECONDS: string,\n    DATETIME_LOCAL_MS: string,\n    DATE: string,\n    TIME: string,\n    TIME_SECONDS: string,\n    TIME_MS: string,\n    WEEK: string,\n    MONTH: string\n  };\n\n}\n\nexport default moment;\n\n}/// <reference types=\"node\" />\ndeclare module \"packages/style/src/colors\" {\n    export interface IColor {\n        50: string;\n        100: string;\n        200: string;\n        300: string;\n        400: string;\n        500: string;\n        600: string;\n        700: string;\n        800: string;\n        900: string;\n        A100: string;\n        A200: string;\n        A400: string;\n        A700: string;\n    }\n    export const amber: IColor;\n    export const blue: IColor;\n    export const blueGrey: IColor;\n    export const brown: IColor;\n    export const cyan: IColor;\n    export const deepOrange: IColor;\n    export const deepPurple: IColor;\n    export const green: IColor;\n    export const grey: IColor;\n    export const indigo: IColor;\n    export const lightBlue: IColor;\n    export const lightGreen: IColor;\n    export const lime: IColor;\n    export const orange: IColor;\n    export const pink: IColor;\n    export const purple: IColor;\n    export const red: IColor;\n    export const teal: IColor;\n    export const yellow: IColor;\n    export interface IColors {\n        amber: IColor;\n        blue: IColor;\n        blueGrey: IColor;\n        brown: IColor;\n        cyan: IColor;\n        deepOrange: IColor;\n        deepPurple: IColor;\n        green: IColor;\n        grey: IColor;\n        indigo: IColor;\n        lightBlue: IColor;\n        lightGreen: IColor;\n        lime: IColor;\n        orange: IColor;\n        pink: IColor;\n        purple: IColor;\n        red: IColor;\n        teal: IColor;\n        yellow: IColor;\n    }\n    export const Colors: IColors;\n}\ndeclare module \"packages/style/src/theme\" {\n    import { IColor, Colors } from \"packages/style/src/colors\";\n    export { Colors };\n    type IColorVar = string;\n    interface IThemeColors {\n        main: IColorVar;\n        light: IColorVar;\n        dark: IColorVar;\n        contrastText: IColorVar;\n    }\n    interface ILayout {\n        container: {\n            width: string;\n            maxWidth: string;\n            textAlign: string;\n            overflow: string;\n        };\n    }\n    export interface ITheme {\n        action: {\n            active: IColorVar;\n            activeBackground: IColorVar;\n            activeOpacity: number;\n            disabled: IColorVar;\n            disabledBackground: IColorVar;\n            disabledOpacity: number;\n            focus: IColorVar;\n            focusBackground: IColorVar;\n            focusOpacity: number;\n            hover: IColorVar;\n            hoverBackground: IColorVar;\n            hoverOpacity: number;\n            selected: IColorVar;\n            selectedBackground: IColorVar;\n            selectedOpacity: number;\n        };\n        background: {\n            default: IColorVar;\n            paper: IColorVar;\n            main: IColorVar;\n            modal: IColorVar;\n            gradient: IColorVar;\n        };\n        breakpoints: {\n            xs: number;\n            sm: number;\n            md: number;\n            lg: number;\n            xl: number;\n        };\n        colors: {\n            primary: IThemeColors;\n            secondary: IThemeColors;\n            error: IThemeColors;\n            warning: IThemeColors;\n            info: IThemeColors;\n            success: IThemeColors;\n        };\n        layout: ILayout;\n        divider: IColorVar;\n        shadows: {\n            0: string;\n            1: string;\n            2: string;\n            3: string;\n            4: string;\n        };\n        text: {\n            primary: IColorVar;\n            secondary: IColorVar;\n            third: IColorVar;\n            disabled: IColorVar;\n            hint: IColorVar;\n        };\n        docs: {\n            background: IColorVar;\n            text0: IColorVar;\n            text1: IColorVar;\n        };\n        typography: {\n            fontFamily: string;\n            fontSize: string;\n        };\n        input: {\n            background: string;\n            fontColor: string;\n        };\n        combobox: {\n            background: string;\n            fontColor: string;\n        };\n    }\n    export interface IThemeVariables {\n        action: {\n            active: string;\n            activeBackground: string;\n            activeOpacity: string;\n            disabled: string;\n            disabledBackground: string;\n            disabledOpacity: string;\n            focus: string;\n            focusBackground: string;\n            focusOpacity: string;\n            hover: string;\n            hoverBackground: string;\n            hoverOpacity: string;\n            selected: string;\n            selectedBackground: string;\n            selectedOpacity: string;\n        };\n        background: {\n            default: string;\n            paper: string;\n            main: string;\n            modal: string;\n            gradient: string;\n        };\n        breakpoints: {\n            xs: string;\n            sm: string;\n            md: string;\n            lg: string;\n            xl: string;\n        };\n        colors: {\n            primary: IThemeColors;\n            secondary: IThemeColors;\n            error: IThemeColors;\n            warning: IThemeColors;\n            info: IThemeColors;\n            success: IThemeColors;\n        };\n        layout: ILayout;\n        divider: string;\n        shadows: {\n            0: string;\n            1: string;\n            2: string;\n            3: string;\n            4: string;\n        };\n        text: {\n            primary: string;\n            secondary: string;\n            third: string;\n            disabled: string;\n            hint: string;\n        };\n        docs: {\n            background: string;\n            text0: string;\n            text1: string;\n        };\n        typography: {\n            fontFamily: string;\n            fontSize: string;\n        };\n        input: {\n            background: string;\n            fontColor: string;\n        };\n        combobox: {\n            background: string;\n            fontColor: string;\n        };\n    }\n    export const defaultTheme: ITheme;\n    export const darkTheme: ITheme;\n    export const ThemeVars: IThemeVariables;\n    export const ColorVars: IColor;\n    export var currentTheme: ITheme;\n    export function applyTheme(theme: ITheme): void;\n}\ndeclare module \"packages/style/src/styles\" {\n    export type PropertyValue = number | boolean | string;\n    export interface Styles {\n        $unique?: boolean;\n        $global?: boolean;\n        $displayName?: string;\n        [selector: string]: null | undefined | PropertyValue | PropertyValue[] | Styles;\n    }\n    export interface Changes {\n        add(style: Container<any>, index: number): void;\n        change(style: Container<any>, oldIndex: number, newIndex: number): void;\n        remove(style: Container<any>, index: number): void;\n    }\n    export interface Container<T> {\n        id: string;\n        clone(): T;\n        getStyles(): string;\n    }\n    export class Cache<T extends Container<any>> {\n        changes?: Changes | undefined;\n        sheet: string[];\n        changeId: number;\n        private _keys;\n        private _children;\n        private _counters;\n        constructor(changes?: Changes | undefined);\n        add(style: T): void;\n        remove(style: T): void;\n        values(): T[];\n        merge(cache: Cache<any>): this;\n        unmerge(cache: Cache<any>): this;\n        clone(): Cache<T>;\n    }\n    export class Selector implements Container<Selector> {\n        selector: string;\n        id: string;\n        constructor(selector: string, id: string);\n        getStyles(): string;\n        clone(): Selector;\n    }\n    export class Style extends Cache<Selector> implements Container<Style> {\n        style: string;\n        id: string;\n        constructor(style: string, id: string);\n        getStyles(): string;\n        clone(): Style;\n    }\n    export class Rule extends Cache<Rule | Style> implements Container<Rule> {\n        rule: string;\n        style: string;\n        id: string;\n        constructor(rule: string, style: string, id: string);\n        getStyles(): string;\n        clone(): Rule;\n    }\n    export class FreeStyle extends Cache<Rule | Style> implements Container<FreeStyle> {\n        id: string;\n        constructor(id: string, changes?: Changes);\n        registerStyle(css: Styles): string;\n        registerKeyframes(keyframes: Styles): string;\n        registerHashRule(prefix: string, styles: Styles): string;\n        registerRule(rule: string, styles: Styles): string;\n        registerCss(styles: Styles): string;\n        getStyles(): string;\n        clone(): FreeStyle;\n    }\n    export function create(changes?: Changes): FreeStyle;\n}\ndeclare module \"packages/style/src/csstype\" {\n    export type PropertyValue<TValue> = TValue extends Array<infer AValue> ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue> : TValue extends infer TUnpacked & {} ? TUnpacked : TValue;\n    export type Fallback<T> = {\n        [P in keyof T]: T[P] | NonNullable<T[P]>[];\n    };\n    export interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n        accentColor?: Property.AccentColor | undefined;\n        alignContent?: Property.AlignContent | undefined;\n        alignItems?: Property.AlignItems | undefined;\n        alignSelf?: Property.AlignSelf | undefined;\n        alignTracks?: Property.AlignTracks | undefined;\n        animationDelay?: Property.AnimationDelay<TTime> | undefined;\n        animationDirection?: Property.AnimationDirection | undefined;\n        animationDuration?: Property.AnimationDuration<TTime> | undefined;\n        animationFillMode?: Property.AnimationFillMode | undefined;\n        animationIterationCount?: Property.AnimationIterationCount | undefined;\n        animationName?: Property.AnimationName | undefined;\n        animationPlayState?: Property.AnimationPlayState | undefined;\n        animationTimingFunction?: Property.AnimationTimingFunction | undefined;\n        appearance?: Property.Appearance | undefined;\n        aspectRatio?: Property.AspectRatio | undefined;\n        backdropFilter?: Property.BackdropFilter | undefined;\n        backfaceVisibility?: Property.BackfaceVisibility | undefined;\n        backgroundAttachment?: Property.BackgroundAttachment | undefined;\n        backgroundBlendMode?: Property.BackgroundBlendMode | undefined;\n        backgroundClip?: Property.BackgroundClip | undefined;\n        backgroundColor?: Property.BackgroundColor | undefined;\n        backgroundImage?: Property.BackgroundImage | undefined;\n        backgroundOrigin?: Property.BackgroundOrigin | undefined;\n        backgroundPositionX?: Property.BackgroundPositionX<TLength> | undefined;\n        backgroundPositionY?: Property.BackgroundPositionY<TLength> | undefined;\n        backgroundRepeat?: Property.BackgroundRepeat | undefined;\n        backgroundSize?: Property.BackgroundSize<TLength> | undefined;\n        blockOverflow?: Property.BlockOverflow | undefined;\n        blockSize?: Property.BlockSize<TLength> | undefined;\n        borderBlockColor?: Property.BorderBlockColor | undefined;\n        borderBlockEndColor?: Property.BorderBlockEndColor | undefined;\n        borderBlockEndStyle?: Property.BorderBlockEndStyle | undefined;\n        borderBlockEndWidth?: Property.BorderBlockEndWidth<TLength> | undefined;\n        borderBlockStartColor?: Property.BorderBlockStartColor | undefined;\n        borderBlockStartStyle?: Property.BorderBlockStartStyle | undefined;\n        borderBlockStartWidth?: Property.BorderBlockStartWidth<TLength> | undefined;\n        borderBlockStyle?: Property.BorderBlockStyle | undefined;\n        borderBlockWidth?: Property.BorderBlockWidth<TLength> | undefined;\n        borderBottomColor?: Property.BorderBottomColor | undefined;\n        borderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n        borderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n        borderBottomStyle?: Property.BorderBottomStyle | undefined;\n        borderBottomWidth?: Property.BorderBottomWidth<TLength> | undefined;\n        borderCollapse?: Property.BorderCollapse | undefined;\n        borderEndEndRadius?: Property.BorderEndEndRadius<TLength> | undefined;\n        borderEndStartRadius?: Property.BorderEndStartRadius<TLength> | undefined;\n        borderImageOutset?: Property.BorderImageOutset<TLength> | undefined;\n        borderImageRepeat?: Property.BorderImageRepeat | undefined;\n        borderImageSlice?: Property.BorderImageSlice | undefined;\n        borderImageSource?: Property.BorderImageSource | undefined;\n        borderImageWidth?: Property.BorderImageWidth<TLength> | undefined;\n        borderInlineColor?: Property.BorderInlineColor | undefined;\n        borderInlineEndColor?: Property.BorderInlineEndColor | undefined;\n        borderInlineEndStyle?: Property.BorderInlineEndStyle | undefined;\n        borderInlineEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n        borderInlineStartColor?: Property.BorderInlineStartColor | undefined;\n        borderInlineStartStyle?: Property.BorderInlineStartStyle | undefined;\n        borderInlineStartWidth?: Property.BorderInlineStartWidth<TLength> | undefined;\n        borderInlineStyle?: Property.BorderInlineStyle | undefined;\n        borderInlineWidth?: Property.BorderInlineWidth<TLength> | undefined;\n        borderLeftColor?: Property.BorderLeftColor | undefined;\n        borderLeftStyle?: Property.BorderLeftStyle | undefined;\n        borderLeftWidth?: Property.BorderLeftWidth<TLength> | undefined;\n        borderRightColor?: Property.BorderRightColor | undefined;\n        borderRightStyle?: Property.BorderRightStyle | undefined;\n        borderRightWidth?: Property.BorderRightWidth<TLength> | undefined;\n        borderSpacing?: Property.BorderSpacing<TLength> | undefined;\n        borderStartEndRadius?: Property.BorderStartEndRadius<TLength> | undefined;\n        borderStartStartRadius?: Property.BorderStartStartRadius<TLength> | undefined;\n        borderTopColor?: Property.BorderTopColor | undefined;\n        borderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n        borderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n        borderTopStyle?: Property.BorderTopStyle | undefined;\n        borderTopWidth?: Property.BorderTopWidth<TLength> | undefined;\n        bottom?: Property.Bottom<TLength> | undefined;\n        boxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n        boxShadow?: Property.BoxShadow | undefined;\n        boxSizing?: Property.BoxSizing | undefined;\n        breakAfter?: Property.BreakAfter | undefined;\n        breakBefore?: Property.BreakBefore | undefined;\n        breakInside?: Property.BreakInside | undefined;\n        captionSide?: Property.CaptionSide | undefined;\n        caretColor?: Property.CaretColor | undefined;\n        clear?: Property.Clear | undefined;\n        clipPath?: Property.ClipPath | undefined;\n        color?: Property.Color | undefined;\n        colorAdjust?: Property.ColorAdjust | undefined;\n        colorScheme?: Property.ColorScheme | undefined;\n        columnCount?: Property.ColumnCount | undefined;\n        columnFill?: Property.ColumnFill | undefined;\n        columnGap?: Property.ColumnGap<TLength> | undefined;\n        columnRuleColor?: Property.ColumnRuleColor | undefined;\n        columnRuleStyle?: Property.ColumnRuleStyle | undefined;\n        columnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n        columnSpan?: Property.ColumnSpan | undefined;\n        columnWidth?: Property.ColumnWidth<TLength> | undefined;\n        contain?: Property.Contain | undefined;\n        content?: Property.Content | undefined;\n        contentVisibility?: Property.ContentVisibility | undefined;\n        counterIncrement?: Property.CounterIncrement | undefined;\n        counterReset?: Property.CounterReset | undefined;\n        counterSet?: Property.CounterSet | undefined;\n        cursor?: Property.Cursor | undefined;\n        direction?: Property.Direction | undefined;\n        display?: Property.Display | undefined;\n        emptyCells?: Property.EmptyCells | undefined;\n        filter?: Property.Filter | undefined;\n        flexBasis?: Property.FlexBasis<TLength> | undefined;\n        flexDirection?: Property.FlexDirection | undefined;\n        flexGrow?: Property.FlexGrow | undefined;\n        flexShrink?: Property.FlexShrink | undefined;\n        flexWrap?: Property.FlexWrap | undefined;\n        float?: Property.Float | undefined;\n        fontFamily?: Property.FontFamily | undefined;\n        fontFeatureSettings?: Property.FontFeatureSettings | undefined;\n        fontKerning?: Property.FontKerning | undefined;\n        fontLanguageOverride?: Property.FontLanguageOverride | undefined;\n        fontOpticalSizing?: Property.FontOpticalSizing | undefined;\n        fontSize?: Property.FontSize<TLength> | undefined;\n        fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n        fontSmooth?: Property.FontSmooth<TLength> | undefined;\n        fontStretch?: Property.FontStretch | undefined;\n        fontStyle?: Property.FontStyle | undefined;\n        fontSynthesis?: Property.FontSynthesis | undefined;\n        fontVariant?: Property.FontVariant | undefined;\n        fontVariantCaps?: Property.FontVariantCaps | undefined;\n        fontVariantEastAsian?: Property.FontVariantEastAsian | undefined;\n        fontVariantLigatures?: Property.FontVariantLigatures | undefined;\n        fontVariantNumeric?: Property.FontVariantNumeric | undefined;\n        fontVariantPosition?: Property.FontVariantPosition | undefined;\n        fontVariationSettings?: Property.FontVariationSettings | undefined;\n        fontWeight?: Property.FontWeight | undefined;\n        forcedColorAdjust?: Property.ForcedColorAdjust | undefined;\n        gridAutoColumns?: Property.GridAutoColumns<TLength> | undefined;\n        gridAutoFlow?: Property.GridAutoFlow | undefined;\n        gridAutoRows?: Property.GridAutoRows<TLength> | undefined;\n        gridColumnEnd?: Property.GridColumnEnd | undefined;\n        gridColumnStart?: Property.GridColumnStart | undefined;\n        gridRowEnd?: Property.GridRowEnd | undefined;\n        gridRowStart?: Property.GridRowStart | undefined;\n        gridTemplateAreas?: Property.GridTemplateAreas | undefined;\n        gridTemplateColumns?: Property.GridTemplateColumns<TLength> | undefined;\n        gridTemplateRows?: Property.GridTemplateRows<TLength> | undefined;\n        hangingPunctuation?: Property.HangingPunctuation | undefined;\n        height?: Property.Height<TLength> | undefined;\n        hyphens?: Property.Hyphens | undefined;\n        imageOrientation?: Property.ImageOrientation | undefined;\n        imageRendering?: Property.ImageRendering | undefined;\n        imageResolution?: Property.ImageResolution | undefined;\n        initialLetter?: Property.InitialLetter | undefined;\n        inlineSize?: Property.InlineSize<TLength> | undefined;\n        inset?: Property.Inset<TLength> | undefined;\n        insetBlock?: Property.InsetBlock<TLength> | undefined;\n        insetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n        insetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n        insetInline?: Property.InsetInline<TLength> | undefined;\n        insetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n        insetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n        isolation?: Property.Isolation | undefined;\n        justifyContent?: Property.JustifyContent | undefined;\n        justifyItems?: Property.JustifyItems | undefined;\n        justifySelf?: Property.JustifySelf | undefined;\n        justifyTracks?: Property.JustifyTracks | undefined;\n        left?: Property.Left<TLength> | undefined;\n        letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n        lineBreak?: Property.LineBreak | undefined;\n        lineHeight?: Property.LineHeight<TLength> | undefined;\n        lineHeightStep?: Property.LineHeightStep<TLength> | undefined;\n        listStyleImage?: Property.ListStyleImage | undefined;\n        listStylePosition?: Property.ListStylePosition | undefined;\n        listStyleType?: Property.ListStyleType | undefined;\n        marginBlock?: Property.MarginBlock<TLength> | undefined;\n        marginBlockEnd?: Property.MarginBlockEnd<TLength> | undefined;\n        marginBlockStart?: Property.MarginBlockStart<TLength> | undefined;\n        marginBottom?: Property.MarginBottom<TLength> | undefined;\n        marginInline?: Property.MarginInline<TLength> | undefined;\n        marginInlineEnd?: Property.MarginInlineEnd<TLength> | undefined;\n        marginInlineStart?: Property.MarginInlineStart<TLength> | undefined;\n        marginLeft?: Property.MarginLeft<TLength> | undefined;\n        marginRight?: Property.MarginRight<TLength> | undefined;\n        marginTop?: Property.MarginTop<TLength> | undefined;\n        maskBorderMode?: Property.MaskBorderMode | undefined;\n        maskBorderOutset?: Property.MaskBorderOutset<TLength> | undefined;\n        maskBorderRepeat?: Property.MaskBorderRepeat | undefined;\n        maskBorderSlice?: Property.MaskBorderSlice | undefined;\n        maskBorderSource?: Property.MaskBorderSource | undefined;\n        maskBorderWidth?: Property.MaskBorderWidth<TLength> | undefined;\n        maskClip?: Property.MaskClip | undefined;\n        maskComposite?: Property.MaskComposite | undefined;\n        maskImage?: Property.MaskImage | undefined;\n        maskMode?: Property.MaskMode | undefined;\n        maskOrigin?: Property.MaskOrigin | undefined;\n        maskPosition?: Property.MaskPosition<TLength> | undefined;\n        maskRepeat?: Property.MaskRepeat | undefined;\n        maskSize?: Property.MaskSize<TLength> | undefined;\n        maskType?: Property.MaskType | undefined;\n        mathStyle?: Property.MathStyle | undefined;\n        maxBlockSize?: Property.MaxBlockSize<TLength> | undefined;\n        maxHeight?: Property.MaxHeight<TLength> | undefined;\n        maxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n        maxLines?: Property.MaxLines | undefined;\n        maxWidth?: Property.MaxWidth<TLength> | undefined;\n        minBlockSize?: Property.MinBlockSize<TLength> | undefined;\n        minHeight?: Property.MinHeight<TLength> | undefined;\n        minInlineSize?: Property.MinInlineSize<TLength> | undefined;\n        minWidth?: Property.MinWidth<TLength> | undefined;\n        mixBlendMode?: Property.MixBlendMode | undefined;\n        motionDistance?: Property.OffsetDistance<TLength> | undefined;\n        motionPath?: Property.OffsetPath | undefined;\n        motionRotation?: Property.OffsetRotate | undefined;\n        objectFit?: Property.ObjectFit | undefined;\n        objectPosition?: Property.ObjectPosition<TLength> | undefined;\n        offsetAnchor?: Property.OffsetAnchor<TLength> | undefined;\n        offsetDistance?: Property.OffsetDistance<TLength> | undefined;\n        offsetPath?: Property.OffsetPath | undefined;\n        offsetRotate?: Property.OffsetRotate | undefined;\n        offsetRotation?: Property.OffsetRotate | undefined;\n        opacity?: Property.Opacity | undefined;\n        order?: Property.Order | undefined;\n        orphans?: Property.Orphans | undefined;\n        outlineColor?: Property.OutlineColor | undefined;\n        outlineOffset?: Property.OutlineOffset<TLength> | undefined;\n        outlineStyle?: Property.OutlineStyle | undefined;\n        outlineWidth?: Property.OutlineWidth<TLength> | undefined;\n        overflowAnchor?: Property.OverflowAnchor | undefined;\n        overflowBlock?: Property.OverflowBlock | undefined;\n        overflowClipBox?: Property.OverflowClipBox | undefined;\n        overflowClipMargin?: Property.OverflowClipMargin<TLength> | undefined;\n        overflowInline?: Property.OverflowInline | undefined;\n        overflowWrap?: Property.OverflowWrap | undefined;\n        overflowX?: Property.OverflowX | undefined;\n        overflowY?: Property.OverflowY | undefined;\n        overscrollBehaviorBlock?: Property.OverscrollBehaviorBlock | undefined;\n        overscrollBehaviorInline?: Property.OverscrollBehaviorInline | undefined;\n        overscrollBehaviorX?: Property.OverscrollBehaviorX | undefined;\n        overscrollBehaviorY?: Property.OverscrollBehaviorY | undefined;\n        paddingBlock?: Property.PaddingBlock<TLength> | undefined;\n        paddingBlockEnd?: Property.PaddingBlockEnd<TLength> | undefined;\n        paddingBlockStart?: Property.PaddingBlockStart<TLength> | undefined;\n        paddingBottom?: Property.PaddingBottom<TLength> | undefined;\n        paddingInline?: Property.PaddingInline<TLength> | undefined;\n        paddingInlineEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n        paddingInlineStart?: Property.PaddingInlineStart<TLength> | undefined;\n        paddingLeft?: Property.PaddingLeft<TLength> | undefined;\n        paddingRight?: Property.PaddingRight<TLength> | undefined;\n        paddingTop?: Property.PaddingTop<TLength> | undefined;\n        pageBreakAfter?: Property.PageBreakAfter | undefined;\n        pageBreakBefore?: Property.PageBreakBefore | undefined;\n        pageBreakInside?: Property.PageBreakInside | undefined;\n        paintOrder?: Property.PaintOrder | undefined;\n        perspective?: Property.Perspective<TLength> | undefined;\n        perspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n        placeContent?: Property.PlaceContent | undefined;\n        pointerEvents?: Property.PointerEvents | undefined;\n        position?: Property.Position | undefined;\n        quotes?: Property.Quotes | undefined;\n        resize?: Property.Resize | undefined;\n        right?: Property.Right<TLength> | undefined;\n        rotate?: Property.Rotate | undefined;\n        rowGap?: Property.RowGap<TLength> | undefined;\n        rubyAlign?: Property.RubyAlign | undefined;\n        rubyMerge?: Property.RubyMerge | undefined;\n        rubyPosition?: Property.RubyPosition | undefined;\n        scale?: Property.Scale | undefined;\n        scrollBehavior?: Property.ScrollBehavior | undefined;\n        scrollMargin?: Property.ScrollMargin<TLength> | undefined;\n        scrollMarginBlock?: Property.ScrollMarginBlock<TLength> | undefined;\n        scrollMarginBlockEnd?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n        scrollMarginBlockStart?: Property.ScrollMarginBlockStart<TLength> | undefined;\n        scrollMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n        scrollMarginInline?: Property.ScrollMarginInline<TLength> | undefined;\n        scrollMarginInlineEnd?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n        scrollMarginInlineStart?: Property.ScrollMarginInlineStart<TLength> | undefined;\n        scrollMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n        scrollMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n        scrollMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n        scrollPadding?: Property.ScrollPadding<TLength> | undefined;\n        scrollPaddingBlock?: Property.ScrollPaddingBlock<TLength> | undefined;\n        scrollPaddingBlockEnd?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n        scrollPaddingBlockStart?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n        scrollPaddingBottom?: Property.ScrollPaddingBottom<TLength> | undefined;\n        scrollPaddingInline?: Property.ScrollPaddingInline<TLength> | undefined;\n        scrollPaddingInlineEnd?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n        scrollPaddingInlineStart?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n        scrollPaddingLeft?: Property.ScrollPaddingLeft<TLength> | undefined;\n        scrollPaddingRight?: Property.ScrollPaddingRight<TLength> | undefined;\n        scrollPaddingTop?: Property.ScrollPaddingTop<TLength> | undefined;\n        scrollSnapAlign?: Property.ScrollSnapAlign | undefined;\n        scrollSnapMargin?: Property.ScrollMargin<TLength> | undefined;\n        scrollSnapMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n        scrollSnapMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n        scrollSnapMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n        scrollSnapMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n        scrollSnapStop?: Property.ScrollSnapStop | undefined;\n        scrollSnapType?: Property.ScrollSnapType | undefined;\n        scrollbarColor?: Property.ScrollbarColor | undefined;\n        scrollbarGutter?: Property.ScrollbarGutter | undefined;\n        scrollbarWidth?: Property.ScrollbarWidth | undefined;\n        shapeImageThreshold?: Property.ShapeImageThreshold | undefined;\n        shapeMargin?: Property.ShapeMargin<TLength> | undefined;\n        shapeOutside?: Property.ShapeOutside | undefined;\n        tabSize?: Property.TabSize<TLength> | undefined;\n        tableLayout?: Property.TableLayout | undefined;\n        textAlign?: Property.TextAlign | undefined;\n        textAlignLast?: Property.TextAlignLast | undefined;\n        textCombineUpright?: Property.TextCombineUpright | undefined;\n        textDecorationColor?: Property.TextDecorationColor | undefined;\n        textDecorationLine?: Property.TextDecorationLine | undefined;\n        textDecorationSkip?: Property.TextDecorationSkip | undefined;\n        textDecorationSkipInk?: Property.TextDecorationSkipInk | undefined;\n        textDecorationStyle?: Property.TextDecorationStyle | undefined;\n        textDecorationThickness?: Property.TextDecorationThickness<TLength> | undefined;\n        textDecorationWidth?: Property.TextDecorationThickness<TLength> | undefined;\n        textEmphasisColor?: Property.TextEmphasisColor | undefined;\n        textEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n        textEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n        textIndent?: Property.TextIndent<TLength> | undefined;\n        textJustify?: Property.TextJustify | undefined;\n        textOrientation?: Property.TextOrientation | undefined;\n        textOverflow?: Property.TextOverflow | undefined;\n        textRendering?: Property.TextRendering | undefined;\n        textShadow?: Property.TextShadow | undefined;\n        textSizeAdjust?: Property.TextSizeAdjust | undefined;\n        textTransform?: Property.TextTransform | undefined;\n        textUnderlineOffset?: Property.TextUnderlineOffset<TLength> | undefined;\n        textUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n        top?: Property.Top<TLength> | undefined;\n        touchAction?: Property.TouchAction | undefined;\n        transform?: Property.Transform | undefined;\n        transformBox?: Property.TransformBox | undefined;\n        transformOrigin?: Property.TransformOrigin<TLength> | undefined;\n        transformStyle?: Property.TransformStyle | undefined;\n        transitionDelay?: Property.TransitionDelay<TTime> | undefined;\n        transitionDuration?: Property.TransitionDuration<TTime> | undefined;\n        transitionProperty?: Property.TransitionProperty | undefined;\n        transitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n        translate?: Property.Translate<TLength> | undefined;\n        unicodeBidi?: Property.UnicodeBidi | undefined;\n        userSelect?: Property.UserSelect | undefined;\n        verticalAlign?: Property.VerticalAlign<TLength> | undefined;\n        visibility?: Property.Visibility | undefined;\n        whiteSpace?: Property.WhiteSpace | undefined;\n        widows?: Property.Widows | undefined;\n        width?: Property.Width<TLength> | undefined;\n        willChange?: Property.WillChange | undefined;\n        wordBreak?: Property.WordBreak | undefined;\n        wordSpacing?: Property.WordSpacing<TLength> | undefined;\n        wordWrap?: Property.WordWrap | undefined;\n        writingMode?: Property.WritingMode | undefined;\n        zIndex?: Property.ZIndex | undefined;\n        zoom?: Property.Zoom | undefined;\n    }\n    export interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n        all?: Property.All | undefined;\n        animation?: Property.Animation<TTime> | undefined;\n        background?: Property.Background<TLength> | undefined;\n        backgroundPosition?: Property.BackgroundPosition<TLength> | undefined;\n        border?: Property.Border<TLength> | undefined;\n        borderBlock?: Property.BorderBlock<TLength> | undefined;\n        borderBlockEnd?: Property.BorderBlockEnd<TLength> | undefined;\n        borderBlockStart?: Property.BorderBlockStart<TLength> | undefined;\n        borderBottom?: Property.BorderBottom<TLength> | undefined;\n        borderColor?: Property.BorderColor | undefined;\n        borderImage?: Property.BorderImage | undefined;\n        borderInline?: Property.BorderInline<TLength> | undefined;\n        borderInlineEnd?: Property.BorderInlineEnd<TLength> | undefined;\n        borderInlineStart?: Property.BorderInlineStart<TLength> | undefined;\n        borderLeft?: Property.BorderLeft<TLength> | undefined;\n        borderRadius?: Property.BorderRadius<TLength> | undefined;\n        borderRight?: Property.BorderRight<TLength> | undefined;\n        borderStyle?: Property.BorderStyle | undefined;\n        borderTop?: Property.BorderTop<TLength> | undefined;\n        borderWidth?: Property.BorderWidth<TLength> | undefined;\n        columnRule?: Property.ColumnRule<TLength> | undefined;\n        columns?: Property.Columns<TLength> | undefined;\n        flex?: Property.Flex<TLength> | undefined;\n        flexFlow?: Property.FlexFlow | undefined;\n        font?: Property.Font | undefined;\n        gap?: Property.Gap<TLength> | undefined;\n        grid?: Property.Grid | undefined;\n        gridArea?: Property.GridArea | undefined;\n        gridColumn?: Property.GridColumn | undefined;\n        gridRow?: Property.GridRow | undefined;\n        gridTemplate?: Property.GridTemplate | undefined;\n        lineClamp?: Property.LineClamp | undefined;\n        listStyle?: Property.ListStyle | undefined;\n        margin?: Property.Margin<TLength> | undefined;\n        mask?: Property.Mask<TLength> | undefined;\n        maskBorder?: Property.MaskBorder | undefined;\n        motion?: Property.Offset<TLength> | undefined;\n        offset?: Property.Offset<TLength> | undefined;\n        outline?: Property.Outline<TLength> | undefined;\n        overflow?: Property.Overflow | undefined;\n        overscrollBehavior?: Property.OverscrollBehavior | undefined;\n        padding?: Property.Padding<TLength> | undefined;\n        placeItems?: Property.PlaceItems | undefined;\n        placeSelf?: Property.PlaceSelf | undefined;\n        textDecoration?: Property.TextDecoration<TLength> | undefined;\n        textEmphasis?: Property.TextEmphasis | undefined;\n        transition?: Property.Transition<TTime> | undefined;\n    }\n    export interface StandardProperties<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandProperties<TLength, TTime>, StandardShorthandProperties<TLength, TTime> {\n    }\n    export interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n        MozAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n        MozAnimationDirection?: Property.AnimationDirection | undefined;\n        MozAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n        MozAnimationFillMode?: Property.AnimationFillMode | undefined;\n        MozAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n        MozAnimationName?: Property.AnimationName | undefined;\n        MozAnimationPlayState?: Property.AnimationPlayState | undefined;\n        MozAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n        MozAppearance?: Property.MozAppearance | undefined;\n        MozBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n        MozBorderBottomColors?: Property.MozBorderBottomColors | undefined;\n        MozBorderEndColor?: Property.BorderInlineEndColor | undefined;\n        MozBorderEndStyle?: Property.BorderInlineEndStyle | undefined;\n        MozBorderEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n        MozBorderLeftColors?: Property.MozBorderLeftColors | undefined;\n        MozBorderRightColors?: Property.MozBorderRightColors | undefined;\n        MozBorderStartColor?: Property.BorderInlineStartColor | undefined;\n        MozBorderStartStyle?: Property.BorderInlineStartStyle | undefined;\n        MozBorderTopColors?: Property.MozBorderTopColors | undefined;\n        MozBoxSizing?: Property.BoxSizing | undefined;\n        MozColumnCount?: Property.ColumnCount | undefined;\n        MozColumnFill?: Property.ColumnFill | undefined;\n        MozColumnGap?: Property.ColumnGap<TLength> | undefined;\n        MozColumnRuleColor?: Property.ColumnRuleColor | undefined;\n        MozColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n        MozColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n        MozColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n        MozContextProperties?: Property.MozContextProperties | undefined;\n        MozFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n        MozFontLanguageOverride?: Property.FontLanguageOverride | undefined;\n        MozHyphens?: Property.Hyphens | undefined;\n        MozImageRegion?: Property.MozImageRegion | undefined;\n        MozMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n        MozMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n        MozOrient?: Property.MozOrient | undefined;\n        MozOsxFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n        MozPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n        MozPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n        MozPerspective?: Property.Perspective<TLength> | undefined;\n        MozPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n        MozStackSizing?: Property.MozStackSizing | undefined;\n        MozTabSize?: Property.TabSize<TLength> | undefined;\n        MozTextBlink?: Property.MozTextBlink | undefined;\n        MozTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n        MozTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n        MozTransformStyle?: Property.TransformStyle | undefined;\n        MozTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n        MozTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n        MozTransitionProperty?: Property.TransitionProperty | undefined;\n        MozTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n        MozUserFocus?: Property.MozUserFocus | undefined;\n        MozUserModify?: Property.MozUserModify | undefined;\n        MozUserSelect?: Property.UserSelect | undefined;\n        MozWindowDragging?: Property.MozWindowDragging | undefined;\n        MozWindowShadow?: Property.MozWindowShadow | undefined;\n        msAccelerator?: Property.MsAccelerator | undefined;\n        msAlignSelf?: Property.AlignSelf | undefined;\n        msBlockProgression?: Property.MsBlockProgression | undefined;\n        msContentZoomChaining?: Property.MsContentZoomChaining | undefined;\n        msContentZoomLimitMax?: Property.MsContentZoomLimitMax | undefined;\n        msContentZoomLimitMin?: Property.MsContentZoomLimitMin | undefined;\n        msContentZoomSnapPoints?: Property.MsContentZoomSnapPoints | undefined;\n        msContentZoomSnapType?: Property.MsContentZoomSnapType | undefined;\n        msContentZooming?: Property.MsContentZooming | undefined;\n        msFilter?: Property.MsFilter | undefined;\n        msFlexDirection?: Property.FlexDirection | undefined;\n        msFlexPositive?: Property.FlexGrow | undefined;\n        msFlowFrom?: Property.MsFlowFrom | undefined;\n        msFlowInto?: Property.MsFlowInto | undefined;\n        msGridColumns?: Property.MsGridColumns<TLength> | undefined;\n        msGridRows?: Property.MsGridRows<TLength> | undefined;\n        msHighContrastAdjust?: Property.MsHighContrastAdjust | undefined;\n        msHyphenateLimitChars?: Property.MsHyphenateLimitChars | undefined;\n        msHyphenateLimitLines?: Property.MsHyphenateLimitLines | undefined;\n        msHyphenateLimitZone?: Property.MsHyphenateLimitZone<TLength> | undefined;\n        msHyphens?: Property.Hyphens | undefined;\n        msImeAlign?: Property.MsImeAlign | undefined;\n        msJustifySelf?: Property.JustifySelf | undefined;\n        msLineBreak?: Property.LineBreak | undefined;\n        msOrder?: Property.Order | undefined;\n        msOverflowStyle?: Property.MsOverflowStyle | undefined;\n        msOverflowX?: Property.OverflowX | undefined;\n        msOverflowY?: Property.OverflowY | undefined;\n        msScrollChaining?: Property.MsScrollChaining | undefined;\n        msScrollLimitXMax?: Property.MsScrollLimitXMax<TLength> | undefined;\n        msScrollLimitXMin?: Property.MsScrollLimitXMin<TLength> | undefined;\n        msScrollLimitYMax?: Property.MsScrollLimitYMax<TLength> | undefined;\n        msScrollLimitYMin?: Property.MsScrollLimitYMin<TLength> | undefined;\n        msScrollRails?: Property.MsScrollRails | undefined;\n        msScrollSnapPointsX?: Property.MsScrollSnapPointsX | undefined;\n        msScrollSnapPointsY?: Property.MsScrollSnapPointsY | undefined;\n        msScrollSnapType?: Property.MsScrollSnapType | undefined;\n        msScrollTranslation?: Property.MsScrollTranslation | undefined;\n        msScrollbar3dlightColor?: Property.MsScrollbar3dlightColor | undefined;\n        msScrollbarArrowColor?: Property.MsScrollbarArrowColor | undefined;\n        msScrollbarBaseColor?: Property.MsScrollbarBaseColor | undefined;\n        msScrollbarDarkshadowColor?: Property.MsScrollbarDarkshadowColor | undefined;\n        msScrollbarFaceColor?: Property.MsScrollbarFaceColor | undefined;\n        msScrollbarHighlightColor?: Property.MsScrollbarHighlightColor | undefined;\n        msScrollbarShadowColor?: Property.MsScrollbarShadowColor | undefined;\n        msTextAutospace?: Property.MsTextAutospace | undefined;\n        msTextCombineHorizontal?: Property.TextCombineUpright | undefined;\n        msTextOverflow?: Property.TextOverflow | undefined;\n        msTouchAction?: Property.TouchAction | undefined;\n        msTouchSelect?: Property.MsTouchSelect | undefined;\n        msTransform?: Property.Transform | undefined;\n        msTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n        msTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n        msTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n        msTransitionProperty?: Property.TransitionProperty | undefined;\n        msTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n        msUserSelect?: Property.MsUserSelect | undefined;\n        msWordBreak?: Property.WordBreak | undefined;\n        msWrapFlow?: Property.MsWrapFlow | undefined;\n        msWrapMargin?: Property.MsWrapMargin<TLength> | undefined;\n        msWrapThrough?: Property.MsWrapThrough | undefined;\n        msWritingMode?: Property.WritingMode | undefined;\n        WebkitAlignContent?: Property.AlignContent | undefined;\n        WebkitAlignItems?: Property.AlignItems | undefined;\n        WebkitAlignSelf?: Property.AlignSelf | undefined;\n        WebkitAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n        WebkitAnimationDirection?: Property.AnimationDirection | undefined;\n        WebkitAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n        WebkitAnimationFillMode?: Property.AnimationFillMode | undefined;\n        WebkitAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n        WebkitAnimationName?: Property.AnimationName | undefined;\n        WebkitAnimationPlayState?: Property.AnimationPlayState | undefined;\n        WebkitAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n        WebkitAppearance?: Property.WebkitAppearance | undefined;\n        WebkitBackdropFilter?: Property.BackdropFilter | undefined;\n        WebkitBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n        WebkitBackgroundClip?: Property.BackgroundClip | undefined;\n        WebkitBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n        WebkitBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n        WebkitBorderBeforeColor?: Property.WebkitBorderBeforeColor | undefined;\n        WebkitBorderBeforeStyle?: Property.WebkitBorderBeforeStyle | undefined;\n        WebkitBorderBeforeWidth?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n        WebkitBorderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n        WebkitBorderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n        WebkitBorderImageSlice?: Property.BorderImageSlice | undefined;\n        WebkitBorderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n        WebkitBorderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n        WebkitBoxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n        WebkitBoxReflect?: Property.WebkitBoxReflect<TLength> | undefined;\n        WebkitBoxShadow?: Property.BoxShadow | undefined;\n        WebkitBoxSizing?: Property.BoxSizing | undefined;\n        WebkitClipPath?: Property.ClipPath | undefined;\n        WebkitColumnCount?: Property.ColumnCount | undefined;\n        WebkitColumnFill?: Property.ColumnFill | undefined;\n        WebkitColumnGap?: Property.ColumnGap<TLength> | undefined;\n        WebkitColumnRuleColor?: Property.ColumnRuleColor | undefined;\n        WebkitColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n        WebkitColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n        WebkitColumnSpan?: Property.ColumnSpan | undefined;\n        WebkitColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n        WebkitFilter?: Property.Filter | undefined;\n        WebkitFlexBasis?: Property.FlexBasis<TLength> | undefined;\n        WebkitFlexDirection?: Property.FlexDirection | undefined;\n        WebkitFlexGrow?: Property.FlexGrow | undefined;\n        WebkitFlexShrink?: Property.FlexShrink | undefined;\n        WebkitFlexWrap?: Property.FlexWrap | undefined;\n        WebkitFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n        WebkitFontKerning?: Property.FontKerning | undefined;\n        WebkitFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n        WebkitFontVariantLigatures?: Property.FontVariantLigatures | undefined;\n        WebkitHyphens?: Property.Hyphens | undefined;\n        WebkitInitialLetter?: Property.InitialLetter | undefined;\n        WebkitJustifyContent?: Property.JustifyContent | undefined;\n        WebkitLineBreak?: Property.LineBreak | undefined;\n        WebkitLineClamp?: Property.WebkitLineClamp | undefined;\n        WebkitMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n        WebkitMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n        WebkitMaskAttachment?: Property.WebkitMaskAttachment | undefined;\n        WebkitMaskBoxImageOutset?: Property.MaskBorderOutset<TLength> | undefined;\n        WebkitMaskBoxImageRepeat?: Property.MaskBorderRepeat | undefined;\n        WebkitMaskBoxImageSlice?: Property.MaskBorderSlice | undefined;\n        WebkitMaskBoxImageSource?: Property.MaskBorderSource | undefined;\n        WebkitMaskBoxImageWidth?: Property.MaskBorderWidth<TLength> | undefined;\n        WebkitMaskClip?: Property.WebkitMaskClip | undefined;\n        WebkitMaskComposite?: Property.WebkitMaskComposite | undefined;\n        WebkitMaskImage?: Property.WebkitMaskImage | undefined;\n        WebkitMaskOrigin?: Property.WebkitMaskOrigin | undefined;\n        WebkitMaskPosition?: Property.WebkitMaskPosition<TLength> | undefined;\n        WebkitMaskPositionX?: Property.WebkitMaskPositionX<TLength> | undefined;\n        WebkitMaskPositionY?: Property.WebkitMaskPositionY<TLength> | undefined;\n        WebkitMaskRepeat?: Property.WebkitMaskRepeat | undefined;\n        WebkitMaskRepeatX?: Property.WebkitMaskRepeatX | undefined;\n        WebkitMaskRepeatY?: Property.WebkitMaskRepeatY | undefined;\n        WebkitMaskSize?: Property.WebkitMaskSize<TLength> | undefined;\n        WebkitMaxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n        WebkitOrder?: Property.Order | undefined;\n        WebkitOverflowScrolling?: Property.WebkitOverflowScrolling | undefined;\n        WebkitPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n        WebkitPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n        WebkitPerspective?: Property.Perspective<TLength> | undefined;\n        WebkitPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n        WebkitPrintColorAdjust?: Property.ColorAdjust | undefined;\n        WebkitRubyPosition?: Property.RubyPosition | undefined;\n        WebkitScrollSnapType?: Property.ScrollSnapType | undefined;\n        WebkitShapeMargin?: Property.ShapeMargin<TLength> | undefined;\n        WebkitTapHighlightColor?: Property.WebkitTapHighlightColor | undefined;\n        WebkitTextCombine?: Property.TextCombineUpright | undefined;\n        WebkitTextDecorationColor?: Property.TextDecorationColor | undefined;\n        WebkitTextDecorationLine?: Property.TextDecorationLine | undefined;\n        WebkitTextDecorationSkip?: Property.TextDecorationSkip | undefined;\n        WebkitTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n        WebkitTextEmphasisColor?: Property.TextEmphasisColor | undefined;\n        WebkitTextEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n        WebkitTextEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n        WebkitTextFillColor?: Property.WebkitTextFillColor | undefined;\n        WebkitTextOrientation?: Property.TextOrientation | undefined;\n        WebkitTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n        WebkitTextStrokeColor?: Property.WebkitTextStrokeColor | undefined;\n        WebkitTextStrokeWidth?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n        WebkitTextUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n        WebkitTouchCallout?: Property.WebkitTouchCallout | undefined;\n        WebkitTransform?: Property.Transform | undefined;\n        WebkitTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n        WebkitTransformStyle?: Property.TransformStyle | undefined;\n        WebkitTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n        WebkitTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n        WebkitTransitionProperty?: Property.TransitionProperty | undefined;\n        WebkitTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n        WebkitUserModify?: Property.WebkitUserModify | undefined;\n        WebkitUserSelect?: Property.UserSelect | undefined;\n        WebkitWritingMode?: Property.WritingMode | undefined;\n    }\n    export interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n        MozAnimation?: Property.Animation<TTime> | undefined;\n        MozBorderImage?: Property.BorderImage | undefined;\n        MozColumnRule?: Property.ColumnRule<TLength> | undefined;\n        MozColumns?: Property.Columns<TLength> | undefined;\n        MozTransition?: Property.Transition<TTime> | undefined;\n        msContentZoomLimit?: Property.MsContentZoomLimit | undefined;\n        msContentZoomSnap?: Property.MsContentZoomSnap | undefined;\n        msFlex?: Property.Flex<TLength> | undefined;\n        msScrollLimit?: Property.MsScrollLimit | undefined;\n        msScrollSnapX?: Property.MsScrollSnapX | undefined;\n        msScrollSnapY?: Property.MsScrollSnapY | undefined;\n        msTransition?: Property.Transition<TTime> | undefined;\n        WebkitAnimation?: Property.Animation<TTime> | undefined;\n        WebkitBorderBefore?: Property.WebkitBorderBefore<TLength> | undefined;\n        WebkitBorderImage?: Property.BorderImage | undefined;\n        WebkitBorderRadius?: Property.BorderRadius<TLength> | undefined;\n        WebkitColumnRule?: Property.ColumnRule<TLength> | undefined;\n        WebkitColumns?: Property.Columns<TLength> | undefined;\n        WebkitFlex?: Property.Flex<TLength> | undefined;\n        WebkitFlexFlow?: Property.FlexFlow | undefined;\n        WebkitMask?: Property.WebkitMask<TLength> | undefined;\n        WebkitMaskBoxImage?: Property.MaskBorder | undefined;\n        WebkitTextEmphasis?: Property.TextEmphasis | undefined;\n        WebkitTextStroke?: Property.WebkitTextStroke<TLength> | undefined;\n        WebkitTransition?: Property.Transition<TTime> | undefined;\n    }\n    export interface VendorProperties<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {\n    }\n    export interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n        azimuth?: Property.Azimuth | undefined;\n        boxAlign?: Property.BoxAlign | undefined;\n        boxDirection?: Property.BoxDirection | undefined;\n        boxFlex?: Property.BoxFlex | undefined;\n        boxFlexGroup?: Property.BoxFlexGroup | undefined;\n        boxLines?: Property.BoxLines | undefined;\n        boxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n        boxOrient?: Property.BoxOrient | undefined;\n        boxPack?: Property.BoxPack | undefined;\n        clip?: Property.Clip | undefined;\n        fontVariantAlternates?: Property.FontVariantAlternates | undefined;\n        gridColumnGap?: Property.GridColumnGap<TLength> | undefined;\n        gridGap?: Property.GridGap<TLength> | undefined;\n        gridRowGap?: Property.GridRowGap<TLength> | undefined;\n        imeMode?: Property.ImeMode | undefined;\n        offsetBlock?: Property.InsetBlock<TLength> | undefined;\n        offsetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n        offsetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n        offsetInline?: Property.InsetInline<TLength> | undefined;\n        offsetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n        offsetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n        scrollSnapCoordinate?: Property.ScrollSnapCoordinate<TLength> | undefined;\n        scrollSnapDestination?: Property.ScrollSnapDestination<TLength> | undefined;\n        scrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;\n        scrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;\n        scrollSnapTypeX?: Property.ScrollSnapTypeX | undefined;\n        scrollSnapTypeY?: Property.ScrollSnapTypeY | undefined;\n        scrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;\n        KhtmlBoxAlign?: Property.BoxAlign | undefined;\n        KhtmlBoxDirection?: Property.BoxDirection | undefined;\n        KhtmlBoxFlex?: Property.BoxFlex | undefined;\n        KhtmlBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n        KhtmlBoxLines?: Property.BoxLines | undefined;\n        KhtmlBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n        KhtmlBoxOrient?: Property.BoxOrient | undefined;\n        KhtmlBoxPack?: Property.BoxPack | undefined;\n        KhtmlLineBreak?: Property.LineBreak | undefined;\n        KhtmlOpacity?: Property.Opacity | undefined;\n        KhtmlUserSelect?: Property.UserSelect | undefined;\n        MozBackgroundClip?: Property.BackgroundClip | undefined;\n        MozBackgroundInlinePolicy?: Property.BoxDecorationBreak | undefined;\n        MozBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n        MozBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n        MozBinding?: Property.MozBinding | undefined;\n        MozBorderRadius?: Property.BorderRadius<TLength> | undefined;\n        MozBorderRadiusBottomleft?: Property.BorderBottomLeftRadius<TLength> | undefined;\n        MozBorderRadiusBottomright?: Property.BorderBottomRightRadius<TLength> | undefined;\n        MozBorderRadiusTopleft?: Property.BorderTopLeftRadius<TLength> | undefined;\n        MozBorderRadiusTopright?: Property.BorderTopRightRadius<TLength> | undefined;\n        MozBoxAlign?: Property.BoxAlign | undefined;\n        MozBoxDirection?: Property.BoxDirection | undefined;\n        MozBoxFlex?: Property.BoxFlex | undefined;\n        MozBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n        MozBoxOrient?: Property.BoxOrient | undefined;\n        MozBoxPack?: Property.BoxPack | undefined;\n        MozBoxShadow?: Property.BoxShadow | undefined;\n        MozFloatEdge?: Property.MozFloatEdge | undefined;\n        MozForceBrokenImageIcon?: Property.MozForceBrokenImageIcon | undefined;\n        MozOpacity?: Property.Opacity | undefined;\n        MozOutline?: Property.Outline<TLength> | undefined;\n        MozOutlineColor?: Property.OutlineColor | undefined;\n        MozOutlineRadius?: Property.MozOutlineRadius<TLength> | undefined;\n        MozOutlineRadiusBottomleft?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n        MozOutlineRadiusBottomright?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n        MozOutlineRadiusTopleft?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n        MozOutlineRadiusTopright?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n        MozOutlineStyle?: Property.OutlineStyle | undefined;\n        MozOutlineWidth?: Property.OutlineWidth<TLength> | undefined;\n        MozTextAlignLast?: Property.TextAlignLast | undefined;\n        MozTextDecorationColor?: Property.TextDecorationColor | undefined;\n        MozTextDecorationLine?: Property.TextDecorationLine | undefined;\n        MozTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n        MozUserInput?: Property.MozUserInput | undefined;\n        msImeMode?: Property.ImeMode | undefined;\n        msScrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;\n        OAnimation?: Property.Animation<TTime> | undefined;\n        OAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n        OAnimationDirection?: Property.AnimationDirection | undefined;\n        OAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n        OAnimationFillMode?: Property.AnimationFillMode | undefined;\n        OAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n        OAnimationName?: Property.AnimationName | undefined;\n        OAnimationPlayState?: Property.AnimationPlayState | undefined;\n        OAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n        OBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n        OBorderImage?: Property.BorderImage | undefined;\n        OObjectFit?: Property.ObjectFit | undefined;\n        OObjectPosition?: Property.ObjectPosition<TLength> | undefined;\n        OTabSize?: Property.TabSize<TLength> | undefined;\n        OTextOverflow?: Property.TextOverflow | undefined;\n        OTransform?: Property.Transform | undefined;\n        OTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n        OTransition?: Property.Transition<TTime> | undefined;\n        OTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n        OTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n        OTransitionProperty?: Property.TransitionProperty | undefined;\n        OTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n        WebkitBoxAlign?: Property.BoxAlign | undefined;\n        WebkitBoxDirection?: Property.BoxDirection | undefined;\n        WebkitBoxFlex?: Property.BoxFlex | undefined;\n        WebkitBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n        WebkitBoxLines?: Property.BoxLines | undefined;\n        WebkitBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n        WebkitBoxOrient?: Property.BoxOrient | undefined;\n        WebkitBoxPack?: Property.BoxPack | undefined;\n        WebkitScrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;\n        WebkitScrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;\n    }\n    export interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n        alignmentBaseline?: Property.AlignmentBaseline | undefined;\n        baselineShift?: Property.BaselineShift<TLength> | undefined;\n        clip?: Property.Clip | undefined;\n        clipPath?: Property.ClipPath | undefined;\n        clipRule?: Property.ClipRule | undefined;\n        color?: Property.Color | undefined;\n        colorInterpolation?: Property.ColorInterpolation | undefined;\n        colorRendering?: Property.ColorRendering | undefined;\n        cursor?: Property.Cursor | undefined;\n        direction?: Property.Direction | undefined;\n        display?: Property.Display | undefined;\n        dominantBaseline?: Property.DominantBaseline | undefined;\n        fill?: Property.Fill | undefined;\n        fillOpacity?: Property.FillOpacity | undefined;\n        fillRule?: Property.FillRule | undefined;\n        filter?: Property.Filter | undefined;\n        floodColor?: Property.FloodColor | undefined;\n        floodOpacity?: Property.FloodOpacity | undefined;\n        font?: Property.Font | undefined;\n        fontFamily?: Property.FontFamily | undefined;\n        fontSize?: Property.FontSize<TLength> | undefined;\n        fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n        fontStretch?: Property.FontStretch | undefined;\n        fontStyle?: Property.FontStyle | undefined;\n        fontVariant?: Property.FontVariant | undefined;\n        fontWeight?: Property.FontWeight | undefined;\n        glyphOrientationVertical?: Property.GlyphOrientationVertical | undefined;\n        imageRendering?: Property.ImageRendering | undefined;\n        letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n        lightingColor?: Property.LightingColor | undefined;\n        lineHeight?: Property.LineHeight<TLength> | undefined;\n        marker?: Property.Marker | undefined;\n        markerEnd?: Property.MarkerEnd | undefined;\n        markerMid?: Property.MarkerMid | undefined;\n        markerStart?: Property.MarkerStart | undefined;\n        mask?: Property.Mask<TLength> | undefined;\n        opacity?: Property.Opacity | undefined;\n        overflow?: Property.Overflow | undefined;\n        paintOrder?: Property.PaintOrder | undefined;\n        pointerEvents?: Property.PointerEvents | undefined;\n        shapeRendering?: Property.ShapeRendering | undefined;\n        stopColor?: Property.StopColor | undefined;\n        stopOpacity?: Property.StopOpacity | undefined;\n        stroke?: Property.Stroke | undefined;\n        strokeDasharray?: Property.StrokeDasharray<TLength> | undefined;\n        strokeDashoffset?: Property.StrokeDashoffset<TLength> | undefined;\n        strokeLinecap?: Property.StrokeLinecap | undefined;\n        strokeLinejoin?: Property.StrokeLinejoin | undefined;\n        strokeMiterlimit?: Property.StrokeMiterlimit | undefined;\n        strokeOpacity?: Property.StrokeOpacity | undefined;\n        strokeWidth?: Property.StrokeWidth<TLength> | undefined;\n        textAnchor?: Property.TextAnchor | undefined;\n        textDecoration?: Property.TextDecoration<TLength> | undefined;\n        textRendering?: Property.TextRendering | undefined;\n        unicodeBidi?: Property.UnicodeBidi | undefined;\n        vectorEffect?: Property.VectorEffect | undefined;\n        visibility?: Property.Visibility | undefined;\n        whiteSpace?: Property.WhiteSpace | undefined;\n        wordSpacing?: Property.WordSpacing<TLength> | undefined;\n        writingMode?: Property.WritingMode | undefined;\n    }\n    export interface Properties<TLength = (string & {}) | 0, TTime = string & {}> extends StandardProperties<TLength, TTime>, VendorProperties<TLength, TTime>, ObsoleteProperties<TLength, TTime>, SvgProperties<TLength, TTime> {\n    }\n    export interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n        \"accent-color\"?: Property.AccentColor | undefined;\n        \"align-content\"?: Property.AlignContent | undefined;\n        \"align-items\"?: Property.AlignItems | undefined;\n        \"align-self\"?: Property.AlignSelf | undefined;\n        \"align-tracks\"?: Property.AlignTracks | undefined;\n        \"animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n        \"animation-direction\"?: Property.AnimationDirection | undefined;\n        \"animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n        \"animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n        \"animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n        \"animation-name\"?: Property.AnimationName | undefined;\n        \"animation-play-state\"?: Property.AnimationPlayState | undefined;\n        \"animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n        appearance?: Property.Appearance | undefined;\n        \"aspect-ratio\"?: Property.AspectRatio | undefined;\n        \"backdrop-filter\"?: Property.BackdropFilter | undefined;\n        \"backface-visibility\"?: Property.BackfaceVisibility | undefined;\n        \"background-attachment\"?: Property.BackgroundAttachment | undefined;\n        \"background-blend-mode\"?: Property.BackgroundBlendMode | undefined;\n        \"background-clip\"?: Property.BackgroundClip | undefined;\n        \"background-color\"?: Property.BackgroundColor | undefined;\n        \"background-image\"?: Property.BackgroundImage | undefined;\n        \"background-origin\"?: Property.BackgroundOrigin | undefined;\n        \"background-position-x\"?: Property.BackgroundPositionX<TLength> | undefined;\n        \"background-position-y\"?: Property.BackgroundPositionY<TLength> | undefined;\n        \"background-repeat\"?: Property.BackgroundRepeat | undefined;\n        \"background-size\"?: Property.BackgroundSize<TLength> | undefined;\n        \"block-overflow\"?: Property.BlockOverflow | undefined;\n        \"block-size\"?: Property.BlockSize<TLength> | undefined;\n        \"border-block-color\"?: Property.BorderBlockColor | undefined;\n        \"border-block-end-color\"?: Property.BorderBlockEndColor | undefined;\n        \"border-block-end-style\"?: Property.BorderBlockEndStyle | undefined;\n        \"border-block-end-width\"?: Property.BorderBlockEndWidth<TLength> | undefined;\n        \"border-block-start-color\"?: Property.BorderBlockStartColor | undefined;\n        \"border-block-start-style\"?: Property.BorderBlockStartStyle | undefined;\n        \"border-block-start-width\"?: Property.BorderBlockStartWidth<TLength> | undefined;\n        \"border-block-style\"?: Property.BorderBlockStyle | undefined;\n        \"border-block-width\"?: Property.BorderBlockWidth<TLength> | undefined;\n        \"border-bottom-color\"?: Property.BorderBottomColor | undefined;\n        \"border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n        \"border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n        \"border-bottom-style\"?: Property.BorderBottomStyle | undefined;\n        \"border-bottom-width\"?: Property.BorderBottomWidth<TLength> | undefined;\n        \"border-collapse\"?: Property.BorderCollapse | undefined;\n        \"border-end-end-radius\"?: Property.BorderEndEndRadius<TLength> | undefined;\n        \"border-end-start-radius\"?: Property.BorderEndStartRadius<TLength> | undefined;\n        \"border-image-outset\"?: Property.BorderImageOutset<TLength> | undefined;\n        \"border-image-repeat\"?: Property.BorderImageRepeat | undefined;\n        \"border-image-slice\"?: Property.BorderImageSlice | undefined;\n        \"border-image-source\"?: Property.BorderImageSource | undefined;\n        \"border-image-width\"?: Property.BorderImageWidth<TLength> | undefined;\n        \"border-inline-color\"?: Property.BorderInlineColor | undefined;\n        \"border-inline-end-color\"?: Property.BorderInlineEndColor | undefined;\n        \"border-inline-end-style\"?: Property.BorderInlineEndStyle | undefined;\n        \"border-inline-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n        \"border-inline-start-color\"?: Property.BorderInlineStartColor | undefined;\n        \"border-inline-start-style\"?: Property.BorderInlineStartStyle | undefined;\n        \"border-inline-start-width\"?: Property.BorderInlineStartWidth<TLength> | undefined;\n        \"border-inline-style\"?: Property.BorderInlineStyle | undefined;\n        \"border-inline-width\"?: Property.BorderInlineWidth<TLength> | undefined;\n        \"border-left-color\"?: Property.BorderLeftColor | undefined;\n        \"border-left-style\"?: Property.BorderLeftStyle | undefined;\n        \"border-left-width\"?: Property.BorderLeftWidth<TLength> | undefined;\n        \"border-right-color\"?: Property.BorderRightColor | undefined;\n        \"border-right-style\"?: Property.BorderRightStyle | undefined;\n        \"border-right-width\"?: Property.BorderRightWidth<TLength> | undefined;\n        \"border-spacing\"?: Property.BorderSpacing<TLength> | undefined;\n        \"border-start-end-radius\"?: Property.BorderStartEndRadius<TLength> | undefined;\n        \"border-start-start-radius\"?: Property.BorderStartStartRadius<TLength> | undefined;\n        \"border-top-color\"?: Property.BorderTopColor | undefined;\n        \"border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n        \"border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n        \"border-top-style\"?: Property.BorderTopStyle | undefined;\n        \"border-top-width\"?: Property.BorderTopWidth<TLength> | undefined;\n        bottom?: Property.Bottom<TLength> | undefined;\n        \"box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n        \"box-shadow\"?: Property.BoxShadow | undefined;\n        \"box-sizing\"?: Property.BoxSizing | undefined;\n        \"break-after\"?: Property.BreakAfter | undefined;\n        \"break-before\"?: Property.BreakBefore | undefined;\n        \"break-inside\"?: Property.BreakInside | undefined;\n        \"caption-side\"?: Property.CaptionSide | undefined;\n        \"caret-color\"?: Property.CaretColor | undefined;\n        clear?: Property.Clear | undefined;\n        \"clip-path\"?: Property.ClipPath | undefined;\n        color?: Property.Color | undefined;\n        \"color-adjust\"?: Property.ColorAdjust | undefined;\n        \"color-scheme\"?: Property.ColorScheme | undefined;\n        \"column-count\"?: Property.ColumnCount | undefined;\n        \"column-fill\"?: Property.ColumnFill | undefined;\n        \"column-gap\"?: Property.ColumnGap<TLength> | undefined;\n        \"column-rule-color\"?: Property.ColumnRuleColor | undefined;\n        \"column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n        \"column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n        \"column-span\"?: Property.ColumnSpan | undefined;\n        \"column-width\"?: Property.ColumnWidth<TLength> | undefined;\n        contain?: Property.Contain | undefined;\n        content?: Property.Content | undefined;\n        \"content-visibility\"?: Property.ContentVisibility | undefined;\n        \"counter-increment\"?: Property.CounterIncrement | undefined;\n        \"counter-reset\"?: Property.CounterReset | undefined;\n        \"counter-set\"?: Property.CounterSet | undefined;\n        cursor?: Property.Cursor | undefined;\n        direction?: Property.Direction | undefined;\n        display?: Property.Display | undefined;\n        \"empty-cells\"?: Property.EmptyCells | undefined;\n        filter?: Property.Filter | undefined;\n        \"flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n        \"flex-direction\"?: Property.FlexDirection | undefined;\n        \"flex-grow\"?: Property.FlexGrow | undefined;\n        \"flex-shrink\"?: Property.FlexShrink | undefined;\n        \"flex-wrap\"?: Property.FlexWrap | undefined;\n        float?: Property.Float | undefined;\n        \"font-family\"?: Property.FontFamily | undefined;\n        \"font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n        \"font-kerning\"?: Property.FontKerning | undefined;\n        \"font-language-override\"?: Property.FontLanguageOverride | undefined;\n        \"font-optical-sizing\"?: Property.FontOpticalSizing | undefined;\n        \"font-size\"?: Property.FontSize<TLength> | undefined;\n        \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n        \"font-smooth\"?: Property.FontSmooth<TLength> | undefined;\n        \"font-stretch\"?: Property.FontStretch | undefined;\n        \"font-style\"?: Property.FontStyle | undefined;\n        \"font-synthesis\"?: Property.FontSynthesis | undefined;\n        \"font-variant\"?: Property.FontVariant | undefined;\n        \"font-variant-caps\"?: Property.FontVariantCaps | undefined;\n        \"font-variant-east-asian\"?: Property.FontVariantEastAsian | undefined;\n        \"font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n        \"font-variant-numeric\"?: Property.FontVariantNumeric | undefined;\n        \"font-variant-position\"?: Property.FontVariantPosition | undefined;\n        \"font-variation-settings\"?: Property.FontVariationSettings | undefined;\n        \"font-weight\"?: Property.FontWeight | undefined;\n        \"forced-color-adjust\"?: Property.ForcedColorAdjust | undefined;\n        \"grid-auto-columns\"?: Property.GridAutoColumns<TLength> | undefined;\n        \"grid-auto-flow\"?: Property.GridAutoFlow | undefined;\n        \"grid-auto-rows\"?: Property.GridAutoRows<TLength> | undefined;\n        \"grid-column-end\"?: Property.GridColumnEnd | undefined;\n        \"grid-column-start\"?: Property.GridColumnStart | undefined;\n        \"grid-row-end\"?: Property.GridRowEnd | undefined;\n        \"grid-row-start\"?: Property.GridRowStart | undefined;\n        \"grid-template-areas\"?: Property.GridTemplateAreas | undefined;\n        \"grid-template-columns\"?: Property.GridTemplateColumns<TLength> | undefined;\n        \"grid-template-rows\"?: Property.GridTemplateRows<TLength> | undefined;\n        \"hanging-punctuation\"?: Property.HangingPunctuation | undefined;\n        height?: Property.Height<TLength> | undefined;\n        hyphens?: Property.Hyphens | undefined;\n        \"image-orientation\"?: Property.ImageOrientation | undefined;\n        \"image-rendering\"?: Property.ImageRendering | undefined;\n        \"image-resolution\"?: Property.ImageResolution | undefined;\n        \"initial-letter\"?: Property.InitialLetter | undefined;\n        \"inline-size\"?: Property.InlineSize<TLength> | undefined;\n        inset?: Property.Inset<TLength> | undefined;\n        \"inset-block\"?: Property.InsetBlock<TLength> | undefined;\n        \"inset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n        \"inset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n        \"inset-inline\"?: Property.InsetInline<TLength> | undefined;\n        \"inset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n        \"inset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n        isolation?: Property.Isolation | undefined;\n        \"justify-content\"?: Property.JustifyContent | undefined;\n        \"justify-items\"?: Property.JustifyItems | undefined;\n        \"justify-self\"?: Property.JustifySelf | undefined;\n        \"justify-tracks\"?: Property.JustifyTracks | undefined;\n        left?: Property.Left<TLength> | undefined;\n        \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n        \"line-break\"?: Property.LineBreak | undefined;\n        \"line-height\"?: Property.LineHeight<TLength> | undefined;\n        \"line-height-step\"?: Property.LineHeightStep<TLength> | undefined;\n        \"list-style-image\"?: Property.ListStyleImage | undefined;\n        \"list-style-position\"?: Property.ListStylePosition | undefined;\n        \"list-style-type\"?: Property.ListStyleType | undefined;\n        \"margin-block\"?: Property.MarginBlock<TLength> | undefined;\n        \"margin-block-end\"?: Property.MarginBlockEnd<TLength> | undefined;\n        \"margin-block-start\"?: Property.MarginBlockStart<TLength> | undefined;\n        \"margin-bottom\"?: Property.MarginBottom<TLength> | undefined;\n        \"margin-inline\"?: Property.MarginInline<TLength> | undefined;\n        \"margin-inline-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n        \"margin-inline-start\"?: Property.MarginInlineStart<TLength> | undefined;\n        \"margin-left\"?: Property.MarginLeft<TLength> | undefined;\n        \"margin-right\"?: Property.MarginRight<TLength> | undefined;\n        \"margin-top\"?: Property.MarginTop<TLength> | undefined;\n        \"mask-border-mode\"?: Property.MaskBorderMode | undefined;\n        \"mask-border-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n        \"mask-border-repeat\"?: Property.MaskBorderRepeat | undefined;\n        \"mask-border-slice\"?: Property.MaskBorderSlice | undefined;\n        \"mask-border-source\"?: Property.MaskBorderSource | undefined;\n        \"mask-border-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n        \"mask-clip\"?: Property.MaskClip | undefined;\n        \"mask-composite\"?: Property.MaskComposite | undefined;\n        \"mask-image\"?: Property.MaskImage | undefined;\n        \"mask-mode\"?: Property.MaskMode | undefined;\n        \"mask-origin\"?: Property.MaskOrigin | undefined;\n        \"mask-position\"?: Property.MaskPosition<TLength> | undefined;\n        \"mask-repeat\"?: Property.MaskRepeat | undefined;\n        \"mask-size\"?: Property.MaskSize<TLength> | undefined;\n        \"mask-type\"?: Property.MaskType | undefined;\n        \"math-style\"?: Property.MathStyle | undefined;\n        \"max-block-size\"?: Property.MaxBlockSize<TLength> | undefined;\n        \"max-height\"?: Property.MaxHeight<TLength> | undefined;\n        \"max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n        \"max-lines\"?: Property.MaxLines | undefined;\n        \"max-width\"?: Property.MaxWidth<TLength> | undefined;\n        \"min-block-size\"?: Property.MinBlockSize<TLength> | undefined;\n        \"min-height\"?: Property.MinHeight<TLength> | undefined;\n        \"min-inline-size\"?: Property.MinInlineSize<TLength> | undefined;\n        \"min-width\"?: Property.MinWidth<TLength> | undefined;\n        \"mix-blend-mode\"?: Property.MixBlendMode | undefined;\n        \"motion-distance\"?: Property.OffsetDistance<TLength> | undefined;\n        \"motion-path\"?: Property.OffsetPath | undefined;\n        \"motion-rotation\"?: Property.OffsetRotate | undefined;\n        \"object-fit\"?: Property.ObjectFit | undefined;\n        \"object-position\"?: Property.ObjectPosition<TLength> | undefined;\n        \"offset-anchor\"?: Property.OffsetAnchor<TLength> | undefined;\n        \"offset-distance\"?: Property.OffsetDistance<TLength> | undefined;\n        \"offset-path\"?: Property.OffsetPath | undefined;\n        \"offset-rotate\"?: Property.OffsetRotate | undefined;\n        \"offset-rotation\"?: Property.OffsetRotate | undefined;\n        opacity?: Property.Opacity | undefined;\n        order?: Property.Order | undefined;\n        orphans?: Property.Orphans | undefined;\n        \"outline-color\"?: Property.OutlineColor | undefined;\n        \"outline-offset\"?: Property.OutlineOffset<TLength> | undefined;\n        \"outline-style\"?: Property.OutlineStyle | undefined;\n        \"outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n        \"overflow-anchor\"?: Property.OverflowAnchor | undefined;\n        \"overflow-block\"?: Property.OverflowBlock | undefined;\n        \"overflow-clip-box\"?: Property.OverflowClipBox | undefined;\n        \"overflow-clip-margin\"?: Property.OverflowClipMargin<TLength> | undefined;\n        \"overflow-inline\"?: Property.OverflowInline | undefined;\n        \"overflow-wrap\"?: Property.OverflowWrap | undefined;\n        \"overflow-x\"?: Property.OverflowX | undefined;\n        \"overflow-y\"?: Property.OverflowY | undefined;\n        \"overscroll-behavior-block\"?: Property.OverscrollBehaviorBlock | undefined;\n        \"overscroll-behavior-inline\"?: Property.OverscrollBehaviorInline | undefined;\n        \"overscroll-behavior-x\"?: Property.OverscrollBehaviorX | undefined;\n        \"overscroll-behavior-y\"?: Property.OverscrollBehaviorY | undefined;\n        \"padding-block\"?: Property.PaddingBlock<TLength> | undefined;\n        \"padding-block-end\"?: Property.PaddingBlockEnd<TLength> | undefined;\n        \"padding-block-start\"?: Property.PaddingBlockStart<TLength> | undefined;\n        \"padding-bottom\"?: Property.PaddingBottom<TLength> | undefined;\n        \"padding-inline\"?: Property.PaddingInline<TLength> | undefined;\n        \"padding-inline-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n        \"padding-inline-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n        \"padding-left\"?: Property.PaddingLeft<TLength> | undefined;\n        \"padding-right\"?: Property.PaddingRight<TLength> | undefined;\n        \"padding-top\"?: Property.PaddingTop<TLength> | undefined;\n        \"page-break-after\"?: Property.PageBreakAfter | undefined;\n        \"page-break-before\"?: Property.PageBreakBefore | undefined;\n        \"page-break-inside\"?: Property.PageBreakInside | undefined;\n        \"paint-order\"?: Property.PaintOrder | undefined;\n        perspective?: Property.Perspective<TLength> | undefined;\n        \"perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n        \"place-content\"?: Property.PlaceContent | undefined;\n        \"pointer-events\"?: Property.PointerEvents | undefined;\n        position?: Property.Position | undefined;\n        quotes?: Property.Quotes | undefined;\n        resize?: Property.Resize | undefined;\n        right?: Property.Right<TLength> | undefined;\n        rotate?: Property.Rotate | undefined;\n        \"row-gap\"?: Property.RowGap<TLength> | undefined;\n        \"ruby-align\"?: Property.RubyAlign | undefined;\n        \"ruby-merge\"?: Property.RubyMerge | undefined;\n        \"ruby-position\"?: Property.RubyPosition | undefined;\n        scale?: Property.Scale | undefined;\n        \"scroll-behavior\"?: Property.ScrollBehavior | undefined;\n        \"scroll-margin\"?: Property.ScrollMargin<TLength> | undefined;\n        \"scroll-margin-block\"?: Property.ScrollMarginBlock<TLength> | undefined;\n        \"scroll-margin-block-end\"?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n        \"scroll-margin-block-start\"?: Property.ScrollMarginBlockStart<TLength> | undefined;\n        \"scroll-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n        \"scroll-margin-inline\"?: Property.ScrollMarginInline<TLength> | undefined;\n        \"scroll-margin-inline-end\"?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n        \"scroll-margin-inline-start\"?: Property.ScrollMarginInlineStart<TLength> | undefined;\n        \"scroll-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n        \"scroll-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n        \"scroll-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n        \"scroll-padding\"?: Property.ScrollPadding<TLength> | undefined;\n        \"scroll-padding-block\"?: Property.ScrollPaddingBlock<TLength> | undefined;\n        \"scroll-padding-block-end\"?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n        \"scroll-padding-block-start\"?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n        \"scroll-padding-bottom\"?: Property.ScrollPaddingBottom<TLength> | undefined;\n        \"scroll-padding-inline\"?: Property.ScrollPaddingInline<TLength> | undefined;\n        \"scroll-padding-inline-end\"?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n        \"scroll-padding-inline-start\"?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n        \"scroll-padding-left\"?: Property.ScrollPaddingLeft<TLength> | undefined;\n        \"scroll-padding-right\"?: Property.ScrollPaddingRight<TLength> | undefined;\n        \"scroll-padding-top\"?: Property.ScrollPaddingTop<TLength> | undefined;\n        \"scroll-snap-align\"?: Property.ScrollSnapAlign | undefined;\n        \"scroll-snap-margin\"?: Property.ScrollMargin<TLength> | undefined;\n        \"scroll-snap-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n        \"scroll-snap-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n        \"scroll-snap-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n        \"scroll-snap-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n        \"scroll-snap-stop\"?: Property.ScrollSnapStop | undefined;\n        \"scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n        \"scrollbar-color\"?: Property.ScrollbarColor | undefined;\n        \"scrollbar-gutter\"?: Property.ScrollbarGutter | undefined;\n        \"scrollbar-width\"?: Property.ScrollbarWidth | undefined;\n        \"shape-image-threshold\"?: Property.ShapeImageThreshold | undefined;\n        \"shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n        \"shape-outside\"?: Property.ShapeOutside | undefined;\n        \"tab-size\"?: Property.TabSize<TLength> | undefined;\n        \"table-layout\"?: Property.TableLayout | undefined;\n        \"text-align\"?: Property.TextAlign | undefined;\n        \"text-align-last\"?: Property.TextAlignLast | undefined;\n        \"text-combine-upright\"?: Property.TextCombineUpright | undefined;\n        \"text-decoration-color\"?: Property.TextDecorationColor | undefined;\n        \"text-decoration-line\"?: Property.TextDecorationLine | undefined;\n        \"text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n        \"text-decoration-skip-ink\"?: Property.TextDecorationSkipInk | undefined;\n        \"text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n        \"text-decoration-thickness\"?: Property.TextDecorationThickness<TLength> | undefined;\n        \"text-decoration-width\"?: Property.TextDecorationThickness<TLength> | undefined;\n        \"text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n        \"text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n        \"text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n        \"text-indent\"?: Property.TextIndent<TLength> | undefined;\n        \"text-justify\"?: Property.TextJustify | undefined;\n        \"text-orientation\"?: Property.TextOrientation | undefined;\n        \"text-overflow\"?: Property.TextOverflow | undefined;\n        \"text-rendering\"?: Property.TextRendering | undefined;\n        \"text-shadow\"?: Property.TextShadow | undefined;\n        \"text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n        \"text-transform\"?: Property.TextTransform | undefined;\n        \"text-underline-offset\"?: Property.TextUnderlineOffset<TLength> | undefined;\n        \"text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n        top?: Property.Top<TLength> | undefined;\n        \"touch-action\"?: Property.TouchAction | undefined;\n        transform?: Property.Transform | undefined;\n        \"transform-box\"?: Property.TransformBox | undefined;\n        \"transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n        \"transform-style\"?: Property.TransformStyle | undefined;\n        \"transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n        \"transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n        \"transition-property\"?: Property.TransitionProperty | undefined;\n        \"transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n        translate?: Property.Translate<TLength> | undefined;\n        \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n        \"user-select\"?: Property.UserSelect | undefined;\n        \"vertical-align\"?: Property.VerticalAlign<TLength> | undefined;\n        visibility?: Property.Visibility | undefined;\n        \"white-space\"?: Property.WhiteSpace | undefined;\n        widows?: Property.Widows | undefined;\n        width?: Property.Width<TLength> | undefined;\n        \"will-change\"?: Property.WillChange | undefined;\n        \"word-break\"?: Property.WordBreak | undefined;\n        \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n        \"word-wrap\"?: Property.WordWrap | undefined;\n        \"writing-mode\"?: Property.WritingMode | undefined;\n        \"z-index\"?: Property.ZIndex | undefined;\n        zoom?: Property.Zoom | undefined;\n    }\n    export interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n        all?: Property.All | undefined;\n        animation?: Property.Animation<TTime> | undefined;\n        background?: Property.Background<TLength> | undefined;\n        \"background-position\"?: Property.BackgroundPosition<TLength> | undefined;\n        border?: Property.Border<TLength> | undefined;\n        \"border-block\"?: Property.BorderBlock<TLength> | undefined;\n        \"border-block-end\"?: Property.BorderBlockEnd<TLength> | undefined;\n        \"border-block-start\"?: Property.BorderBlockStart<TLength> | undefined;\n        \"border-bottom\"?: Property.BorderBottom<TLength> | undefined;\n        \"border-color\"?: Property.BorderColor | undefined;\n        \"border-image\"?: Property.BorderImage | undefined;\n        \"border-inline\"?: Property.BorderInline<TLength> | undefined;\n        \"border-inline-end\"?: Property.BorderInlineEnd<TLength> | undefined;\n        \"border-inline-start\"?: Property.BorderInlineStart<TLength> | undefined;\n        \"border-left\"?: Property.BorderLeft<TLength> | undefined;\n        \"border-radius\"?: Property.BorderRadius<TLength> | undefined;\n        \"border-right\"?: Property.BorderRight<TLength> | undefined;\n        \"border-style\"?: Property.BorderStyle | undefined;\n        \"border-top\"?: Property.BorderTop<TLength> | undefined;\n        \"border-width\"?: Property.BorderWidth<TLength> | undefined;\n        \"column-rule\"?: Property.ColumnRule<TLength> | undefined;\n        columns?: Property.Columns<TLength> | undefined;\n        flex?: Property.Flex<TLength> | undefined;\n        \"flex-flow\"?: Property.FlexFlow | undefined;\n        font?: Property.Font | undefined;\n        gap?: Property.Gap<TLength> | undefined;\n        grid?: Property.Grid | undefined;\n        \"grid-area\"?: Property.GridArea | undefined;\n        \"grid-column\"?: Property.GridColumn | undefined;\n        \"grid-row\"?: Property.GridRow | undefined;\n        \"grid-template\"?: Property.GridTemplate | undefined;\n        \"line-clamp\"?: Property.LineClamp | undefined;\n        \"list-style\"?: Property.ListStyle | undefined;\n        margin?: Property.Margin<TLength> | undefined;\n        mask?: Property.Mask<TLength> | undefined;\n        \"mask-border\"?: Property.MaskBorder | undefined;\n        motion?: Property.Offset<TLength> | undefined;\n        offset?: Property.Offset<TLength> | undefined;\n        outline?: Property.Outline<TLength> | undefined;\n        overflow?: Property.Overflow | undefined;\n        \"overscroll-behavior\"?: Property.OverscrollBehavior | undefined;\n        padding?: Property.Padding<TLength> | undefined;\n        \"place-items\"?: Property.PlaceItems | undefined;\n        \"place-self\"?: Property.PlaceSelf | undefined;\n        \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n        \"text-emphasis\"?: Property.TextEmphasis | undefined;\n        transition?: Property.Transition<TTime> | undefined;\n    }\n    export interface StandardPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandPropertiesHyphen<TLength, TTime>, StandardShorthandPropertiesHyphen<TLength, TTime> {\n    }\n    export interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n        \"-moz-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n        \"-moz-animation-direction\"?: Property.AnimationDirection | undefined;\n        \"-moz-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n        \"-moz-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n        \"-moz-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n        \"-moz-animation-name\"?: Property.AnimationName | undefined;\n        \"-moz-animation-play-state\"?: Property.AnimationPlayState | undefined;\n        \"-moz-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n        \"-moz-appearance\"?: Property.MozAppearance | undefined;\n        \"-moz-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n        \"-moz-border-bottom-colors\"?: Property.MozBorderBottomColors | undefined;\n        \"-moz-border-end-color\"?: Property.BorderInlineEndColor | undefined;\n        \"-moz-border-end-style\"?: Property.BorderInlineEndStyle | undefined;\n        \"-moz-border-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n        \"-moz-border-left-colors\"?: Property.MozBorderLeftColors | undefined;\n        \"-moz-border-right-colors\"?: Property.MozBorderRightColors | undefined;\n        \"-moz-border-start-color\"?: Property.BorderInlineStartColor | undefined;\n        \"-moz-border-start-style\"?: Property.BorderInlineStartStyle | undefined;\n        \"-moz-border-top-colors\"?: Property.MozBorderTopColors | undefined;\n        \"-moz-box-sizing\"?: Property.BoxSizing | undefined;\n        \"-moz-column-count\"?: Property.ColumnCount | undefined;\n        \"-moz-column-fill\"?: Property.ColumnFill | undefined;\n        \"-moz-column-gap\"?: Property.ColumnGap<TLength> | undefined;\n        \"-moz-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n        \"-moz-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n        \"-moz-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n        \"-moz-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n        \"-moz-context-properties\"?: Property.MozContextProperties | undefined;\n        \"-moz-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n        \"-moz-font-language-override\"?: Property.FontLanguageOverride | undefined;\n        \"-moz-hyphens\"?: Property.Hyphens | undefined;\n        \"-moz-image-region\"?: Property.MozImageRegion | undefined;\n        \"-moz-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n        \"-moz-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n        \"-moz-orient\"?: Property.MozOrient | undefined;\n        \"-moz-osx-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n        \"-moz-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n        \"-moz-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n        \"-moz-perspective\"?: Property.Perspective<TLength> | undefined;\n        \"-moz-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n        \"-moz-stack-sizing\"?: Property.MozStackSizing | undefined;\n        \"-moz-tab-size\"?: Property.TabSize<TLength> | undefined;\n        \"-moz-text-blink\"?: Property.MozTextBlink | undefined;\n        \"-moz-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n        \"-moz-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n        \"-moz-transform-style\"?: Property.TransformStyle | undefined;\n        \"-moz-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n        \"-moz-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n        \"-moz-transition-property\"?: Property.TransitionProperty | undefined;\n        \"-moz-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n        \"-moz-user-focus\"?: Property.MozUserFocus | undefined;\n        \"-moz-user-modify\"?: Property.MozUserModify | undefined;\n        \"-moz-user-select\"?: Property.UserSelect | undefined;\n        \"-moz-window-dragging\"?: Property.MozWindowDragging | undefined;\n        \"-moz-window-shadow\"?: Property.MozWindowShadow | undefined;\n        \"-ms-accelerator\"?: Property.MsAccelerator | undefined;\n        \"-ms-align-self\"?: Property.AlignSelf | undefined;\n        \"-ms-block-progression\"?: Property.MsBlockProgression | undefined;\n        \"-ms-content-zoom-chaining\"?: Property.MsContentZoomChaining | undefined;\n        \"-ms-content-zoom-limit-max\"?: Property.MsContentZoomLimitMax | undefined;\n        \"-ms-content-zoom-limit-min\"?: Property.MsContentZoomLimitMin | undefined;\n        \"-ms-content-zoom-snap-points\"?: Property.MsContentZoomSnapPoints | undefined;\n        \"-ms-content-zoom-snap-type\"?: Property.MsContentZoomSnapType | undefined;\n        \"-ms-content-zooming\"?: Property.MsContentZooming | undefined;\n        \"-ms-filter\"?: Property.MsFilter | undefined;\n        \"-ms-flex-direction\"?: Property.FlexDirection | undefined;\n        \"-ms-flex-positive\"?: Property.FlexGrow | undefined;\n        \"-ms-flow-from\"?: Property.MsFlowFrom | undefined;\n        \"-ms-flow-into\"?: Property.MsFlowInto | undefined;\n        \"-ms-grid-columns\"?: Property.MsGridColumns<TLength> | undefined;\n        \"-ms-grid-rows\"?: Property.MsGridRows<TLength> | undefined;\n        \"-ms-high-contrast-adjust\"?: Property.MsHighContrastAdjust | undefined;\n        \"-ms-hyphenate-limit-chars\"?: Property.MsHyphenateLimitChars | undefined;\n        \"-ms-hyphenate-limit-lines\"?: Property.MsHyphenateLimitLines | undefined;\n        \"-ms-hyphenate-limit-zone\"?: Property.MsHyphenateLimitZone<TLength> | undefined;\n        \"-ms-hyphens\"?: Property.Hyphens | undefined;\n        \"-ms-ime-align\"?: Property.MsImeAlign | undefined;\n        \"-ms-justify-self\"?: Property.JustifySelf | undefined;\n        \"-ms-line-break\"?: Property.LineBreak | undefined;\n        \"-ms-order\"?: Property.Order | undefined;\n        \"-ms-overflow-style\"?: Property.MsOverflowStyle | undefined;\n        \"-ms-overflow-x\"?: Property.OverflowX | undefined;\n        \"-ms-overflow-y\"?: Property.OverflowY | undefined;\n        \"-ms-scroll-chaining\"?: Property.MsScrollChaining | undefined;\n        \"-ms-scroll-limit-x-max\"?: Property.MsScrollLimitXMax<TLength> | undefined;\n        \"-ms-scroll-limit-x-min\"?: Property.MsScrollLimitXMin<TLength> | undefined;\n        \"-ms-scroll-limit-y-max\"?: Property.MsScrollLimitYMax<TLength> | undefined;\n        \"-ms-scroll-limit-y-min\"?: Property.MsScrollLimitYMin<TLength> | undefined;\n        \"-ms-scroll-rails\"?: Property.MsScrollRails | undefined;\n        \"-ms-scroll-snap-points-x\"?: Property.MsScrollSnapPointsX | undefined;\n        \"-ms-scroll-snap-points-y\"?: Property.MsScrollSnapPointsY | undefined;\n        \"-ms-scroll-snap-type\"?: Property.MsScrollSnapType | undefined;\n        \"-ms-scroll-translation\"?: Property.MsScrollTranslation | undefined;\n        \"-ms-scrollbar-3dlight-color\"?: Property.MsScrollbar3dlightColor | undefined;\n        \"-ms-scrollbar-arrow-color\"?: Property.MsScrollbarArrowColor | undefined;\n        \"-ms-scrollbar-base-color\"?: Property.MsScrollbarBaseColor | undefined;\n        \"-ms-scrollbar-darkshadow-color\"?: Property.MsScrollbarDarkshadowColor | undefined;\n        \"-ms-scrollbar-face-color\"?: Property.MsScrollbarFaceColor | undefined;\n        \"-ms-scrollbar-highlight-color\"?: Property.MsScrollbarHighlightColor | undefined;\n        \"-ms-scrollbar-shadow-color\"?: Property.MsScrollbarShadowColor | undefined;\n        \"-ms-text-autospace\"?: Property.MsTextAutospace | undefined;\n        \"-ms-text-combine-horizontal\"?: Property.TextCombineUpright | undefined;\n        \"-ms-text-overflow\"?: Property.TextOverflow | undefined;\n        \"-ms-touch-action\"?: Property.TouchAction | undefined;\n        \"-ms-touch-select\"?: Property.MsTouchSelect | undefined;\n        \"-ms-transform\"?: Property.Transform | undefined;\n        \"-ms-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n        \"-ms-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n        \"-ms-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n        \"-ms-transition-property\"?: Property.TransitionProperty | undefined;\n        \"-ms-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n        \"-ms-user-select\"?: Property.MsUserSelect | undefined;\n        \"-ms-word-break\"?: Property.WordBreak | undefined;\n        \"-ms-wrap-flow\"?: Property.MsWrapFlow | undefined;\n        \"-ms-wrap-margin\"?: Property.MsWrapMargin<TLength> | undefined;\n        \"-ms-wrap-through\"?: Property.MsWrapThrough | undefined;\n        \"-ms-writing-mode\"?: Property.WritingMode | undefined;\n        \"-webkit-align-content\"?: Property.AlignContent | undefined;\n        \"-webkit-align-items\"?: Property.AlignItems | undefined;\n        \"-webkit-align-self\"?: Property.AlignSelf | undefined;\n        \"-webkit-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n        \"-webkit-animation-direction\"?: Property.AnimationDirection | undefined;\n        \"-webkit-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n        \"-webkit-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n        \"-webkit-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n        \"-webkit-animation-name\"?: Property.AnimationName | undefined;\n        \"-webkit-animation-play-state\"?: Property.AnimationPlayState | undefined;\n        \"-webkit-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n        \"-webkit-appearance\"?: Property.WebkitAppearance | undefined;\n        \"-webkit-backdrop-filter\"?: Property.BackdropFilter | undefined;\n        \"-webkit-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n        \"-webkit-background-clip\"?: Property.BackgroundClip | undefined;\n        \"-webkit-background-origin\"?: Property.BackgroundOrigin | undefined;\n        \"-webkit-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n        \"-webkit-border-before-color\"?: Property.WebkitBorderBeforeColor | undefined;\n        \"-webkit-border-before-style\"?: Property.WebkitBorderBeforeStyle | undefined;\n        \"-webkit-border-before-width\"?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n        \"-webkit-border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n        \"-webkit-border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n        \"-webkit-border-image-slice\"?: Property.BorderImageSlice | undefined;\n        \"-webkit-border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n        \"-webkit-border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n        \"-webkit-box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n        \"-webkit-box-reflect\"?: Property.WebkitBoxReflect<TLength> | undefined;\n        \"-webkit-box-shadow\"?: Property.BoxShadow | undefined;\n        \"-webkit-box-sizing\"?: Property.BoxSizing | undefined;\n        \"-webkit-clip-path\"?: Property.ClipPath | undefined;\n        \"-webkit-column-count\"?: Property.ColumnCount | undefined;\n        \"-webkit-column-fill\"?: Property.ColumnFill | undefined;\n        \"-webkit-column-gap\"?: Property.ColumnGap<TLength> | undefined;\n        \"-webkit-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n        \"-webkit-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n        \"-webkit-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n        \"-webkit-column-span\"?: Property.ColumnSpan | undefined;\n        \"-webkit-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n        \"-webkit-filter\"?: Property.Filter | undefined;\n        \"-webkit-flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n        \"-webkit-flex-direction\"?: Property.FlexDirection | undefined;\n        \"-webkit-flex-grow\"?: Property.FlexGrow | undefined;\n        \"-webkit-flex-shrink\"?: Property.FlexShrink | undefined;\n        \"-webkit-flex-wrap\"?: Property.FlexWrap | undefined;\n        \"-webkit-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n        \"-webkit-font-kerning\"?: Property.FontKerning | undefined;\n        \"-webkit-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n        \"-webkit-font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n        \"-webkit-hyphens\"?: Property.Hyphens | undefined;\n        \"-webkit-initial-letter\"?: Property.InitialLetter | undefined;\n        \"-webkit-justify-content\"?: Property.JustifyContent | undefined;\n        \"-webkit-line-break\"?: Property.LineBreak | undefined;\n        \"-webkit-line-clamp\"?: Property.WebkitLineClamp | undefined;\n        \"-webkit-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n        \"-webkit-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n        \"-webkit-mask-attachment\"?: Property.WebkitMaskAttachment | undefined;\n        \"-webkit-mask-box-image-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n        \"-webkit-mask-box-image-repeat\"?: Property.MaskBorderRepeat | undefined;\n        \"-webkit-mask-box-image-slice\"?: Property.MaskBorderSlice | undefined;\n        \"-webkit-mask-box-image-source\"?: Property.MaskBorderSource | undefined;\n        \"-webkit-mask-box-image-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n        \"-webkit-mask-clip\"?: Property.WebkitMaskClip | undefined;\n        \"-webkit-mask-composite\"?: Property.WebkitMaskComposite | undefined;\n        \"-webkit-mask-image\"?: Property.WebkitMaskImage | undefined;\n        \"-webkit-mask-origin\"?: Property.WebkitMaskOrigin | undefined;\n        \"-webkit-mask-position\"?: Property.WebkitMaskPosition<TLength> | undefined;\n        \"-webkit-mask-position-x\"?: Property.WebkitMaskPositionX<TLength> | undefined;\n        \"-webkit-mask-position-y\"?: Property.WebkitMaskPositionY<TLength> | undefined;\n        \"-webkit-mask-repeat\"?: Property.WebkitMaskRepeat | undefined;\n        \"-webkit-mask-repeat-x\"?: Property.WebkitMaskRepeatX | undefined;\n        \"-webkit-mask-repeat-y\"?: Property.WebkitMaskRepeatY | undefined;\n        \"-webkit-mask-size\"?: Property.WebkitMaskSize<TLength> | undefined;\n        \"-webkit-max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n        \"-webkit-order\"?: Property.Order | undefined;\n        \"-webkit-overflow-scrolling\"?: Property.WebkitOverflowScrolling | undefined;\n        \"-webkit-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n        \"-webkit-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n        \"-webkit-perspective\"?: Property.Perspective<TLength> | undefined;\n        \"-webkit-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n        \"-webkit-print-color-adjust\"?: Property.ColorAdjust | undefined;\n        \"-webkit-ruby-position\"?: Property.RubyPosition | undefined;\n        \"-webkit-scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n        \"-webkit-shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n        \"-webkit-tap-highlight-color\"?: Property.WebkitTapHighlightColor | undefined;\n        \"-webkit-text-combine\"?: Property.TextCombineUpright | undefined;\n        \"-webkit-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n        \"-webkit-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n        \"-webkit-text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n        \"-webkit-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n        \"-webkit-text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n        \"-webkit-text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n        \"-webkit-text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n        \"-webkit-text-fill-color\"?: Property.WebkitTextFillColor | undefined;\n        \"-webkit-text-orientation\"?: Property.TextOrientation | undefined;\n        \"-webkit-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n        \"-webkit-text-stroke-color\"?: Property.WebkitTextStrokeColor | undefined;\n        \"-webkit-text-stroke-width\"?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n        \"-webkit-text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n        \"-webkit-touch-callout\"?: Property.WebkitTouchCallout | undefined;\n        \"-webkit-transform\"?: Property.Transform | undefined;\n        \"-webkit-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n        \"-webkit-transform-style\"?: Property.TransformStyle | undefined;\n        \"-webkit-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n        \"-webkit-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n        \"-webkit-transition-property\"?: Property.TransitionProperty | undefined;\n        \"-webkit-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n        \"-webkit-user-modify\"?: Property.WebkitUserModify | undefined;\n        \"-webkit-user-select\"?: Property.UserSelect | undefined;\n        \"-webkit-writing-mode\"?: Property.WritingMode | undefined;\n    }\n    export interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n        \"-moz-animation\"?: Property.Animation<TTime> | undefined;\n        \"-moz-border-image\"?: Property.BorderImage | undefined;\n        \"-moz-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n        \"-moz-columns\"?: Property.Columns<TLength> | undefined;\n        \"-moz-transition\"?: Property.Transition<TTime> | undefined;\n        \"-ms-content-zoom-limit\"?: Property.MsContentZoomLimit | undefined;\n        \"-ms-content-zoom-snap\"?: Property.MsContentZoomSnap | undefined;\n        \"-ms-flex\"?: Property.Flex<TLength> | undefined;\n        \"-ms-scroll-limit\"?: Property.MsScrollLimit | undefined;\n        \"-ms-scroll-snap-x\"?: Property.MsScrollSnapX | undefined;\n        \"-ms-scroll-snap-y\"?: Property.MsScrollSnapY | undefined;\n        \"-ms-transition\"?: Property.Transition<TTime> | undefined;\n        \"-webkit-animation\"?: Property.Animation<TTime> | undefined;\n        \"-webkit-border-before\"?: Property.WebkitBorderBefore<TLength> | undefined;\n        \"-webkit-border-image\"?: Property.BorderImage | undefined;\n        \"-webkit-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n        \"-webkit-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n        \"-webkit-columns\"?: Property.Columns<TLength> | undefined;\n        \"-webkit-flex\"?: Property.Flex<TLength> | undefined;\n        \"-webkit-flex-flow\"?: Property.FlexFlow | undefined;\n        \"-webkit-mask\"?: Property.WebkitMask<TLength> | undefined;\n        \"-webkit-mask-box-image\"?: Property.MaskBorder | undefined;\n        \"-webkit-text-emphasis\"?: Property.TextEmphasis | undefined;\n        \"-webkit-text-stroke\"?: Property.WebkitTextStroke<TLength> | undefined;\n        \"-webkit-transition\"?: Property.Transition<TTime> | undefined;\n    }\n    export interface VendorPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandPropertiesHyphen<TLength, TTime>, VendorShorthandPropertiesHyphen<TLength, TTime> {\n    }\n    export interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n        azimuth?: Property.Azimuth | undefined;\n        \"box-align\"?: Property.BoxAlign | undefined;\n        \"box-direction\"?: Property.BoxDirection | undefined;\n        \"box-flex\"?: Property.BoxFlex | undefined;\n        \"box-flex-group\"?: Property.BoxFlexGroup | undefined;\n        \"box-lines\"?: Property.BoxLines | undefined;\n        \"box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n        \"box-orient\"?: Property.BoxOrient | undefined;\n        \"box-pack\"?: Property.BoxPack | undefined;\n        clip?: Property.Clip | undefined;\n        \"font-variant-alternates\"?: Property.FontVariantAlternates | undefined;\n        \"grid-column-gap\"?: Property.GridColumnGap<TLength> | undefined;\n        \"grid-gap\"?: Property.GridGap<TLength> | undefined;\n        \"grid-row-gap\"?: Property.GridRowGap<TLength> | undefined;\n        \"ime-mode\"?: Property.ImeMode | undefined;\n        \"offset-block\"?: Property.InsetBlock<TLength> | undefined;\n        \"offset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n        \"offset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n        \"offset-inline\"?: Property.InsetInline<TLength> | undefined;\n        \"offset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n        \"offset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n        \"scroll-snap-coordinate\"?: Property.ScrollSnapCoordinate<TLength> | undefined;\n        \"scroll-snap-destination\"?: Property.ScrollSnapDestination<TLength> | undefined;\n        \"scroll-snap-points-x\"?: Property.ScrollSnapPointsX | undefined;\n        \"scroll-snap-points-y\"?: Property.ScrollSnapPointsY | undefined;\n        \"scroll-snap-type-x\"?: Property.ScrollSnapTypeX | undefined;\n        \"scroll-snap-type-y\"?: Property.ScrollSnapTypeY | undefined;\n        \"scrollbar-track-color\"?: Property.MsScrollbarTrackColor | undefined;\n        \"-khtml-box-align\"?: Property.BoxAlign | undefined;\n        \"-khtml-box-direction\"?: Property.BoxDirection | undefined;\n        \"-khtml-box-flex\"?: Property.BoxFlex | undefined;\n        \"-khtml-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n        \"-khtml-box-lines\"?: Property.BoxLines | undefined;\n        \"-khtml-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n        \"-khtml-box-orient\"?: Property.BoxOrient | undefined;\n        \"-khtml-box-pack\"?: Property.BoxPack | undefined;\n        \"-khtml-line-break\"?: Property.LineBreak | undefined;\n        \"-khtml-opacity\"?: Property.Opacity | undefined;\n        \"-khtml-user-select\"?: Property.UserSelect | undefined;\n        \"-moz-background-clip\"?: Property.BackgroundClip | undefined;\n        \"-moz-background-inline-policy\"?: Property.BoxDecorationBreak | undefined;\n        \"-moz-background-origin\"?: Property.BackgroundOrigin | undefined;\n        \"-moz-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n        \"-moz-binding\"?: Property.MozBinding | undefined;\n        \"-moz-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n        \"-moz-border-radius-bottomleft\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n        \"-moz-border-radius-bottomright\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n        \"-moz-border-radius-topleft\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n        \"-moz-border-radius-topright\"?: Property.BorderTopRightRadius<TLength> | undefined;\n        \"-moz-box-align\"?: Property.BoxAlign | undefined;\n        \"-moz-box-direction\"?: Property.BoxDirection | undefined;\n        \"-moz-box-flex\"?: Property.BoxFlex | undefined;\n        \"-moz-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n        \"-moz-box-orient\"?: Property.BoxOrient | undefined;\n        \"-moz-box-pack\"?: Property.BoxPack | undefined;\n        \"-moz-box-shadow\"?: Property.BoxShadow | undefined;\n        \"-moz-float-edge\"?: Property.MozFloatEdge | undefined;\n        \"-moz-force-broken-image-icon\"?: Property.MozForceBrokenImageIcon | undefined;\n        \"-moz-opacity\"?: Property.Opacity | undefined;\n        \"-moz-outline\"?: Property.Outline<TLength> | undefined;\n        \"-moz-outline-color\"?: Property.OutlineColor | undefined;\n        \"-moz-outline-radius\"?: Property.MozOutlineRadius<TLength> | undefined;\n        \"-moz-outline-radius-bottomleft\"?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n        \"-moz-outline-radius-bottomright\"?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n        \"-moz-outline-radius-topleft\"?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n        \"-moz-outline-radius-topright\"?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n        \"-moz-outline-style\"?: Property.OutlineStyle | undefined;\n        \"-moz-outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n        \"-moz-text-align-last\"?: Property.TextAlignLast | undefined;\n        \"-moz-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n        \"-moz-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n        \"-moz-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n        \"-moz-user-input\"?: Property.MozUserInput | undefined;\n        \"-ms-ime-mode\"?: Property.ImeMode | undefined;\n        \"-ms-scrollbar-track-color\"?: Property.MsScrollbarTrackColor | undefined;\n        \"-o-animation\"?: Property.Animation<TTime> | undefined;\n        \"-o-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n        \"-o-animation-direction\"?: Property.AnimationDirection | undefined;\n        \"-o-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n        \"-o-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n        \"-o-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n        \"-o-animation-name\"?: Property.AnimationName | undefined;\n        \"-o-animation-play-state\"?: Property.AnimationPlayState | undefined;\n        \"-o-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n        \"-o-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n        \"-o-border-image\"?: Property.BorderImage | undefined;\n        \"-o-object-fit\"?: Property.ObjectFit | undefined;\n        \"-o-object-position\"?: Property.ObjectPosition<TLength> | undefined;\n        \"-o-tab-size\"?: Property.TabSize<TLength> | undefined;\n        \"-o-text-overflow\"?: Property.TextOverflow | undefined;\n        \"-o-transform\"?: Property.Transform | undefined;\n        \"-o-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n        \"-o-transition\"?: Property.Transition<TTime> | undefined;\n        \"-o-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n        \"-o-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n        \"-o-transition-property\"?: Property.TransitionProperty | undefined;\n        \"-o-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n        \"-webkit-box-align\"?: Property.BoxAlign | undefined;\n        \"-webkit-box-direction\"?: Property.BoxDirection | undefined;\n        \"-webkit-box-flex\"?: Property.BoxFlex | undefined;\n        \"-webkit-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n        \"-webkit-box-lines\"?: Property.BoxLines | undefined;\n        \"-webkit-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n        \"-webkit-box-orient\"?: Property.BoxOrient | undefined;\n        \"-webkit-box-pack\"?: Property.BoxPack | undefined;\n        \"-webkit-scroll-snap-points-x\"?: Property.ScrollSnapPointsX | undefined;\n        \"-webkit-scroll-snap-points-y\"?: Property.ScrollSnapPointsY | undefined;\n    }\n    export interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n        \"alignment-baseline\"?: Property.AlignmentBaseline | undefined;\n        \"baseline-shift\"?: Property.BaselineShift<TLength> | undefined;\n        clip?: Property.Clip | undefined;\n        \"clip-path\"?: Property.ClipPath | undefined;\n        \"clip-rule\"?: Property.ClipRule | undefined;\n        color?: Property.Color | undefined;\n        \"color-interpolation\"?: Property.ColorInterpolation | undefined;\n        \"color-rendering\"?: Property.ColorRendering | undefined;\n        cursor?: Property.Cursor | undefined;\n        direction?: Property.Direction | undefined;\n        display?: Property.Display | undefined;\n        \"dominant-baseline\"?: Property.DominantBaseline | undefined;\n        fill?: Property.Fill | undefined;\n        \"fill-opacity\"?: Property.FillOpacity | undefined;\n        \"fill-rule\"?: Property.FillRule | undefined;\n        filter?: Property.Filter | undefined;\n        \"flood-color\"?: Property.FloodColor | undefined;\n        \"flood-opacity\"?: Property.FloodOpacity | undefined;\n        font?: Property.Font | undefined;\n        \"font-family\"?: Property.FontFamily | undefined;\n        \"font-size\"?: Property.FontSize<TLength> | undefined;\n        \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n        \"font-stretch\"?: Property.FontStretch | undefined;\n        \"font-style\"?: Property.FontStyle | undefined;\n        \"font-variant\"?: Property.FontVariant | undefined;\n        \"font-weight\"?: Property.FontWeight | undefined;\n        \"glyph-orientation-vertical\"?: Property.GlyphOrientationVertical | undefined;\n        \"image-rendering\"?: Property.ImageRendering | undefined;\n        \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n        \"lighting-color\"?: Property.LightingColor | undefined;\n        \"line-height\"?: Property.LineHeight<TLength> | undefined;\n        marker?: Property.Marker | undefined;\n        \"marker-end\"?: Property.MarkerEnd | undefined;\n        \"marker-mid\"?: Property.MarkerMid | undefined;\n        \"marker-start\"?: Property.MarkerStart | undefined;\n        mask?: Property.Mask<TLength> | undefined;\n        opacity?: Property.Opacity | undefined;\n        overflow?: Property.Overflow | undefined;\n        \"paint-order\"?: Property.PaintOrder | undefined;\n        \"pointer-events\"?: Property.PointerEvents | undefined;\n        \"shape-rendering\"?: Property.ShapeRendering | undefined;\n        \"stop-color\"?: Property.StopColor | undefined;\n        \"stop-opacity\"?: Property.StopOpacity | undefined;\n        stroke?: Property.Stroke | undefined;\n        \"stroke-dasharray\"?: Property.StrokeDasharray<TLength> | undefined;\n        \"stroke-dashoffset\"?: Property.StrokeDashoffset<TLength> | undefined;\n        \"stroke-linecap\"?: Property.StrokeLinecap | undefined;\n        \"stroke-linejoin\"?: Property.StrokeLinejoin | undefined;\n        \"stroke-miterlimit\"?: Property.StrokeMiterlimit | undefined;\n        \"stroke-opacity\"?: Property.StrokeOpacity | undefined;\n        \"stroke-width\"?: Property.StrokeWidth<TLength> | undefined;\n        \"text-anchor\"?: Property.TextAnchor | undefined;\n        \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n        \"text-rendering\"?: Property.TextRendering | undefined;\n        \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n        \"vector-effect\"?: Property.VectorEffect | undefined;\n        visibility?: Property.Visibility | undefined;\n        \"white-space\"?: Property.WhiteSpace | undefined;\n        \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n        \"writing-mode\"?: Property.WritingMode | undefined;\n    }\n    export interface PropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> extends StandardPropertiesHyphen<TLength, TTime>, VendorPropertiesHyphen<TLength, TTime>, ObsoletePropertiesHyphen<TLength, TTime>, SvgPropertiesHyphen<TLength, TTime> {\n    }\n    export type StandardLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandProperties<TLength, TTime>>;\n    export type StandardShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandProperties<TLength, TTime>>;\n    export interface StandardPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandPropertiesFallback<TLength, TTime>, StandardShorthandPropertiesFallback<TLength, TTime> {\n    }\n    export type VendorLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandProperties<TLength, TTime>>;\n    export type VendorShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandProperties<TLength, TTime>>;\n    export interface VendorPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandPropertiesFallback<TLength, TTime>, VendorShorthandPropertiesFallback<TLength, TTime> {\n    }\n    export type ObsoletePropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoleteProperties<TLength, TTime>>;\n    export type SvgPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgProperties<TLength, TTime>>;\n    export interface PropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardPropertiesFallback<TLength, TTime>, VendorPropertiesFallback<TLength, TTime>, ObsoletePropertiesFallback<TLength, TTime>, SvgPropertiesFallback<TLength, TTime> {\n    }\n    export type StandardLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;\n    export type StandardShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;\n    export interface StandardPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardLonghandPropertiesHyphenFallback<TLength, TTime>, StandardShorthandPropertiesHyphenFallback<TLength, TTime> {\n    }\n    export type VendorLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;\n    export type VendorShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;\n    export interface VendorPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandPropertiesHyphenFallback<TLength, TTime>, VendorShorthandPropertiesHyphenFallback<TLength, TTime> {\n    }\n    export type ObsoletePropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;\n    export type SvgPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;\n    export interface PropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> extends StandardPropertiesHyphenFallback<TLength, TTime>, VendorPropertiesHyphenFallback<TLength, TTime>, ObsoletePropertiesHyphenFallback<TLength, TTime>, SvgPropertiesHyphenFallback<TLength, TTime> {\n    }\n    export type AtRules = \"@charset\" | \"@counter-style\" | \"@document\" | \"@font-face\" | \"@font-feature-values\" | \"@import\" | \"@keyframes\" | \"@media\" | \"@namespace\" | \"@page\" | \"@property\" | \"@supports\" | \"@viewport\";\n    export type AdvancedPseudos = \":-moz-any()\" | \":-moz-dir\" | \":-webkit-any()\" | \"::cue\" | \"::cue-region\" | \"::part\" | \"::slotted\" | \":dir\" | \":has\" | \":host\" | \":host-context\" | \":is\" | \":lang\" | \":matches()\" | \":not\" | \":nth-child\" | \":nth-last-child\" | \":nth-last-of-type\" | \":nth-of-type\" | \":where\";\n    export type SimplePseudos = \":-khtml-any-link\" | \":-moz-any-link\" | \":-moz-focusring\" | \":-moz-full-screen\" | \":-moz-placeholder\" | \":-moz-read-only\" | \":-moz-read-write\" | \":-moz-ui-invalid\" | \":-moz-ui-valid\" | \":-ms-fullscreen\" | \":-ms-input-placeholder\" | \":-webkit-any-link\" | \":-webkit-full-screen\" | \"::-moz-placeholder\" | \"::-moz-progress-bar\" | \"::-moz-range-progress\" | \"::-moz-range-thumb\" | \"::-moz-range-track\" | \"::-moz-selection\" | \"::-ms-backdrop\" | \"::-ms-browse\" | \"::-ms-check\" | \"::-ms-clear\" | \"::-ms-fill\" | \"::-ms-fill-lower\" | \"::-ms-fill-upper\" | \"::-ms-input-placeholder\" | \"::-ms-reveal\" | \"::-ms-thumb\" | \"::-ms-ticks-after\" | \"::-ms-ticks-before\" | \"::-ms-tooltip\" | \"::-ms-track\" | \"::-ms-value\" | \"::-webkit-backdrop\" | \"::-webkit-input-placeholder\" | \"::-webkit-progress-bar\" | \"::-webkit-progress-inner-value\" | \"::-webkit-progress-value\" | \"::-webkit-slider-runnable-track\" | \"::-webkit-slider-thumb\" | \"::after\" | \"::backdrop\" | \"::before\" | \"::cue\" | \"::cue-region\" | \"::first-letter\" | \"::first-line\" | \"::grammar-error\" | \"::marker\" | \"::placeholder\" | \"::selection\" | \"::spelling-error\" | \"::target-text\" | \":active\" | \":after\" | \":any-link\" | \":before\" | \":blank\" | \":checked\" | \":current\" | \":default\" | \":defined\" | \":disabled\" | \":empty\" | \":enabled\" | \":first\" | \":first-child\" | \":first-letter\" | \":first-line\" | \":first-of-type\" | \":focus\" | \":focus-visible\" | \":focus-within\" | \":fullscreen\" | \":future\" | \":hover\" | \":in-range\" | \":indeterminate\" | \":invalid\" | \":last-child\" | \":last-of-type\" | \":left\" | \":link\" | \":local-link\" | \":nth-col\" | \":nth-last-col\" | \":only-child\" | \":only-of-type\" | \":optional\" | \":out-of-range\" | \":past\" | \":paused\" | \":picture-in-picture\" | \":placeholder-shown\" | \":read-only\" | \":read-write\" | \":required\" | \":right\" | \":root\" | \":scope\" | \":target\" | \":target-within\" | \":user-invalid\" | \":user-valid\" | \":valid\" | \":visited\";\n    export type Pseudos = AdvancedPseudos | SimplePseudos;\n    export type HtmlAttributes = \"[abbr]\" | \"[accept-charset]\" | \"[accept]\" | \"[accesskey]\" | \"[action]\" | \"[align]\" | \"[alink]\" | \"[allow]\" | \"[allowfullscreen]\" | \"[allowpaymentrequest]\" | \"[alt]\" | \"[archive]\" | \"[async]\" | \"[autobuffer]\" | \"[autocapitalize]\" | \"[autocomplete]\" | \"[autofocus]\" | \"[autoplay]\" | \"[axis]\" | \"[background]\" | \"[behavior]\" | \"[bgcolor]\" | \"[border]\" | \"[bottommargin]\" | \"[buffered]\" | \"[cellpadding]\" | \"[cellspacing]\" | \"[char]\" | \"[charoff]\" | \"[charset]\" | \"[checked]\" | \"[cite]\" | \"[class]\" | \"[classid]\" | \"[clear]\" | \"[code]\" | \"[codebase]\" | \"[codetype]\" | \"[color]\" | \"[cols]\" | \"[colspan]\" | \"[command]\" | \"[compact]\" | \"[content]\" | \"[contenteditable]\" | \"[contextmenu]\" | \"[controls]\" | \"[coords]\" | \"[crossorigin]\" | \"[data]\" | \"[datafld]\" | \"[datasrc]\" | \"[datetime]\" | \"[declare]\" | \"[decoding]\" | \"[default]\" | \"[defer]\" | \"[dir]\" | \"[direction]\" | \"[dirname]\" | \"[disabled]\" | \"[download]\" | \"[draggable]\" | \"[enctype]\" | \"[enterkeyhint]\" | \"[exportparts]\" | \"[face]\" | \"[for]\" | \"[form]\" | \"[formaction]\" | \"[formenctype]\" | \"[formmethod]\" | \"[formnovalidate]\" | \"[formtarget]\" | \"[frame]\" | \"[frameborder]\" | \"[headers]\" | \"[height]\" | \"[hidden]\" | \"[high]\" | \"[href]\" | \"[hreflang]\" | \"[hspace]\" | \"[http-equiv]\" | \"[icon]\" | \"[id]\" | \"[imagesizes]\" | \"[imagesrcset]\" | \"[inputmode]\" | \"[integrity]\" | \"[intrinsicsize]\" | \"[is]\" | \"[ismap]\" | \"[itemid]\" | \"[itemprop]\" | \"[itemref]\" | \"[itemscope]\" | \"[itemtype]\" | \"[kind]\" | \"[label]\" | \"[lang]\" | \"[language]\" | \"[leftmargin]\" | \"[link]\" | \"[loading]\" | \"[longdesc]\" | \"[loop]\" | \"[low]\" | \"[manifest]\" | \"[marginheight]\" | \"[marginwidth]\" | \"[max]\" | \"[maxlength]\" | \"[mayscript]\" | \"[media]\" | \"[method]\" | \"[methods]\" | \"[min]\" | \"[minlength]\" | \"[moz-opaque]\" | \"[mozallowfullscreen]\" | \"[mozcurrentsampleoffset]\" | \"[msallowfullscreen]\" | \"[multiple]\" | \"[muted]\" | \"[name]\" | \"[nohref]\" | \"[nomodule]\" | \"[nonce]\" | \"[noresize]\" | \"[noshade]\" | \"[novalidate]\" | \"[nowrap]\" | \"[object]\" | \"[onafterprint]\" | \"[onbeforeprint]\" | \"[onbeforeunload]\" | \"[onblur]\" | \"[onerror]\" | \"[onfocus]\" | \"[onhashchange]\" | \"[onlanguagechange]\" | \"[onload]\" | \"[onmessage]\" | \"[onoffline]\" | \"[ononline]\" | \"[onpopstate]\" | \"[onredo]\" | \"[onresize]\" | \"[onstorage]\" | \"[onundo]\" | \"[onunload]\" | \"[open]\" | \"[optimum]\" | \"[part]\" | \"[ping]\" | \"[placeholder]\" | \"[played]\" | \"[poster]\" | \"[prefetch]\" | \"[preload]\" | \"[profile]\" | \"[radiogroup]\" | \"[readonly]\" | \"[referrerpolicy]\" | \"[rel]\" | \"[required]\" | \"[rev]\" | \"[reversed]\" | \"[rightmargin]\" | \"[rows]\" | \"[rowspan]\" | \"[rules]\" | \"[sandbox-allow-downloads]\" | \"[sandbox-allow-modals]\" | \"[sandbox-allow-popups-to-escape-sandbox]\" | \"[sandbox-allow-popups]\" | \"[sandbox-allow-presentation]\" | \"[sandbox-allow-same-origin]\" | \"[sandbox-allow-storage-access-by-user-activation]\" | \"[sandbox-allow-top-navigation-by-user-activation]\" | \"[sandbox]\" | \"[scope]\" | \"[scoped]\" | \"[scrollamount]\" | \"[scrolldelay]\" | \"[scrolling]\" | \"[selected]\" | \"[shape]\" | \"[size]\" | \"[sizes]\" | \"[slot]\" | \"[span]\" | \"[spellcheck]\" | \"[src]\" | \"[srcdoc]\" | \"[srclang]\" | \"[srcset]\" | \"[standby]\" | \"[start]\" | \"[style]\" | \"[summary]\" | \"[tabindex]\" | \"[target]\" | \"[text]\" | \"[title]\" | \"[topmargin]\" | \"[translate]\" | \"[truespeed]\" | \"[type]\" | \"[usemap]\" | \"[valign]\" | \"[value]\" | \"[valuetype]\" | \"[version]\" | \"[vlink]\" | \"[volume]\" | \"[vspace]\" | \"[webkitallowfullscreen]\" | \"[width]\" | \"[wrap]\" | \"[xmlns]\";\n    export type SvgAttributes = \"[accent-height]\" | \"[alignment-baseline]\" | \"[allowReorder]\" | \"[alphabetic]\" | \"[animation]\" | \"[arabic-form]\" | \"[ascent]\" | \"[attributeName]\" | \"[attributeType]\" | \"[azimuth]\" | \"[baseFrequency]\" | \"[baseProfile]\" | \"[baseline-shift]\" | \"[bbox]\" | \"[bias]\" | \"[by]\" | \"[calcMode]\" | \"[cap-height]\" | \"[class]\" | \"[clip-path]\" | \"[clip-rule]\" | \"[clipPathUnits]\" | \"[clip]\" | \"[color-interpolation-filters]\" | \"[color-interpolation]\" | \"[color-profile]\" | \"[color-rendering]\" | \"[color]\" | \"[contentScriptType]\" | \"[contentStyleType]\" | \"[cursor]\" | \"[cx]\" | \"[cy]\" | \"[d]\" | \"[descent]\" | \"[diffuseConstant]\" | \"[direction]\" | \"[display]\" | \"[divisor]\" | \"[document]\" | \"[dominant-baseline]\" | \"[download]\" | \"[dur]\" | \"[dx]\" | \"[dy]\" | \"[edgeMode]\" | \"[elevation]\" | \"[enable-background]\" | \"[fill-opacity]\" | \"[fill-rule]\" | \"[fill]\" | \"[filterRes]\" | \"[filterUnits]\" | \"[filter]\" | \"[flood-color]\" | \"[flood-opacity]\" | \"[font-family]\" | \"[font-size-adjust]\" | \"[font-size]\" | \"[font-stretch]\" | \"[font-style]\" | \"[font-variant]\" | \"[font-weight]\" | \"[format]\" | \"[fr]\" | \"[from]\" | \"[fx]\" | \"[fy]\" | \"[g1]\" | \"[g2]\" | \"[global]\" | \"[glyph-name]\" | \"[glyph-orientation-horizontal]\" | \"[glyph-orientation-vertical]\" | \"[glyphRef]\" | \"[gradientTransform]\" | \"[gradientUnits]\" | \"[graphical]\" | \"[hanging]\" | \"[hatchContentUnits]\" | \"[hatchUnits]\" | \"[height]\" | \"[horiz-adv-x]\" | \"[horiz-origin-x]\" | \"[horiz-origin-y]\" | \"[href]\" | \"[hreflang]\" | \"[id]\" | \"[ideographic]\" | \"[image-rendering]\" | \"[in2]\" | \"[in]\" | \"[k1]\" | \"[k2]\" | \"[k3]\" | \"[k4]\" | \"[k]\" | \"[kernelMatrix]\" | \"[kernelUnitLength]\" | \"[kerning]\" | \"[keyPoints]\" | \"[lang]\" | \"[lengthAdjust]\" | \"[letter-spacing]\" | \"[lighting-color]\" | \"[limitingConeAngle]\" | \"[marker-end]\" | \"[marker-mid]\" | \"[marker-start]\" | \"[markerHeight]\" | \"[markerUnits]\" | \"[markerWidth]\" | \"[maskContentUnits]\" | \"[maskUnits]\" | \"[mask]\" | \"[mathematical]\" | \"[media]\" | \"[mode]\" | \"[name]\" | \"[numOctaves]\" | \"[offset]\" | \"[opacity]\" | \"[operator]\" | \"[order]\" | \"[orient]\" | \"[orientation]\" | \"[origin]\" | \"[overflow]\" | \"[overline-position]\" | \"[overline-thickness]\" | \"[paint-order]\" | \"[panose-1]\" | \"[path]\" | \"[patternContentUnits]\" | \"[patternTransform]\" | \"[patternUnits]\" | \"[ping]\" | \"[pitch]\" | \"[pointer-events]\" | \"[pointsAtX]\" | \"[pointsAtY]\" | \"[pointsAtZ]\" | \"[points]\" | \"[preserveAlpha]\" | \"[preserveAspectRatio]\" | \"[primitiveUnits]\" | \"[r]\" | \"[radius]\" | \"[refX]\" | \"[refY]\" | \"[referrerpolicy]\" | \"[rel]\" | \"[repeatCount]\" | \"[requiredExtensions]\" | \"[requiredFeatures]\" | \"[rotate]\" | \"[rx]\" | \"[ry]\" | \"[scale]\" | \"[seed]\" | \"[shape-rendering]\" | \"[side]\" | \"[slope]\" | \"[solid-color]\" | \"[solid-opacity]\" | \"[spacing]\" | \"[specularConstant]\" | \"[specularExponent]\" | \"[spreadMethod]\" | \"[startOffset]\" | \"[stdDeviation]\" | \"[stemh]\" | \"[stemv]\" | \"[stitchTiles]\" | \"[stop-color]\" | \"[stop-opacity]\" | \"[strikethrough-position]\" | \"[strikethrough-thickness]\" | \"[string]\" | \"[stroke-dasharray]\" | \"[stroke-dashoffset]\" | \"[stroke-linecap]\" | \"[stroke-linejoin]\" | \"[stroke-miterlimit]\" | \"[stroke-opacity]\" | \"[stroke-width]\" | \"[stroke]\" | \"[style]\" | \"[surfaceScale]\" | \"[systemLanguage]\" | \"[tabindex]\" | \"[targetX]\" | \"[targetY]\" | \"[target]\" | \"[text-anchor]\" | \"[text-decoration]\" | \"[text-overflow]\" | \"[text-rendering]\" | \"[textLength]\" | \"[title]\" | \"[to]\" | \"[transform-origin]\" | \"[transform]\" | \"[type]\" | \"[u1]\" | \"[u2]\" | \"[underline-position]\" | \"[underline-thickness]\" | \"[unicode-bidi]\" | \"[unicode-range]\" | \"[unicode]\" | \"[units-per-em]\" | \"[v-alphabetic]\" | \"[v-hanging]\" | \"[v-ideographic]\" | \"[v-mathematical]\" | \"[values]\" | \"[vector-effect]\" | \"[version]\" | \"[vert-adv-y]\" | \"[vert-origin-x]\" | \"[vert-origin-y]\" | \"[viewBox]\" | \"[viewTarget]\" | \"[visibility]\" | \"[white-space]\" | \"[width]\" | \"[widths]\" | \"[word-spacing]\" | \"[writing-mode]\" | \"[x-height]\" | \"[x1]\" | \"[x2]\" | \"[xChannelSelector]\" | \"[x]\" | \"[y1]\" | \"[y2]\" | \"[yChannelSelector]\" | \"[y]\" | \"[z]\" | \"[zoomAndPan]\";\n    export type Globals = \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"unset\";\n    export namespace Property {\n        type AccentColor = Globals | DataType.Color | \"auto\";\n        type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n        type AlignItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n        type AlignSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n        type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n        type All = Globals;\n        type Animation<TTime = string & {}> = Globals | DataType.SingleAnimation<TTime> | (string & {});\n        type AnimationDelay<TTime = string & {}> = Globals | TTime | (string & {});\n        type AnimationDirection = Globals | DataType.SingleAnimationDirection | (string & {});\n        type AnimationDuration<TTime = string & {}> = Globals | TTime | (string & {});\n        type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (string & {});\n        type AnimationIterationCount = Globals | \"infinite\" | (string & {}) | (number & {});\n        type AnimationName = Globals | \"none\" | (string & {});\n        type AnimationPlayState = Globals | \"paused\" | \"running\" | (string & {});\n        type AnimationTimingFunction = Globals | DataType.EasingFunction | (string & {});\n        type Appearance = Globals | DataType.CompatAuto | \"auto\" | \"menulist-button\" | \"none\" | \"textfield\";\n        type AspectRatio = Globals | \"auto\" | (string & {});\n        type Azimuth = Globals | \"behind\" | \"center\" | \"center-left\" | \"center-right\" | \"far-left\" | \"far-right\" | \"left\" | \"left-side\" | \"leftwards\" | \"right\" | \"right-side\" | \"rightwards\" | (string & {});\n        type BackdropFilter = Globals | \"none\" | (string & {});\n        type BackfaceVisibility = Globals | \"hidden\" | \"visible\";\n        type Background<TLength = (string & {}) | 0> = Globals | DataType.FinalBgLayer<TLength> | (string & {});\n        type BackgroundAttachment = Globals | DataType.Attachment | (string & {});\n        type BackgroundBlendMode = Globals | DataType.BlendMode | (string & {});\n        type BackgroundClip = Globals | DataType.Box | (string & {});\n        type BackgroundColor = Globals | DataType.Color;\n        type BackgroundImage = Globals | \"none\" | (string & {});\n        type BackgroundOrigin = Globals | DataType.Box | (string & {});\n        type BackgroundPosition<TLength = (string & {}) | 0> = Globals | DataType.BgPosition<TLength> | (string & {});\n        type BackgroundPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | \"x-end\" | \"x-start\" | (string & {});\n        type BackgroundPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | \"y-end\" | \"y-start\" | (string & {});\n        type BackgroundRepeat = Globals | DataType.RepeatStyle | (string & {});\n        type BackgroundSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n        type BlockOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n        type BlockSize<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fill-available\" | \"auto\" | \"fit-content\" | \"max-content\" | \"min-content\" | (string & {});\n        type Border<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderBlock<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderBlockColor = Globals | DataType.Color | (string & {});\n        type BorderBlockEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderBlockEndColor = Globals | DataType.Color;\n        type BorderBlockEndStyle = Globals | DataType.LineStyle;\n        type BorderBlockEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderBlockStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderBlockStartColor = Globals | DataType.Color;\n        type BorderBlockStartStyle = Globals | DataType.LineStyle;\n        type BorderBlockStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderBlockStyle = Globals | DataType.LineStyle;\n        type BorderBlockWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderBottom<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderBottomColor = Globals | DataType.Color;\n        type BorderBottomLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderBottomRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderBottomStyle = Globals | DataType.LineStyle;\n        type BorderBottomWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderCollapse = Globals | \"collapse\" | \"separate\";\n        type BorderColor = Globals | DataType.Color | (string & {});\n        type BorderEndEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderEndStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderImage = Globals | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n        type BorderImageOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n        type BorderImageRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n        type BorderImageSlice = Globals | (string & {}) | (number & {});\n        type BorderImageSource = Globals | \"none\" | (string & {});\n        type BorderImageWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n        type BorderInline<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderInlineColor = Globals | DataType.Color | (string & {});\n        type BorderInlineEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderInlineEndColor = Globals | DataType.Color;\n        type BorderInlineEndStyle = Globals | DataType.LineStyle;\n        type BorderInlineEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderInlineStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderInlineStartColor = Globals | DataType.Color;\n        type BorderInlineStartStyle = Globals | DataType.LineStyle;\n        type BorderInlineStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderInlineStyle = Globals | DataType.LineStyle;\n        type BorderInlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderLeft<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderLeftColor = Globals | DataType.Color;\n        type BorderLeftStyle = Globals | DataType.LineStyle;\n        type BorderLeftWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderRight<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderRightColor = Globals | DataType.Color;\n        type BorderRightStyle = Globals | DataType.LineStyle;\n        type BorderRightWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderSpacing<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderStartEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderStartStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderStyle = Globals | DataType.LineStyle | (string & {});\n        type BorderTop<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type BorderTopColor = Globals | DataType.Color;\n        type BorderTopLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderTopRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type BorderTopStyle = Globals | DataType.LineStyle;\n        type BorderTopWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type BorderWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n        type Bottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type BoxAlign = Globals | \"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\";\n        type BoxDecorationBreak = Globals | \"clone\" | \"slice\";\n        type BoxDirection = Globals | \"inherit\" | \"normal\" | \"reverse\";\n        type BoxFlex = Globals | (number & {}) | (string & {});\n        type BoxFlexGroup = Globals | (number & {}) | (string & {});\n        type BoxLines = Globals | \"multiple\" | \"single\";\n        type BoxOrdinalGroup = Globals | (number & {}) | (string & {});\n        type BoxOrient = Globals | \"block-axis\" | \"horizontal\" | \"inherit\" | \"inline-axis\" | \"vertical\";\n        type BoxPack = Globals | \"center\" | \"end\" | \"justify\" | \"start\";\n        type BoxShadow = Globals | \"none\" | (string & {});\n        type BoxSizing = Globals | \"border-box\" | \"content-box\";\n        type BreakAfter = Globals | \"all\" | \"always\" | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\" | \"column\" | \"left\" | \"page\" | \"recto\" | \"region\" | \"right\" | \"verso\";\n        type BreakBefore = Globals | \"all\" | \"always\" | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\" | \"column\" | \"left\" | \"page\" | \"recto\" | \"region\" | \"right\" | \"verso\";\n        type BreakInside = Globals | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\";\n        type CaptionSide = Globals | \"block-end\" | \"block-start\" | \"bottom\" | \"inline-end\" | \"inline-start\" | \"top\";\n        type CaretColor = Globals | DataType.Color | \"auto\";\n        type Clear = Globals | \"both\" | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n        type Clip = Globals | \"auto\" | (string & {});\n        type ClipPath = Globals | DataType.GeometryBox | \"none\" | (string & {});\n        type Color = Globals | DataType.Color;\n        type ColorAdjust = Globals | \"economy\" | \"exact\";\n        type ColorScheme = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n        type ColumnCount = Globals | \"auto\" | (number & {}) | (string & {});\n        type ColumnFill = Globals | \"auto\" | \"balance\" | \"balance-all\";\n        type ColumnGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n        type ColumnRule<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type ColumnRuleColor = Globals | DataType.Color;\n        type ColumnRuleStyle = Globals | DataType.LineStyle | (string & {});\n        type ColumnRuleWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n        type ColumnSpan = Globals | \"all\" | \"none\";\n        type ColumnWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n        type Columns<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n        type Contain = Globals | \"content\" | \"layout\" | \"none\" | \"paint\" | \"size\" | \"strict\" | \"style\" | (string & {});\n        type Content = Globals | DataType.ContentList | \"none\" | \"normal\" | (string & {});\n        type ContentVisibility = Globals | \"auto\" | \"hidden\" | \"visible\";\n        type CounterIncrement = Globals | \"none\" | (string & {});\n        type CounterReset = Globals | \"none\" | (string & {});\n        type CounterSet = Globals | \"none\" | (string & {});\n        type Cursor = Globals | \"-moz-grab\" | \"-webkit-grab\" | \"alias\" | \"all-scroll\" | \"auto\" | \"cell\" | \"col-resize\" | \"context-menu\" | \"copy\" | \"crosshair\" | \"default\" | \"e-resize\" | \"ew-resize\" | \"grab\" | \"grabbing\" | \"help\" | \"move\" | \"n-resize\" | \"ne-resize\" | \"nesw-resize\" | \"no-drop\" | \"none\" | \"not-allowed\" | \"ns-resize\" | \"nw-resize\" | \"nwse-resize\" | \"pointer\" | \"progress\" | \"row-resize\" | \"s-resize\" | \"se-resize\" | \"sw-resize\" | \"text\" | \"vertical-text\" | \"w-resize\" | \"wait\" | \"zoom-in\" | \"zoom-out\" | (string & {});\n        type Direction = Globals | \"ltr\" | \"rtl\";\n        type Display = Globals | DataType.DisplayOutside | DataType.DisplayInside | DataType.DisplayInternal | DataType.DisplayLegacy | \"contents\" | \"list-item\" | \"none\" | (string & {});\n        type EmptyCells = Globals | \"hide\" | \"show\";\n        type Filter = Globals | \"none\" | (string & {});\n        type Flex<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"content\" | \"fit-content\" | \"max-content\" | \"min-content\" | \"none\" | (string & {}) | (number & {});\n        type FlexBasis<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-auto\" | \"auto\" | \"content\" | \"fit-content\" | \"max-content\" | \"min-content\" | (string & {});\n        type FlexDirection = Globals | \"column\" | \"column-reverse\" | \"row\" | \"row-reverse\";\n        type FlexFlow = Globals | \"column\" | \"column-reverse\" | \"nowrap\" | \"row\" | \"row-reverse\" | \"wrap\" | \"wrap-reverse\" | (string & {});\n        type FlexGrow = Globals | (number & {}) | (string & {});\n        type FlexShrink = Globals | (number & {}) | (string & {});\n        type FlexWrap = Globals | \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n        type Float = Globals | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n        type Font = Globals | \"caption\" | \"icon\" | \"menu\" | \"message-box\" | \"small-caption\" | \"status-bar\" | (string & {});\n        type FontFamily = Globals | DataType.GenericFamily | (string & {});\n        type FontFeatureSettings = Globals | \"normal\" | (string & {});\n        type FontKerning = Globals | \"auto\" | \"none\" | \"normal\";\n        type FontLanguageOverride = Globals | \"normal\" | (string & {});\n        type FontOpticalSizing = Globals | \"auto\" | \"none\";\n        type FontSize<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"larger\" | \"smaller\" | (string & {});\n        type FontSizeAdjust = Globals | \"from-font\" | \"none\" | (string & {}) | (number & {});\n        type FontSmooth<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"always\" | \"auto\" | \"never\";\n        type FontStretch = Globals | DataType.FontStretchAbsolute;\n        type FontStyle = Globals | \"italic\" | \"normal\" | \"oblique\" | (string & {});\n        type FontSynthesis = Globals | \"none\" | \"small-caps\" | \"style\" | \"weight\" | (string & {});\n        type FontVariant = Globals | DataType.EastAsianVariantValues | \"all-petite-caps\" | \"all-small-caps\" | \"common-ligatures\" | \"contextual\" | \"diagonal-fractions\" | \"discretionary-ligatures\" | \"full-width\" | \"historical-forms\" | \"historical-ligatures\" | \"lining-nums\" | \"no-common-ligatures\" | \"no-contextual\" | \"no-discretionary-ligatures\" | \"no-historical-ligatures\" | \"none\" | \"normal\" | \"oldstyle-nums\" | \"ordinal\" | \"petite-caps\" | \"proportional-nums\" | \"proportional-width\" | \"ruby\" | \"slashed-zero\" | \"small-caps\" | \"stacked-fractions\" | \"tabular-nums\" | \"titling-caps\" | \"unicase\" | (string & {});\n        type FontVariantAlternates = Globals | \"historical-forms\" | \"normal\" | (string & {});\n        type FontVariantCaps = Globals | \"all-petite-caps\" | \"all-small-caps\" | \"normal\" | \"petite-caps\" | \"small-caps\" | \"titling-caps\" | \"unicase\";\n        type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | \"full-width\" | \"normal\" | \"proportional-width\" | \"ruby\" | (string & {});\n        type FontVariantLigatures = Globals | \"common-ligatures\" | \"contextual\" | \"discretionary-ligatures\" | \"historical-ligatures\" | \"no-common-ligatures\" | \"no-contextual\" | \"no-discretionary-ligatures\" | \"no-historical-ligatures\" | \"none\" | \"normal\" | (string & {});\n        type FontVariantNumeric = Globals | \"diagonal-fractions\" | \"lining-nums\" | \"normal\" | \"oldstyle-nums\" | \"ordinal\" | \"proportional-nums\" | \"slashed-zero\" | \"stacked-fractions\" | \"tabular-nums\" | (string & {});\n        type FontVariantPosition = Globals | \"normal\" | \"sub\" | \"super\";\n        type FontVariationSettings = Globals | \"normal\" | (string & {});\n        type FontWeight = Globals | DataType.FontWeightAbsolute | \"bolder\" | \"lighter\";\n        type ForcedColorAdjust = Globals | \"auto\" | \"none\";\n        type Gap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n        type Grid = Globals | \"none\" | (string & {});\n        type GridArea = Globals | DataType.GridLine | (string & {});\n        type GridAutoColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n        type GridAutoFlow = Globals | \"column\" | \"dense\" | \"row\" | (string & {});\n        type GridAutoRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n        type GridColumn = Globals | DataType.GridLine | (string & {});\n        type GridColumnEnd = Globals | DataType.GridLine;\n        type GridColumnGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type GridColumnStart = Globals | DataType.GridLine;\n        type GridGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type GridRow = Globals | DataType.GridLine | (string & {});\n        type GridRowEnd = Globals | DataType.GridLine;\n        type GridRowGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type GridRowStart = Globals | DataType.GridLine;\n        type GridTemplate = Globals | \"none\" | (string & {});\n        type GridTemplateAreas = Globals | \"none\" | (string & {});\n        type GridTemplateColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n        type GridTemplateRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n        type HangingPunctuation = Globals | \"allow-end\" | \"first\" | \"force-end\" | \"last\" | \"none\" | (string & {});\n        type Height<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fit-content\" | \"auto\" | \"fit-content\" | \"max-content\" | \"min-content\" | (string & {});\n        type Hyphens = Globals | \"auto\" | \"manual\" | \"none\";\n        type ImageOrientation = Globals | \"flip\" | \"from-image\" | (string & {});\n        type ImageRendering = Globals | \"-moz-crisp-edges\" | \"-webkit-optimize-contrast\" | \"auto\" | \"crisp-edges\" | \"pixelated\";\n        type ImageResolution = Globals | \"from-image\" | (string & {});\n        type ImeMode = Globals | \"active\" | \"auto\" | \"disabled\" | \"inactive\" | \"normal\";\n        type InitialLetter = Globals | \"normal\" | (string & {}) | (number & {});\n        type InlineSize<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fill-available\" | \"auto\" | \"fit-content\" | \"max-content\" | \"min-content\" | (string & {});\n        type Inset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type InsetBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type InsetBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type InsetBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type InsetInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type InsetInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type InsetInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type Isolation = Globals | \"auto\" | \"isolate\";\n        type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n        type JustifyItems = Globals | DataType.SelfPosition | \"baseline\" | \"left\" | \"legacy\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n        type JustifySelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"left\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n        type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n        type Left<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type LetterSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n        type LineBreak = Globals | \"anywhere\" | \"auto\" | \"loose\" | \"normal\" | \"strict\";\n        type LineClamp = Globals | \"none\" | (number & {}) | (string & {});\n        type LineHeight<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {}) | (number & {});\n        type LineHeightStep<TLength = (string & {}) | 0> = Globals | TLength;\n        type ListStyle = Globals | \"inside\" | \"none\" | \"outside\" | (string & {});\n        type ListStyleImage = Globals | \"none\" | (string & {});\n        type ListStylePosition = Globals | \"inside\" | \"outside\";\n        type ListStyleType = Globals | \"none\" | (string & {});\n        type Margin<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type MarginTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type Mask<TLength = (string & {}) | 0> = Globals | DataType.MaskLayer<TLength> | (string & {});\n        type MaskBorder = Globals | \"alpha\" | \"luminance\" | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n        type MaskBorderMode = Globals | \"alpha\" | \"luminance\";\n        type MaskBorderOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n        type MaskBorderRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n        type MaskBorderSlice = Globals | (string & {}) | (number & {});\n        type MaskBorderSource = Globals | \"none\" | (string & {});\n        type MaskBorderWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n        type MaskClip = Globals | DataType.GeometryBox | \"no-clip\" | (string & {});\n        type MaskComposite = Globals | DataType.CompositingOperator | (string & {});\n        type MaskImage = Globals | \"none\" | (string & {});\n        type MaskMode = Globals | DataType.MaskingMode | (string & {});\n        type MaskOrigin = Globals | DataType.GeometryBox | (string & {});\n        type MaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n        type MaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n        type MaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n        type MaskType = Globals | \"alpha\" | \"luminance\";\n        type MathStyle = Globals | \"compact\" | \"normal\";\n        type MaxBlockSize<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fill-available\" | \"fit-content\" | \"max-content\" | \"min-content\" | \"none\" | (string & {});\n        type MaxHeight<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fit-content\" | \"-webkit-max-content\" | \"-webkit-min-content\" | \"fit-content\" | \"intrinsic\" | \"max-content\" | \"min-content\" | \"none\" | (string & {});\n        type MaxInlineSize<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fill-available\" | \"fit-content\" | \"max-content\" | \"min-content\" | \"none\" | (string & {});\n        type MaxLines = Globals | \"none\" | (number & {}) | (string & {});\n        type MaxWidth<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fit-content\" | \"-webkit-max-content\" | \"-webkit-min-content\" | \"fit-content\" | \"intrinsic\" | \"max-content\" | \"min-content\" | \"none\" | (string & {});\n        type MinBlockSize<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fill-available\" | \"auto\" | \"fit-content\" | \"max-content\" | \"min-content\" | (string & {});\n        type MinHeight<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fit-content\" | \"-webkit-max-content\" | \"-webkit-min-content\" | \"auto\" | \"fit-content\" | \"intrinsic\" | \"max-content\" | \"min-content\" | (string & {});\n        type MinInlineSize<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fill-available\" | \"auto\" | \"fit-content\" | \"max-content\" | \"min-content\" | (string & {});\n        type MinWidth<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fill-available\" | \"-webkit-fit-content\" | \"-webkit-max-content\" | \"-webkit-min-content\" | \"auto\" | \"fit-content\" | \"intrinsic\" | \"max-content\" | \"min-content\" | \"min-intrinsic\" | (string & {});\n        type MixBlendMode = Globals | DataType.BlendMode;\n        type Offset<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | DataType.GeometryBox | \"auto\" | \"none\" | (string & {});\n        type OffsetDistance<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type OffsetPath = Globals | DataType.GeometryBox | \"none\" | (string & {});\n        type OffsetRotate = Globals | \"auto\" | \"reverse\" | (string & {});\n        type ObjectFit = Globals | \"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\";\n        type ObjectPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n        type OffsetAnchor<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\";\n        type Opacity = Globals | (string & {}) | (number & {});\n        type Order = Globals | (number & {}) | (string & {});\n        type Orphans = Globals | (number & {}) | (string & {});\n        type Outline<TLength = (string & {}) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | \"auto\" | \"invert\" | (string & {});\n        type OutlineColor = Globals | DataType.Color | \"invert\";\n        type OutlineOffset<TLength = (string & {}) | 0> = Globals | TLength;\n        type OutlineStyle = Globals | DataType.LineStyle | \"auto\" | (string & {});\n        type OutlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n        type Overflow = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\" | (string & {});\n        type OverflowAnchor = Globals | \"auto\" | \"none\";\n        type OverflowBlock = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n        type OverflowClipBox = Globals | \"content-box\" | \"padding-box\";\n        type OverflowClipMargin<TLength = (string & {}) | 0> = Globals | DataType.VisualBox | TLength | (string & {});\n        type OverflowInline = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n        type OverflowWrap = Globals | \"anywhere\" | \"break-word\" | \"normal\";\n        type OverflowX = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n        type OverflowY = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n        type OverscrollBehavior = Globals | \"auto\" | \"contain\" | \"none\" | (string & {});\n        type OverscrollBehaviorBlock = Globals | \"auto\" | \"contain\" | \"none\";\n        type OverscrollBehaviorInline = Globals | \"auto\" | \"contain\" | \"none\";\n        type OverscrollBehaviorX = Globals | \"auto\" | \"contain\" | \"none\";\n        type OverscrollBehaviorY = Globals | \"auto\" | \"contain\" | \"none\";\n        type Padding<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingRight<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PaddingTop<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type PageBreakAfter = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n        type PageBreakBefore = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n        type PageBreakInside = Globals | \"auto\" | \"avoid\";\n        type PaintOrder = Globals | \"fill\" | \"markers\" | \"normal\" | \"stroke\" | (string & {});\n        type Perspective<TLength = (string & {}) | 0> = Globals | TLength | \"none\";\n        type PerspectiveOrigin<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n        type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n        type PlaceItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n        type PlaceSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n        type PointerEvents = Globals | \"all\" | \"auto\" | \"fill\" | \"inherit\" | \"none\" | \"painted\" | \"stroke\" | \"visible\" | \"visibleFill\" | \"visiblePainted\" | \"visibleStroke\";\n        type Position = Globals | \"-webkit-sticky\" | \"absolute\" | \"fixed\" | \"relative\" | \"static\" | \"sticky\";\n        type Quotes = Globals | \"auto\" | \"none\" | (string & {});\n        type Resize = Globals | \"block\" | \"both\" | \"horizontal\" | \"inline\" | \"none\" | \"vertical\";\n        type Right<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type Rotate = Globals | \"none\" | (string & {});\n        type RowGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n        type RubyAlign = Globals | \"center\" | \"space-around\" | \"space-between\" | \"start\";\n        type RubyMerge = Globals | \"auto\" | \"collapse\" | \"separate\";\n        type RubyPosition = Globals | \"alternate\" | \"inter-character\" | \"over\" | \"under\" | (string & {});\n        type Scale = Globals | \"none\" | (string & {}) | (number & {});\n        type ScrollBehavior = Globals | \"auto\" | \"smooth\";\n        type ScrollMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type ScrollMarginBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type ScrollMarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollMarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollMarginBottom<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollMarginInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type ScrollMarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollMarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollMarginLeft<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollMarginRight<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollMarginTop<TLength = (string & {}) | 0> = Globals | TLength;\n        type ScrollPadding<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollPaddingTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type ScrollSnapAlign = Globals | \"center\" | \"end\" | \"none\" | \"start\" | (string & {});\n        type ScrollSnapCoordinate<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"none\" | (string & {});\n        type ScrollSnapDestination<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n        type ScrollSnapPointsX = Globals | \"none\" | (string & {});\n        type ScrollSnapPointsY = Globals | \"none\" | (string & {});\n        type ScrollSnapStop = Globals | \"always\" | \"normal\";\n        type ScrollSnapType = Globals | \"block\" | \"both\" | \"inline\" | \"none\" | \"x\" | \"y\" | (string & {});\n        type ScrollSnapTypeX = Globals | \"mandatory\" | \"none\" | \"proximity\";\n        type ScrollSnapTypeY = Globals | \"mandatory\" | \"none\" | \"proximity\";\n        type ScrollbarColor = Globals | \"auto\" | (string & {});\n        type ScrollbarGutter = Globals | \"auto\" | \"stable\" | (string & {});\n        type MsScrollbarTrackColor = Globals | DataType.Color;\n        type ScrollbarWidth = Globals | \"auto\" | \"none\" | \"thin\";\n        type ShapeImageThreshold = Globals | (string & {}) | (number & {});\n        type ShapeMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type ShapeOutside = Globals | DataType.Box | \"margin-box\" | \"none\" | (string & {});\n        type TabSize<TLength = (string & {}) | 0> = Globals | TLength | (number & {}) | (string & {});\n        type TableLayout = Globals | \"auto\" | \"fixed\";\n        type TextAlign = Globals | \"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\";\n        type TextAlignLast = Globals | \"auto\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"right\" | \"start\";\n        type TextCombineUpright = Globals | \"all\" | \"none\" | (string & {});\n        type TextDecoration<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | \"auto\" | \"blink\" | \"dashed\" | \"dotted\" | \"double\" | \"from-font\" | \"grammar-error\" | \"line-through\" | \"none\" | \"overline\" | \"solid\" | \"spelling-error\" | \"underline\" | \"wavy\" | (string & {});\n        type TextDecorationColor = Globals | DataType.Color;\n        type TextDecorationLine = Globals | \"blink\" | \"grammar-error\" | \"line-through\" | \"none\" | \"overline\" | \"spelling-error\" | \"underline\" | (string & {});\n        type TextDecorationSkip = Globals | \"box-decoration\" | \"edges\" | \"leading-spaces\" | \"none\" | \"objects\" | \"spaces\" | \"trailing-spaces\" | (string & {});\n        type TextDecorationSkipInk = Globals | \"all\" | \"auto\" | \"none\";\n        type TextDecorationStyle = Globals | \"dashed\" | \"dotted\" | \"double\" | \"solid\" | \"wavy\";\n        type TextDecorationThickness<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"from-font\" | (string & {});\n        type TextEmphasis = Globals | DataType.Color | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n        type TextEmphasisColor = Globals | DataType.Color;\n        type TextEmphasisPosition = Globals | (string & {});\n        type TextEmphasisStyle = Globals | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n        type TextIndent<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type TextJustify = Globals | \"auto\" | \"inter-character\" | \"inter-word\" | \"none\";\n        type TextOrientation = Globals | \"mixed\" | \"sideways\" | \"upright\";\n        type TextOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n        type TextRendering = Globals | \"auto\" | \"geometricPrecision\" | \"optimizeLegibility\" | \"optimizeSpeed\";\n        type TextShadow = Globals | \"none\" | (string & {});\n        type TextSizeAdjust = Globals | \"auto\" | \"none\" | (string & {});\n        type TextTransform = Globals | \"capitalize\" | \"full-size-kana\" | \"full-width\" | \"lowercase\" | \"none\" | \"uppercase\";\n        type TextUnderlineOffset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type TextUnderlinePosition = Globals | \"auto\" | \"from-font\" | \"left\" | \"right\" | \"under\" | (string & {});\n        type Top<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n        type TouchAction = Globals | \"-ms-manipulation\" | \"-ms-none\" | \"-ms-pinch-zoom\" | \"auto\" | \"manipulation\" | \"none\" | \"pan-down\" | \"pan-left\" | \"pan-right\" | \"pan-up\" | \"pan-x\" | \"pan-y\" | \"pinch-zoom\" | (string & {});\n        type Transform = Globals | \"none\" | (string & {});\n        type TransformBox = Globals | \"border-box\" | \"content-box\" | \"fill-box\" | \"stroke-box\" | \"view-box\";\n        type TransformOrigin<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n        type TransformStyle = Globals | \"flat\" | \"preserve-3d\";\n        type Transition<TTime = string & {}> = Globals | DataType.SingleTransition<TTime> | (string & {});\n        type TransitionDelay<TTime = string & {}> = Globals | TTime | (string & {});\n        type TransitionDuration<TTime = string & {}> = Globals | TTime | (string & {});\n        type TransitionProperty = Globals | \"all\" | \"none\" | (string & {});\n        type TransitionTimingFunction = Globals | DataType.EasingFunction | (string & {});\n        type Translate<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n        type UnicodeBidi = Globals | \"-moz-isolate\" | \"-moz-isolate-override\" | \"-moz-plaintext\" | \"-webkit-isolate\" | \"-webkit-isolate-override\" | \"-webkit-plaintext\" | \"bidi-override\" | \"embed\" | \"isolate\" | \"isolate-override\" | \"normal\" | \"plaintext\";\n        type UserSelect = Globals | \"-moz-none\" | \"all\" | \"auto\" | \"contain\" | \"element\" | \"none\" | \"text\";\n        type VerticalAlign<TLength = (string & {}) | 0> = Globals | TLength | \"baseline\" | \"bottom\" | \"middle\" | \"sub\" | \"super\" | \"text-bottom\" | \"text-top\" | \"top\" | (string & {});\n        type Visibility = Globals | \"collapse\" | \"hidden\" | \"visible\";\n        type WhiteSpace = Globals | \"-moz-pre-wrap\" | \"break-spaces\" | \"normal\" | \"nowrap\" | \"pre\" | \"pre-line\" | \"pre-wrap\";\n        type Widows = Globals | (number & {}) | (string & {});\n        type Width<TLength = (string & {}) | 0> = Globals | TLength | \"-moz-fit-content\" | \"-moz-max-content\" | \"-moz-min-content\" | \"-webkit-fit-content\" | \"-webkit-max-content\" | \"auto\" | \"fit-content\" | \"intrinsic\" | \"max-content\" | \"min-content\" | \"min-intrinsic\" | (string & {});\n        type WillChange = Globals | DataType.AnimateableFeature | \"auto\" | (string & {});\n        type WordBreak = Globals | \"break-all\" | \"break-word\" | \"keep-all\" | \"normal\";\n        type WordSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n        type WordWrap = Globals | \"break-word\" | \"normal\";\n        type WritingMode = Globals | \"horizontal-tb\" | \"sideways-lr\" | \"sideways-rl\" | \"vertical-lr\" | \"vertical-rl\";\n        type ZIndex = Globals | \"auto\" | (number & {}) | (string & {});\n        type Zoom = Globals | \"normal\" | \"reset\" | (string & {}) | (number & {});\n        type MozAppearance = Globals | \"-moz-mac-unified-toolbar\" | \"-moz-win-borderless-glass\" | \"-moz-win-browsertabbar-toolbox\" | \"-moz-win-communications-toolbox\" | \"-moz-win-communicationstext\" | \"-moz-win-exclude-glass\" | \"-moz-win-glass\" | \"-moz-win-media-toolbox\" | \"-moz-win-mediatext\" | \"-moz-window-button-box\" | \"-moz-window-button-box-maximized\" | \"-moz-window-button-close\" | \"-moz-window-button-maximize\" | \"-moz-window-button-minimize\" | \"-moz-window-button-restore\" | \"-moz-window-frame-bottom\" | \"-moz-window-frame-left\" | \"-moz-window-frame-right\" | \"-moz-window-titlebar\" | \"-moz-window-titlebar-maximized\" | \"button\" | \"button-arrow-down\" | \"button-arrow-next\" | \"button-arrow-previous\" | \"button-arrow-up\" | \"button-bevel\" | \"button-focus\" | \"caret\" | \"checkbox\" | \"checkbox-container\" | \"checkbox-label\" | \"checkmenuitem\" | \"dualbutton\" | \"groupbox\" | \"listbox\" | \"listitem\" | \"menuarrow\" | \"menubar\" | \"menucheckbox\" | \"menuimage\" | \"menuitem\" | \"menuitemtext\" | \"menulist\" | \"menulist-button\" | \"menulist-text\" | \"menulist-textfield\" | \"menupopup\" | \"menuradio\" | \"menuseparator\" | \"meterbar\" | \"meterchunk\" | \"none\" | \"progressbar\" | \"progressbar-vertical\" | \"progresschunk\" | \"progresschunk-vertical\" | \"radio\" | \"radio-container\" | \"radio-label\" | \"radiomenuitem\" | \"range\" | \"range-thumb\" | \"resizer\" | \"resizerpanel\" | \"scale-horizontal\" | \"scale-vertical\" | \"scalethumb-horizontal\" | \"scalethumb-vertical\" | \"scalethumbend\" | \"scalethumbstart\" | \"scalethumbtick\" | \"scrollbarbutton-down\" | \"scrollbarbutton-left\" | \"scrollbarbutton-right\" | \"scrollbarbutton-up\" | \"scrollbarthumb-horizontal\" | \"scrollbarthumb-vertical\" | \"scrollbartrack-horizontal\" | \"scrollbartrack-vertical\" | \"searchfield\" | \"separator\" | \"sheet\" | \"spinner\" | \"spinner-downbutton\" | \"spinner-textfield\" | \"spinner-upbutton\" | \"splitter\" | \"statusbar\" | \"statusbarpanel\" | \"tab\" | \"tab-scroll-arrow-back\" | \"tab-scroll-arrow-forward\" | \"tabpanel\" | \"tabpanels\" | \"textfield\" | \"textfield-multiline\" | \"toolbar\" | \"toolbarbutton\" | \"toolbarbutton-dropdown\" | \"toolbargripper\" | \"toolbox\" | \"tooltip\" | \"treeheader\" | \"treeheadercell\" | \"treeheadersortarrow\" | \"treeitem\" | \"treeline\" | \"treetwisty\" | \"treetwistyopen\" | \"treeview\";\n        type MozBinding = Globals | \"none\" | (string & {});\n        type MozBorderBottomColors = Globals | DataType.Color | \"none\" | (string & {});\n        type MozBorderLeftColors = Globals | DataType.Color | \"none\" | (string & {});\n        type MozBorderRightColors = Globals | DataType.Color | \"none\" | (string & {});\n        type MozBorderTopColors = Globals | DataType.Color | \"none\" | (string & {});\n        type MozContextProperties = Globals | \"fill\" | \"fill-opacity\" | \"none\" | \"stroke\" | \"stroke-opacity\" | (string & {});\n        type MozFloatEdge = Globals | \"border-box\" | \"content-box\" | \"margin-box\" | \"padding-box\";\n        type MozForceBrokenImageIcon = Globals | 0 | (string & {}) | 1;\n        type MozImageRegion = Globals | \"auto\" | (string & {});\n        type MozOrient = Globals | \"block\" | \"horizontal\" | \"inline\" | \"vertical\";\n        type MozOutlineRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type MozOutlineRadiusBottomleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type MozOutlineRadiusBottomright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type MozOutlineRadiusTopleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type MozOutlineRadiusTopright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type MozStackSizing = Globals | \"ignore\" | \"stretch-to-fit\";\n        type MozTextBlink = Globals | \"blink\" | \"none\";\n        type MozUserFocus = Globals | \"ignore\" | \"none\" | \"normal\" | \"select-after\" | \"select-all\" | \"select-before\" | \"select-menu\" | \"select-same\";\n        type MozUserInput = Globals | \"auto\" | \"disabled\" | \"enabled\" | \"none\";\n        type MozUserModify = Globals | \"read-only\" | \"read-write\" | \"write-only\";\n        type MozWindowDragging = Globals | \"drag\" | \"no-drag\";\n        type MozWindowShadow = Globals | \"default\" | \"menu\" | \"none\" | \"sheet\" | \"tooltip\";\n        type MsAccelerator = Globals | \"false\" | \"true\";\n        type MsBlockProgression = Globals | \"bt\" | \"lr\" | \"rl\" | \"tb\";\n        type MsContentZoomChaining = Globals | \"chained\" | \"none\";\n        type MsContentZoomLimit = Globals | (string & {});\n        type MsContentZoomLimitMax = Globals | (string & {});\n        type MsContentZoomLimitMin = Globals | (string & {});\n        type MsContentZoomSnap = Globals | \"mandatory\" | \"none\" | \"proximity\" | (string & {});\n        type MsContentZoomSnapPoints = Globals | (string & {});\n        type MsContentZoomSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n        type MsContentZooming = Globals | \"none\" | \"zoom\";\n        type MsFilter = Globals | (string & {});\n        type MsFlowFrom = Globals | \"none\" | (string & {});\n        type MsFlowInto = Globals | \"none\" | (string & {});\n        type MsGridColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n        type MsGridRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n        type MsHighContrastAdjust = Globals | \"auto\" | \"none\";\n        type MsHyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n        type MsHyphenateLimitLines = Globals | \"no-limit\" | (number & {}) | (string & {});\n        type MsHyphenateLimitZone<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type MsImeAlign = Globals | \"after\" | \"auto\";\n        type MsOverflowStyle = Globals | \"-ms-autohiding-scrollbar\" | \"auto\" | \"none\" | \"scrollbar\";\n        type MsScrollChaining = Globals | \"chained\" | \"none\";\n        type MsScrollLimit = Globals | (string & {});\n        type MsScrollLimitXMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n        type MsScrollLimitXMin<TLength = (string & {}) | 0> = Globals | TLength;\n        type MsScrollLimitYMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n        type MsScrollLimitYMin<TLength = (string & {}) | 0> = Globals | TLength;\n        type MsScrollRails = Globals | \"none\" | \"railed\";\n        type MsScrollSnapPointsX = Globals | (string & {});\n        type MsScrollSnapPointsY = Globals | (string & {});\n        type MsScrollSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n        type MsScrollSnapX = Globals | (string & {});\n        type MsScrollSnapY = Globals | (string & {});\n        type MsScrollTranslation = Globals | \"none\" | \"vertical-to-horizontal\";\n        type MsScrollbar3dlightColor = Globals | DataType.Color;\n        type MsScrollbarArrowColor = Globals | DataType.Color;\n        type MsScrollbarBaseColor = Globals | DataType.Color;\n        type MsScrollbarDarkshadowColor = Globals | DataType.Color;\n        type MsScrollbarFaceColor = Globals | DataType.Color;\n        type MsScrollbarHighlightColor = Globals | DataType.Color;\n        type MsScrollbarShadowColor = Globals | DataType.Color;\n        type MsTextAutospace = Globals | \"ideograph-alpha\" | \"ideograph-numeric\" | \"ideograph-parenthesis\" | \"ideograph-space\" | \"none\";\n        type MsTouchSelect = Globals | \"grippers\" | \"none\";\n        type MsUserSelect = Globals | \"element\" | \"none\" | \"text\";\n        type MsWrapFlow = Globals | \"auto\" | \"both\" | \"clear\" | \"end\" | \"maximum\" | \"start\";\n        type MsWrapMargin<TLength = (string & {}) | 0> = Globals | TLength;\n        type MsWrapThrough = Globals | \"none\" | \"wrap\";\n        type WebkitAppearance = Globals | \"-apple-pay-button\" | \"button\" | \"button-bevel\" | \"caret\" | \"checkbox\" | \"default-button\" | \"inner-spin-button\" | \"listbox\" | \"listitem\" | \"media-controls-background\" | \"media-controls-fullscreen-background\" | \"media-current-time-display\" | \"media-enter-fullscreen-button\" | \"media-exit-fullscreen-button\" | \"media-fullscreen-button\" | \"media-mute-button\" | \"media-overlay-play-button\" | \"media-play-button\" | \"media-seek-back-button\" | \"media-seek-forward-button\" | \"media-slider\" | \"media-sliderthumb\" | \"media-time-remaining-display\" | \"media-toggle-closed-captions-button\" | \"media-volume-slider\" | \"media-volume-slider-container\" | \"media-volume-sliderthumb\" | \"menulist\" | \"menulist-button\" | \"menulist-text\" | \"menulist-textfield\" | \"meter\" | \"none\" | \"progress-bar\" | \"progress-bar-value\" | \"push-button\" | \"radio\" | \"searchfield\" | \"searchfield-cancel-button\" | \"searchfield-decoration\" | \"searchfield-results-button\" | \"searchfield-results-decoration\" | \"slider-horizontal\" | \"slider-vertical\" | \"sliderthumb-horizontal\" | \"sliderthumb-vertical\" | \"square-button\" | \"textarea\" | \"textfield\";\n        type WebkitBorderBefore<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n        type WebkitBorderBeforeColor = Globals | DataType.Color;\n        type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (string & {});\n        type WebkitBorderBeforeWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n        type WebkitBoxReflect<TLength = (string & {}) | 0> = Globals | TLength | \"above\" | \"below\" | \"left\" | \"right\" | (string & {});\n        type WebkitLineClamp = Globals | \"none\" | (number & {}) | (string & {});\n        type WebkitMask<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | DataType.RepeatStyle | DataType.Box | \"border\" | \"content\" | \"none\" | \"padding\" | \"text\" | (string & {});\n        type WebkitMaskAttachment = Globals | DataType.Attachment | (string & {});\n        type WebkitMaskClip = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | \"text\" | (string & {});\n        type WebkitMaskComposite = Globals | DataType.CompositeStyle | (string & {});\n        type WebkitMaskImage = Globals | \"none\" | (string & {});\n        type WebkitMaskOrigin = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | (string & {});\n        type WebkitMaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n        type WebkitMaskPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | (string & {});\n        type WebkitMaskPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | (string & {});\n        type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n        type WebkitMaskRepeatX = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n        type WebkitMaskRepeatY = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n        type WebkitMaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n        type WebkitOverflowScrolling = Globals | \"auto\" | \"touch\";\n        type WebkitTapHighlightColor = Globals | DataType.Color;\n        type WebkitTextFillColor = Globals | DataType.Color;\n        type WebkitTextStroke<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | (string & {});\n        type WebkitTextStrokeColor = Globals | DataType.Color;\n        type WebkitTextStrokeWidth<TLength = (string & {}) | 0> = Globals | TLength;\n        type WebkitTouchCallout = Globals | \"default\" | \"none\";\n        type WebkitUserModify = Globals | \"read-only\" | \"read-write\" | \"read-write-plaintext-only\";\n        type AlignmentBaseline = Globals | \"after-edge\" | \"alphabetic\" | \"auto\" | \"baseline\" | \"before-edge\" | \"central\" | \"hanging\" | \"ideographic\" | \"mathematical\" | \"middle\" | \"text-after-edge\" | \"text-before-edge\";\n        type BaselineShift<TLength = (string & {}) | 0> = Globals | TLength | \"baseline\" | \"sub\" | \"super\" | (string & {});\n        type ClipRule = Globals | \"evenodd\" | \"nonzero\";\n        type ColorInterpolation = Globals | \"auto\" | \"linearRGB\" | \"sRGB\";\n        type ColorRendering = Globals | \"auto\" | \"optimizeQuality\" | \"optimizeSpeed\";\n        type DominantBaseline = Globals | \"alphabetic\" | \"auto\" | \"central\" | \"hanging\" | \"ideographic\" | \"mathematical\" | \"middle\" | \"no-change\" | \"reset-size\" | \"text-after-edge\" | \"text-before-edge\" | \"use-script\";\n        type Fill = Globals | DataType.Paint;\n        type FillOpacity = Globals | (number & {}) | (string & {});\n        type FillRule = Globals | \"evenodd\" | \"nonzero\";\n        type FloodColor = Globals | DataType.Color | \"currentColor\";\n        type FloodOpacity = Globals | (number & {}) | (string & {});\n        type GlyphOrientationVertical = Globals | \"auto\" | (string & {}) | (number & {});\n        type LightingColor = Globals | DataType.Color | \"currentColor\";\n        type Marker = Globals | \"none\" | (string & {});\n        type MarkerEnd = Globals | \"none\" | (string & {});\n        type MarkerMid = Globals | \"none\" | (string & {});\n        type MarkerStart = Globals | \"none\" | (string & {});\n        type ShapeRendering = Globals | \"auto\" | \"crispEdges\" | \"geometricPrecision\" | \"optimizeSpeed\";\n        type StopColor = Globals | DataType.Color | \"currentColor\";\n        type StopOpacity = Globals | (number & {}) | (string & {});\n        type Stroke = Globals | DataType.Paint;\n        type StrokeDasharray<TLength = (string & {}) | 0> = Globals | DataType.Dasharray<TLength> | \"none\";\n        type StrokeDashoffset<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type StrokeLinecap = Globals | \"butt\" | \"round\" | \"square\";\n        type StrokeLinejoin = Globals | \"bevel\" | \"miter\" | \"round\";\n        type StrokeMiterlimit = Globals | (number & {}) | (string & {});\n        type StrokeOpacity = Globals | (number & {}) | (string & {});\n        type StrokeWidth<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n        type TextAnchor = Globals | \"end\" | \"middle\" | \"start\";\n        type VectorEffect = Globals | \"non-scaling-stroke\" | \"none\";\n    }\n    export namespace AtRule {\n        export interface CounterStyle<TLength = (string & {}) | 0, TTime = string & {}> {\n            additiveSymbols?: string | undefined;\n            fallback?: string | undefined;\n            negative?: string | undefined;\n            pad?: string | undefined;\n            prefix?: string | undefined;\n            range?: Range | undefined;\n            speakAs?: SpeakAs | undefined;\n            suffix?: string | undefined;\n            symbols?: string | undefined;\n            system?: System | undefined;\n        }\n        export interface CounterStyleHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n            \"additive-symbols\"?: string | undefined;\n            fallback?: string | undefined;\n            negative?: string | undefined;\n            pad?: string | undefined;\n            prefix?: string | undefined;\n            range?: Range | undefined;\n            \"speak-as\"?: SpeakAs | undefined;\n            suffix?: string | undefined;\n            symbols?: string | undefined;\n            system?: System | undefined;\n        }\n        export type CounterStyleFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyle<TLength, TTime>>;\n        export type CounterStyleHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyleHyphen<TLength, TTime>>;\n        export interface FontFace<TLength = (string & {}) | 0, TTime = string & {}> {\n            MozFontFeatureSettings?: FontFeatureSettings | undefined;\n            ascentOverride?: AscentOverride | undefined;\n            descentOverride?: DescentOverride | undefined;\n            fontDisplay?: FontDisplay | undefined;\n            fontFamily?: string | undefined;\n            fontFeatureSettings?: FontFeatureSettings | undefined;\n            fontStretch?: FontStretch | undefined;\n            fontStyle?: FontStyle | undefined;\n            fontVariant?: FontVariant | undefined;\n            fontVariationSettings?: FontVariationSettings | undefined;\n            fontWeight?: FontWeight | undefined;\n            lineGapOverride?: LineGapOverride | undefined;\n            sizeAdjust?: string | undefined;\n            src?: string | undefined;\n            unicodeRange?: string | undefined;\n        }\n        export interface FontFaceHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n            \"-moz-font-feature-settings\"?: FontFeatureSettings | undefined;\n            \"ascent-override\"?: AscentOverride | undefined;\n            \"descent-override\"?: DescentOverride | undefined;\n            \"font-display\"?: FontDisplay | undefined;\n            \"font-family\"?: string | undefined;\n            \"font-feature-settings\"?: FontFeatureSettings | undefined;\n            \"font-stretch\"?: FontStretch | undefined;\n            \"font-style\"?: FontStyle | undefined;\n            \"font-variant\"?: FontVariant | undefined;\n            \"font-variation-settings\"?: FontVariationSettings | undefined;\n            \"font-weight\"?: FontWeight | undefined;\n            \"line-gap-override\"?: LineGapOverride | undefined;\n            \"size-adjust\"?: string | undefined;\n            src?: string | undefined;\n            \"unicode-range\"?: string | undefined;\n        }\n        export type FontFaceFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFace<TLength, TTime>>;\n        export type FontFaceHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFaceHyphen<TLength, TTime>>;\n        export interface Page<TLength = (string & {}) | 0, TTime = string & {}> {\n            bleed?: Bleed<TLength> | undefined;\n            marks?: Marks | undefined;\n            size?: Size<TLength> | undefined;\n        }\n        export interface PageHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n            bleed?: Bleed<TLength> | undefined;\n            marks?: Marks | undefined;\n            size?: Size<TLength> | undefined;\n        }\n        export type PageFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Page<TLength, TTime>>;\n        export type PageHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PageHyphen<TLength, TTime>>;\n        export interface Property<TLength = (string & {}) | 0, TTime = string & {}> {\n            inherits?: Inherits | undefined;\n            initialValue?: string | undefined;\n            syntax?: string | undefined;\n        }\n        export interface PropertyHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n            inherits?: Inherits | undefined;\n            \"initial-value\"?: string | undefined;\n            syntax?: string | undefined;\n        }\n        export type PropertyFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Property<TLength, TTime>>;\n        export type PropertyHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PropertyHyphen<TLength, TTime>>;\n        export interface Viewport<TLength = (string & {}) | 0, TTime = string & {}> {\n            height?: Height<TLength> | undefined;\n            maxHeight?: MaxHeight<TLength> | undefined;\n            maxWidth?: MaxWidth<TLength> | undefined;\n            maxZoom?: MaxZoom | undefined;\n            minHeight?: MinHeight<TLength> | undefined;\n            minWidth?: MinWidth<TLength> | undefined;\n            minZoom?: MinZoom | undefined;\n            orientation?: Orientation | undefined;\n            userZoom?: UserZoom | undefined;\n            viewportFit?: ViewportFit | undefined;\n            width?: Width<TLength> | undefined;\n            zoom?: Zoom | undefined;\n        }\n        export interface ViewportHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n            height?: Height<TLength> | undefined;\n            \"max-height\"?: MaxHeight<TLength> | undefined;\n            \"max-width\"?: MaxWidth<TLength> | undefined;\n            \"max-zoom\"?: MaxZoom | undefined;\n            \"min-height\"?: MinHeight<TLength> | undefined;\n            \"min-width\"?: MinWidth<TLength> | undefined;\n            \"min-zoom\"?: MinZoom | undefined;\n            orientation?: Orientation | undefined;\n            \"user-zoom\"?: UserZoom | undefined;\n            \"viewport-fit\"?: ViewportFit | undefined;\n            width?: Width<TLength> | undefined;\n            zoom?: Zoom | undefined;\n        }\n        export type ViewportFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Viewport<TLength, TTime>>;\n        export type ViewportHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ViewportHyphen<TLength, TTime>>;\n        type Range = \"auto\" | (string & {});\n        type SpeakAs = \"auto\" | \"bullets\" | \"numbers\" | \"spell-out\" | \"words\" | (string & {});\n        type System = \"additive\" | \"alphabetic\" | \"cyclic\" | \"fixed\" | \"numeric\" | \"symbolic\" | (string & {});\n        type FontFeatureSettings = \"normal\" | (string & {});\n        type AscentOverride = \"normal\" | (string & {});\n        type DescentOverride = \"normal\" | (string & {});\n        type FontDisplay = \"auto\" | \"block\" | \"fallback\" | \"optional\" | \"swap\";\n        type FontStretch = DataType.FontStretchAbsolute | (string & {});\n        type FontStyle = \"italic\" | \"normal\" | \"oblique\" | (string & {});\n        type FontVariant = DataType.EastAsianVariantValues | \"all-petite-caps\" | \"all-small-caps\" | \"common-ligatures\" | \"contextual\" | \"diagonal-fractions\" | \"discretionary-ligatures\" | \"full-width\" | \"historical-forms\" | \"historical-ligatures\" | \"lining-nums\" | \"no-common-ligatures\" | \"no-contextual\" | \"no-discretionary-ligatures\" | \"no-historical-ligatures\" | \"none\" | \"normal\" | \"oldstyle-nums\" | \"ordinal\" | \"petite-caps\" | \"proportional-nums\" | \"proportional-width\" | \"ruby\" | \"slashed-zero\" | \"small-caps\" | \"stacked-fractions\" | \"tabular-nums\" | \"titling-caps\" | \"unicase\" | (string & {});\n        type FontVariationSettings = \"normal\" | (string & {});\n        type FontWeight = DataType.FontWeightAbsolute | (string & {});\n        type LineGapOverride = \"normal\" | (string & {});\n        type Bleed<TLength> = TLength | \"auto\";\n        type Marks = \"crop\" | \"cross\" | \"none\" | (string & {});\n        type Size<TLength> = DataType.PageSize | TLength | \"auto\" | \"landscape\" | \"portrait\" | (string & {});\n        type Inherits = \"false\" | \"true\";\n        type Height<TLength> = DataType.ViewportLength<TLength> | (string & {});\n        type MaxHeight<TLength> = DataType.ViewportLength<TLength>;\n        type MaxWidth<TLength> = DataType.ViewportLength<TLength>;\n        type MaxZoom = \"auto\" | (string & {}) | (number & {});\n        type MinHeight<TLength> = DataType.ViewportLength<TLength>;\n        type MinWidth<TLength> = DataType.ViewportLength<TLength>;\n        type MinZoom = \"auto\" | (string & {}) | (number & {});\n        type Orientation = \"auto\" | \"landscape\" | \"portrait\";\n        type UserZoom = \"fixed\" | \"zoom\";\n        type ViewportFit = \"auto\" | \"contain\" | \"cover\";\n        type Width<TLength> = DataType.ViewportLength<TLength> | (string & {});\n        type Zoom = \"auto\" | (string & {}) | (number & {});\n        export {};\n    }\n    namespace DataType {\n        type AbsoluteSize = \"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\";\n        type AnimateableFeature = \"contents\" | \"scroll-position\" | (string & {});\n        type Attachment = \"fixed\" | \"local\" | \"scroll\";\n        type BgPosition<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n        type BgSize<TLength> = TLength | \"auto\" | \"contain\" | \"cover\" | (string & {});\n        type BlendMode = \"color\" | \"color-burn\" | \"color-dodge\" | \"darken\" | \"difference\" | \"exclusion\" | \"hard-light\" | \"hue\" | \"lighten\" | \"luminosity\" | \"multiply\" | \"normal\" | \"overlay\" | \"saturation\" | \"screen\" | \"soft-light\";\n        type Box = \"border-box\" | \"content-box\" | \"padding-box\";\n        type Color = NamedColor | DeprecatedSystemColor | \"currentcolor\" | (string & {});\n        type CompatAuto = \"button\" | \"checkbox\" | \"listbox\" | \"menulist\" | \"meter\" | \"progress-bar\" | \"push-button\" | \"radio\" | \"searchfield\" | \"slider-horizontal\" | \"square-button\" | \"textarea\";\n        type CompositeStyle = \"clear\" | \"copy\" | \"destination-atop\" | \"destination-in\" | \"destination-out\" | \"destination-over\" | \"source-atop\" | \"source-in\" | \"source-out\" | \"source-over\" | \"xor\";\n        type CompositingOperator = \"add\" | \"exclude\" | \"intersect\" | \"subtract\";\n        type ContentDistribution = \"space-around\" | \"space-between\" | \"space-evenly\" | \"stretch\";\n        type ContentList = Quote | \"contents\" | (string & {});\n        type ContentPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\";\n        type CubicBezierTimingFunction = \"ease\" | \"ease-in\" | \"ease-in-out\" | \"ease-out\" | (string & {});\n        type Dasharray<TLength> = TLength | (string & {}) | (number & {});\n        type DeprecatedSystemColor = \"ActiveBorder\" | \"ActiveCaption\" | \"AppWorkspace\" | \"Background\" | \"ButtonFace\" | \"ButtonHighlight\" | \"ButtonShadow\" | \"ButtonText\" | \"CaptionText\" | \"GrayText\" | \"Highlight\" | \"HighlightText\" | \"InactiveBorder\" | \"InactiveCaption\" | \"InactiveCaptionText\" | \"InfoBackground\" | \"InfoText\" | \"Menu\" | \"MenuText\" | \"Scrollbar\" | \"ThreeDDarkShadow\" | \"ThreeDFace\" | \"ThreeDHighlight\" | \"ThreeDLightShadow\" | \"ThreeDShadow\" | \"Window\" | \"WindowFrame\" | \"WindowText\";\n        type DisplayInside = \"-ms-flexbox\" | \"-ms-grid\" | \"-webkit-flex\" | \"flex\" | \"flow\" | \"flow-root\" | \"grid\" | \"ruby\" | \"table\";\n        type DisplayInternal = \"ruby-base\" | \"ruby-base-container\" | \"ruby-text\" | \"ruby-text-container\" | \"table-caption\" | \"table-cell\" | \"table-column\" | \"table-column-group\" | \"table-footer-group\" | \"table-header-group\" | \"table-row\" | \"table-row-group\";\n        type DisplayLegacy = \"-ms-inline-flexbox\" | \"-ms-inline-grid\" | \"-webkit-inline-flex\" | \"inline-block\" | \"inline-flex\" | \"inline-grid\" | \"inline-list-item\" | \"inline-table\";\n        type DisplayOutside = \"block\" | \"inline\" | \"run-in\";\n        type EasingFunction = CubicBezierTimingFunction | StepTimingFunction | \"linear\";\n        type EastAsianVariantValues = \"jis04\" | \"jis78\" | \"jis83\" | \"jis90\" | \"simplified\" | \"traditional\";\n        type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | \"none\" | (string & {});\n        type FontStretchAbsolute = \"condensed\" | \"expanded\" | \"extra-condensed\" | \"extra-expanded\" | \"normal\" | \"semi-condensed\" | \"semi-expanded\" | \"ultra-condensed\" | \"ultra-expanded\" | (string & {});\n        type FontWeightAbsolute = \"bold\" | \"normal\" | (number & {}) | (string & {});\n        type GenericFamily = \"cursive\" | \"fantasy\" | \"monospace\" | \"sans-serif\" | \"serif\";\n        type GeometryBox = Box | \"fill-box\" | \"margin-box\" | \"stroke-box\" | \"view-box\";\n        type GridLine = \"auto\" | (string & {}) | (number & {});\n        type LineStyle = \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"hidden\" | \"inset\" | \"none\" | \"outset\" | \"ridge\" | \"solid\";\n        type LineWidth<TLength> = TLength | \"medium\" | \"thick\" | \"thin\";\n        type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | \"no-clip\" | \"none\" | (string & {});\n        type MaskingMode = \"alpha\" | \"luminance\" | \"match-source\";\n        type NamedColor = \"aliceblue\" | \"antiquewhite\" | \"aqua\" | \"aquamarine\" | \"azure\" | \"beige\" | \"bisque\" | \"black\" | \"blanchedalmond\" | \"blue\" | \"blueviolet\" | \"brown\" | \"burlywood\" | \"cadetblue\" | \"chartreuse\" | \"chocolate\" | \"coral\" | \"cornflowerblue\" | \"cornsilk\" | \"crimson\" | \"cyan\" | \"darkblue\" | \"darkcyan\" | \"darkgoldenrod\" | \"darkgray\" | \"darkgreen\" | \"darkgrey\" | \"darkkhaki\" | \"darkmagenta\" | \"darkolivegreen\" | \"darkorange\" | \"darkorchid\" | \"darkred\" | \"darksalmon\" | \"darkseagreen\" | \"darkslateblue\" | \"darkslategray\" | \"darkslategrey\" | \"darkturquoise\" | \"darkviolet\" | \"deeppink\" | \"deepskyblue\" | \"dimgray\" | \"dimgrey\" | \"dodgerblue\" | \"firebrick\" | \"floralwhite\" | \"forestgreen\" | \"fuchsia\" | \"gainsboro\" | \"ghostwhite\" | \"gold\" | \"goldenrod\" | \"gray\" | \"green\" | \"greenyellow\" | \"grey\" | \"honeydew\" | \"hotpink\" | \"indianred\" | \"indigo\" | \"ivory\" | \"khaki\" | \"lavender\" | \"lavenderblush\" | \"lawngreen\" | \"lemonchiffon\" | \"lightblue\" | \"lightcoral\" | \"lightcyan\" | \"lightgoldenrodyellow\" | \"lightgray\" | \"lightgreen\" | \"lightgrey\" | \"lightpink\" | \"lightsalmon\" | \"lightseagreen\" | \"lightskyblue\" | \"lightslategray\" | \"lightslategrey\" | \"lightsteelblue\" | \"lightyellow\" | \"lime\" | \"limegreen\" | \"linen\" | \"magenta\" | \"maroon\" | \"mediumaquamarine\" | \"mediumblue\" | \"mediumorchid\" | \"mediumpurple\" | \"mediumseagreen\" | \"mediumslateblue\" | \"mediumspringgreen\" | \"mediumturquoise\" | \"mediumvioletred\" | \"midnightblue\" | \"mintcream\" | \"mistyrose\" | \"moccasin\" | \"navajowhite\" | \"navy\" | \"oldlace\" | \"olive\" | \"olivedrab\" | \"orange\" | \"orangered\" | \"orchid\" | \"palegoldenrod\" | \"palegreen\" | \"paleturquoise\" | \"palevioletred\" | \"papayawhip\" | \"peachpuff\" | \"peru\" | \"pink\" | \"plum\" | \"powderblue\" | \"purple\" | \"rebeccapurple\" | \"red\" | \"rosybrown\" | \"royalblue\" | \"saddlebrown\" | \"salmon\" | \"sandybrown\" | \"seagreen\" | \"seashell\" | \"sienna\" | \"silver\" | \"skyblue\" | \"slateblue\" | \"slategray\" | \"slategrey\" | \"snow\" | \"springgreen\" | \"steelblue\" | \"tan\" | \"teal\" | \"thistle\" | \"tomato\" | \"transparent\" | \"turquoise\" | \"violet\" | \"wheat\" | \"white\" | \"whitesmoke\" | \"yellow\" | \"yellowgreen\";\n        type PageSize = \"A3\" | \"A4\" | \"A5\" | \"B4\" | \"B5\" | \"JIS-B4\" | \"JIS-B5\" | \"ledger\" | \"legal\" | \"letter\";\n        type Paint = Color | \"child\" | \"context-fill\" | \"context-stroke\" | \"none\" | (string & {});\n        type Position<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n        type Quote = \"close-quote\" | \"no-close-quote\" | \"no-open-quote\" | \"open-quote\";\n        type RepeatStyle = \"no-repeat\" | \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"round\" | \"space\" | (string & {});\n        type SelfPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"self-end\" | \"self-start\" | \"start\";\n        type SingleAnimation<TTime> = EasingFunction | SingleAnimationDirection | SingleAnimationFillMode | TTime | \"infinite\" | \"none\" | \"paused\" | \"running\" | (string & {}) | (number & {});\n        type SingleAnimationDirection = \"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\";\n        type SingleAnimationFillMode = \"backwards\" | \"both\" | \"forwards\" | \"none\";\n        type SingleTransition<TTime> = EasingFunction | TTime | \"all\" | \"none\" | (string & {});\n        type StepTimingFunction = \"step-end\" | \"step-start\" | (string & {});\n        type TrackBreadth<TLength> = TLength | \"auto\" | \"max-content\" | \"min-content\" | (string & {});\n        type ViewportLength<TLength> = TLength | \"auto\" | (string & {});\n        type VisualBox = \"border-box\" | \"content-box\" | \"padding-box\";\n    }\n}\ndeclare module \"packages/style/src/types\" {\n    import * as CSS from \"packages/style/src/csstype\";\n    export type TLength = number | string;\n    export interface CSSProperties extends CSS.StandardPropertiesFallback<TLength>, CSS.SvgPropertiesFallback<TLength>, CSS.VendorPropertiesHyphenFallback<TLength>, CSS.ObsoletePropertiesFallback<TLength> {\n        $unique?: boolean;\n    }\n    export interface FontFace extends CSS.AtRule.FontFace {\n    }\n    export type CSSClasses<K extends string> = Record<K, NestedCSSProperties>;\n    export type CSSClassNames<K extends string> = Record<K, string>;\n    export interface NestedCSSProperties extends CSSProperties {\n        $nest?: NestedCSSSelectors;\n        $debugName?: string;\n    }\n    export type MediaQuery = {\n        type?: 'screen' | 'print' | 'all';\n        orientation?: 'landscape' | 'portrait';\n        minWidth?: number | string;\n        maxWidth?: number | string;\n        minHeight?: number | string;\n        maxHeight?: number | string;\n    };\n    export type NestedCSSSelectors = {\n        '&:active'?: NestedCSSProperties;\n        '&:any'?: NestedCSSProperties;\n        '&:checked'?: NestedCSSProperties;\n        '&:default'?: NestedCSSProperties;\n        '&:disabled'?: NestedCSSProperties;\n        '&:empty'?: NestedCSSProperties;\n        '&:enabled'?: NestedCSSProperties;\n        '&:first'?: NestedCSSProperties;\n        '&:first-child'?: NestedCSSProperties;\n        '&:first-of-type'?: NestedCSSProperties;\n        '&:fullscreen'?: NestedCSSProperties;\n        '&:focus'?: NestedCSSProperties;\n        '&:hover'?: NestedCSSProperties;\n        '&:indeterminate'?: NestedCSSProperties;\n        '&:in-range'?: NestedCSSProperties;\n        '&:invalid'?: NestedCSSProperties;\n        '&:last-child'?: NestedCSSProperties;\n        '&:last-of-type'?: NestedCSSProperties;\n        '&:left'?: NestedCSSProperties;\n        '&:link'?: NestedCSSProperties;\n        '&:only-child'?: NestedCSSProperties;\n        '&:only-of-type'?: NestedCSSProperties;\n        '&:optional'?: NestedCSSProperties;\n        '&:out-of-range'?: NestedCSSProperties;\n        '&:read-only'?: NestedCSSProperties;\n        '&:read-write'?: NestedCSSProperties;\n        '&:required'?: NestedCSSProperties;\n        '&:right'?: NestedCSSProperties;\n        '&:root'?: NestedCSSProperties;\n        '&:scope'?: NestedCSSProperties;\n        '&:target'?: NestedCSSProperties;\n        '&:valid'?: NestedCSSProperties;\n        '&:visited'?: NestedCSSProperties;\n        '&::after'?: NestedCSSProperties;\n        '&::before'?: NestedCSSProperties;\n        '&::first-letter'?: NestedCSSProperties;\n        '&::first-line'?: NestedCSSProperties;\n        '&::selection'?: NestedCSSProperties;\n        '&::backdrop'?: NestedCSSProperties;\n        '&::placeholder'?: NestedCSSProperties;\n        '&::marker'?: NestedCSSProperties;\n        '&::spelling-error'?: NestedCSSProperties;\n        '&::grammar-error'?: NestedCSSProperties;\n        '&>*'?: NestedCSSProperties;\n        '@media screen and (min-width: 700px)'?: NestedCSSProperties;\n        '@media screen and (max-width: 700px)'?: NestedCSSProperties;\n        [selector: string]: NestedCSSProperties | undefined;\n    };\n    export interface KeyFrames {\n        $debugName?: string;\n        [key: string]: CSSProperties | string | undefined;\n    }\n}\ndeclare module \"packages/style/src/formatting\" {\n    import * as types from \"packages/style/src/types\";\n    import { Styles } from \"packages/style/src/styles\";\n    export function convertToStyles(object: types.NestedCSSProperties): Styles;\n    export function convertToKeyframes(frames: types.KeyFrames): Styles;\n}\ndeclare module \"packages/style/src/utilities\" {\n    import { MediaQuery, NestedCSSProperties } from \"packages/style/src/types\";\n    export const raf: (cb: () => void) => void;\n    export function classes(...classes: (string | false | undefined | null | {\n        [className: string]: any;\n    })[]): string;\n    export function extend(...objects: (NestedCSSProperties | undefined | null | false)[]): NestedCSSProperties;\n    export const media: (mediaQuery: MediaQuery, ...objects: (NestedCSSProperties | undefined | null | false)[]) => NestedCSSProperties;\n}\ndeclare module \"packages/style/src/typestyle\" {\n    import * as types from \"packages/style/src/types\";\n    export type StylesTarget = {\n        textContent: string | null;\n    };\n    export class TypeStyle {\n        private _autoGenerateTag;\n        private _freeStyle;\n        private _pending;\n        private _pendingRawChange;\n        private _raw;\n        private _tag?;\n        private _lastFreeStyleChangeId;\n        constructor({ autoGenerateTag }: {\n            autoGenerateTag: boolean;\n        });\n        private _afterAllSync;\n        private _getTag;\n        private _styleUpdated;\n        cssRaw: (mustBeValidCSS: string) => void;\n        cssRule: (selector: string, ...objects: types.NestedCSSProperties[]) => void;\n        forceRenderStyles: () => void;\n        fontFace: (...fontFace: types.FontFace[]) => void;\n        getStyles: () => string;\n        keyframes: (frames: types.KeyFrames) => string;\n        reinit: () => void;\n        setStylesTarget: (tag: StylesTarget) => void;\n        style(...objects: (types.NestedCSSProperties | undefined)[]): string;\n        style(...objects: (types.NestedCSSProperties | null | false | undefined)[]): string;\n        stylesheet: <Classes extends string>(classes: types.CSSClasses<Classes>) => { [ClassName in Classes]: string; };\n    }\n    export const typeStyle: TypeStyle;\n}\ndeclare module \"packages/style/src/snippets\" {\n    export function rotate(degree: number): string;\n}\ndeclare module \"packages/style/src/index\" {\n    export * as Theme from \"packages/style/src/theme\";\n    export { Colors } from \"packages/style/src/colors\";\n    export const cssRaw: (mustBeValidCSS: string) => void;\n    export const cssRule: (selector: string, ...objects: import(\"packages/style/src/types\").NestedCSSProperties[]) => void;\n    export const fontFace: (...fontFace: import(\"packages/style/src/types\").FontFace[]) => void;\n    export { rotate } from \"packages/style/src/snippets\";\n    export const keyframes: (frames: import(\"packages/style/src/types\").KeyFrames) => string;\n    export const style: {\n        (...objects: (import(\"packages/style/src/types\").NestedCSSProperties | undefined)[]): string;\n        (...objects: (false | import(\"packages/style/src/types\").NestedCSSProperties | null | undefined)[]): string;\n    };\n}\ndeclare module \"packages/base/src/observable\" {\n    export function isObservable(input: any): boolean;\n    export interface ObserverOptions {\n        path?: string;\n        pathsOf?: string;\n        pathFrom?: string;\n    }\n    export interface ObserverChange {\n        type?: string;\n        path?: string[];\n        value?: any;\n        oldValue?: any;\n        object?: any;\n    }\n    export type ObserverCallback = (changes: ObserverChange[]) => void;\n    export function Observe(target: any, callback?: ObserverCallback, options?: ObserverOptions): any;\n    export function Unobserve(target: any, observer: ObserverCallback): void;\n    export function ClearObservers(target: any): void;\n    export function observable(propName?: string): (target: any, propertyName: string) => void;\n    export function initObservables(target: any): void;\n    export function Observables(target: any, propertyName?: string): any;\n}\ndeclare module \"packages/base/src/component\" {\n    import { IDataSchema } from \"packages/application/src/index\";\n    export interface IFont {\n        name?: string;\n        size?: string;\n        color?: string;\n        bold?: boolean;\n        italic?: boolean;\n        style?: FontStyle;\n        transform?: TextTransform;\n        underline?: boolean;\n        weight?: number | string;\n    }\n    export interface ISpace {\n        top?: string | number;\n        right?: string | number;\n        bottom?: string | number;\n        left?: string | number;\n    }\n    export type BorderSides = 'top' | 'right' | 'bottom' | 'left';\n    export interface IStack {\n        basis?: string;\n        grow?: string;\n        shrink?: string;\n    }\n    export type FontStyle = 'normal' | 'italic' | 'oblique' | 'initial' | 'inherit';\n    export type TextTransform = 'capitalize' | 'uppercase' | 'lowercase' | 'full-width' | 'full-size-kana' | 'inherit' | 'initial' | 'revert' | 'revert-layer' | 'unset';\n    export type WrapType = 'nowrap' | 'wrap' | 'wrap-reverse' | 'initial' | 'inherit';\n    export type OverflowType = 'visible' | 'hidden' | 'clip' | 'scroll' | 'auto' | 'initial' | 'inherit' | 'unset';\n    export type CursorType = \"auto\" | \"default\" | \"none\" | \"context-menu\" | \"help\" | \"pointer\" | \"progress\" | \"wait\" | \"cell\" | \"crosshair\" | \"text\" | \"vertical-text\" | \"alias\" | \"copy\" | \"move\" | \"no-drop\" | \"not-allowed\" | \"grab\" | \"grabbing\" | \"e-resize\" | \"n-resize\" | \"ne-resize\" | \"nw-resize\" | \"s-resize\" | \"se-resize\" | \"sw-resize\" | \"w-resize\" | \"ew-resize\" | \"ns-resize\" | \"nesw-resize\" | \"nwse-resize\" | \"col-resize\" | \"row-resize\" | \"all-scroll\" | \"zoom-in\" | \"zoom-out\";\n    export interface IOverflow {\n        x?: OverflowType;\n        y?: OverflowType;\n    }\n    export interface IAnchor {\n        top?: boolean;\n        right?: boolean;\n        bottom?: boolean;\n        left?: boolean;\n    }\n    export interface IBackground {\n        color?: string;\n        image?: string;\n    }\n    export const enum ComponentPropertyType {\n        string = 1,\n        number = 2,\n        boolean = 3,\n        object = 4,\n        array = 5,\n        event = 6\n    }\n    export interface ICustomEventParam {\n        name: string;\n        type: string;\n        isControl?: boolean;\n    }\n    export const notifyEventParams: ICustomEventParam[];\n    export interface ICustomProp {\n        type: 'string' | 'number' | 'boolean' | 'object' | 'array';\n        values?: any[];\n        default?: string | number | boolean | object;\n    }\n    export enum GroupType {\n        'BASIC' = \"Basic\",\n        'LAYOUT' = \"Layout\",\n        'FIELDS' = \"Fields\"\n    }\n    export interface ICustomProperties {\n        icon?: string;\n        tagName?: string;\n        className?: string;\n        props: {\n            [name: string]: ICustomProp;\n        };\n        events: {\n            [name: string]: ICustomEventParam[];\n        };\n        dataSchema?: IDataSchema;\n        group?: GroupType;\n    }\n    export const ComponentProperty: ICustomProperties;\n    export class Component extends HTMLElement {\n        protected connected: boolean;\n        protected _parent: Component | undefined;\n        protected _height: number | string;\n        protected _top: number | string;\n        protected _width: number | string;\n        protected _left: number | string;\n        protected _bottom: number | string;\n        protected options: any;\n        protected defaults: any;\n        protected deferReadyCallback: boolean;\n        protected _readyCallback: any[];\n        initializing: boolean;\n        initialized: boolean;\n        protected attrs: any;\n        protected _designProps: {\n            [prop: string]: string | number | boolean | object;\n        };\n        private _propInfo;\n        protected _uuid: string;\n        constructor(parent?: Component, options?: any, defaults?: any);\n        connectedCallback(): void;\n        disconnectedCallback(): void;\n        protected parseDesignPropValue(value: string): any;\n        _getDesignPropValue(prop: string): string | number | boolean | object | any[];\n        _setDesignPropValue(prop: string, value: string | number | boolean | object, breakpointProp?: any): void;\n        _setDesignProps(props: {\n            [prop: string]: string;\n        }, breakpoint?: {\n            [prop: string]: string;\n        }): void;\n        _getDesignProps(): {\n            [prop: string]: string | number | boolean | object;\n        };\n        createElement(tagName: string, parentElm?: HTMLElement): HTMLElement;\n        getAttributeValue(target: any, paths: string[], idx?: number): any;\n        getAttribute(name: string, removeAfter?: boolean, defaultValue?: any): any;\n        getPositionAttribute(name: string, removeAfter?: boolean, defaultValue?: any): number;\n        getStyleAttribute(name: string, removeAfter?: boolean, defaultValue?: any): string;\n        get uuid(): string;\n        get id(): string;\n        set id(value: string);\n        ready(): Promise<void>;\n        protected executeReadyCallback(): void;\n        protected init(): void;\n    }\n}\ndeclare module \"packages/base/src/style/base.css\" {\n    import { BorderStylesSideType, IBorder, IBorderSideStyles, IOverflow, IBackground, IControlMediaQuery, DisplayType, IMediaQuery } from \"@ijstech/components/base\";\n    export const disabledStyle: string;\n    export const containerStyle: string;\n    export const getBorderSideStyleClass: (side: BorderStylesSideType, value: IBorderSideStyles) => string;\n    export const getBorderStyleClass: (value: IBorder) => string;\n    export const getOverflowStyleClass: (value: IOverflow) => string;\n    export const getBackground: (value: IBackground) => {\n        background: string;\n    };\n    export const getBackgroundStyleClass: (value: IBackground) => string;\n    export const getSpacingValue: (value: string | number) => string | number;\n    export const getMediaQueryRule: (mediaQuery: IMediaQuery<any>) => string | undefined;\n    interface IProps {\n        display?: DisplayType;\n    }\n    export const getControlMediaQueriesStyle: (mediaQueries: IControlMediaQuery[], props?: IProps | undefined) => any;\n    export const getControlMediaQueriesStyleClass: (mediaQueries: IControlMediaQuery[], props: IProps) => string;\n    export const getOpacityStyleClass: (opacity: number | string) => string;\n}\ndeclare module \"packages/tooltip/src/style/tooltip.css\" { }\ndeclare module \"packages/tooltip/src/tooltip\" {\n    import { Control } from \"@ijstech/components/base\";\n    import \"packages/tooltip/src/style/tooltip.css\";\n    type PlacementType = 'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'leftTop' | 'leftBottom' | 'rightTop' | 'rightBottom';\n    type TriggerType = 'hover' | 'click';\n    export interface ITooltip {\n        content?: string;\n        popperClass?: string;\n        color?: string;\n        placement?: PlacementType;\n        trigger?: TriggerType;\n        maxWidth?: string;\n    }\n    export class Tooltip {\n        private _content;\n        private _popperClass;\n        private _placement;\n        private _color;\n        private _maxWidth;\n        private _trigger;\n        private timeout;\n        private tooltipElm;\n        constructor(source: Control);\n        private initData;\n        private positionAt;\n        get trigger(): TriggerType;\n        set trigger(value: TriggerType);\n        get popperClass(): string;\n        set popperClass(value: string);\n        get color(): string;\n        set color(value: string);\n        get content(): string;\n        set content(value: string);\n        get placement(): PlacementType;\n        set placement(value: PlacementType);\n        get maxWidth(): string;\n        set maxWidth(value: string);\n        private show;\n        close(): void;\n        private onHandleClick;\n        private renderTooltip;\n        private initEvents;\n    }\n}\ndeclare module \"packages/tooltip/src/index\" {\n    export { Tooltip, ITooltip } from \"packages/tooltip/src/tooltip\";\n}\ndeclare module \"packages/base/src/control\" {\n    import { Component, IStack, IFont, ISpace, IOverflow, OverflowType, IAnchor, IBackground, ICustomProperties, CursorType } from \"packages/base/src/component\";\n    import { notifyEventCallback, notifyMouseEventCallback, notifyKeyboardEventCallback, notifyGestureEventCallback } from \"@ijstech/components/base\";\n    export type DockStyle = 'none' | 'bottom' | 'center' | 'fill' | 'left' | 'right' | 'top';\n    export type LineHeightType = string | number | 'normal' | 'initial' | 'inherit';\n    export type DisplayType = 'inline-block' | 'block' | 'inline-flex' | 'flex' | 'inline' | 'initial' | 'inherit' | 'none' | '-webkit-box' | 'grid' | 'inline-grid';\n    export interface IMediaQuery<T> {\n        minWidth?: string | number;\n        maxWidth?: string | number;\n        properties: T;\n    }\n    export type SpaceProps = 'margin' | 'padding';\n    export class SpaceValue implements ISpace {\n        private _value;\n        private _prop;\n        private _owner;\n        constructor(owner: Control, value: ISpace, prop: SpaceProps);\n        get left(): string | number | undefined;\n        set left(value: string | number | undefined);\n        get top(): string | number | undefined;\n        set top(value: string | number | undefined);\n        get right(): string | number | undefined;\n        set right(value: string | number | undefined);\n        get bottom(): string | number | undefined;\n        set bottom(value: string | number | undefined);\n        getSpacingValue(value: string | number): string;\n        update(value?: ISpace): void;\n    }\n    export type PositionType = 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky' | 'inherit' | 'initial';\n    export type BorderStylesSideType = 'top' | 'right' | 'bottom' | 'left';\n    export type BorderStyleType = 'none' | 'hidden' | 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset';\n    export interface IBorderCornerStyles {\n        radius?: string | number;\n    }\n    export interface IBorderSideStyles {\n        width?: string | number;\n        style?: BorderStyleType;\n        color?: string;\n    }\n    export interface IBorder extends IBorderSideStyles, IBorderCornerStyles {\n        top?: IBorderSideStyles;\n        right?: IBorderSideStyles;\n        bottom?: IBorderSideStyles;\n        left?: IBorderSideStyles;\n        topLeft?: IBorderCornerStyles;\n        topRight?: IBorderCornerStyles;\n        bottomLeft?: IBorderCornerStyles;\n        bottomRight?: IBorderCornerStyles;\n    }\n    export class Border {\n        private _target;\n        private _styleClassMap;\n        private _radius;\n        private _width;\n        private _style;\n        private _color;\n        private _top;\n        private _right;\n        private _bottom;\n        private _left;\n        private _topLeft;\n        private _topRight;\n        private _bottomLeft;\n        private _bottomRight;\n        constructor(target: Control, options?: IBorder);\n        updateValue(options: IBorder): void;\n        private isNumber;\n        protected updateAllSidesProps(options: IBorder): void;\n        private removeStyles;\n        get radius(): string;\n        set radius(value: string | number);\n        get width(): string;\n        set width(value: string | number);\n        get style(): BorderStyleType;\n        set style(value: BorderStyleType);\n        get color(): string;\n        set color(value: string);\n        get top(): Readonly<IBorderSideStyles>;\n        set top(value: IBorderSideStyles);\n        get right(): Readonly<IBorderSideStyles>;\n        set right(value: IBorderSideStyles);\n        get bottom(): Readonly<IBorderSideStyles>;\n        set bottom(value: IBorderSideStyles);\n        get left(): Readonly<IBorderSideStyles>;\n        set left(value: IBorderSideStyles);\n        protected removeStyleClass(name: string): void;\n        protected setSideBorderStyles(side: BorderStylesSideType, value?: IBorderSideStyles): void;\n        protected setBorderStyles(value: IBorder): void;\n        private setBorderProp;\n    }\n    export interface IGrid {\n        column?: number;\n        columnSpan?: number;\n        row?: number;\n        rowSpan?: number;\n        horizontalAlignment?: \"stretch\" | \"start\" | \"end\" | \"center\";\n        verticalAlignment?: \"stretch\" | \"start\" | \"end\" | \"center\";\n        area?: string;\n    }\n    export class Overflow {\n        private _target;\n        private _value;\n        private _style;\n        constructor(target: Control, value?: IOverflow | OverflowType);\n        get x(): OverflowType;\n        set x(value: OverflowType);\n        get y(): OverflowType;\n        set y(value: OverflowType);\n        private updateValue;\n        setOverflowStyle(value?: IOverflow | OverflowType): void;\n    }\n    export class Background {\n        private _target;\n        private _value;\n        private _style;\n        constructor(target: Control, value?: IBackground);\n        get color(): string;\n        set color(value: string);\n        get image(): string;\n        set image(value: string);\n        private updateValue;\n        setBackgroundStyle(value?: IBackground): void;\n    }\n    export interface IControlMediaQueryProps {\n        padding?: ISpace;\n        margin?: ISpace;\n        border?: IBorder;\n        visible?: boolean;\n        display?: DisplayType;\n        background?: IBackground;\n        grid?: IGrid;\n        position?: PositionType;\n        top?: number | string;\n        left?: number | string;\n        right?: number | string;\n        bottom?: number | string;\n        zIndex?: string | number;\n        maxHeight?: string | number;\n        maxWidth?: string | number;\n        width?: number | string;\n        height?: number | string;\n        minWidth?: number | string;\n        minHeight?: number | string;\n        overflow?: IOverflow | OverflowType;\n        font?: IFont;\n        opacity?: string;\n        stack?: IStack;\n    }\n    export type IControlMediaQuery = IMediaQuery<IControlMediaQueryProps>;\n    export const ControlProperties: ICustomProperties;\n    export interface IContextMenu {\n        show(pos: {\n            x: number;\n            y: number;\n        }): void;\n    }\n    export class Control extends Component {\n        protected _controls: Control[];\n        protected _enabled: boolean;\n        protected _onClick: notifyMouseEventCallback;\n        protected _onContextMenu: notifyMouseEventCallback;\n        protected _onDblClick: notifyMouseEventCallback;\n        protected _onFocus: notifyEventCallback;\n        protected _onKeyDown: notifyKeyboardEventCallback;\n        protected _onKeyUp: notifyKeyboardEventCallback;\n        protected _onMouseDown: notifyGestureEventCallback;\n        protected _onMouseMove: notifyGestureEventCallback;\n        protected _onMouseUp: notifyGestureEventCallback;\n        protected _visible: boolean;\n        protected _margin: SpaceValue;\n        protected _padding: SpaceValue;\n        protected _stack: IStack;\n        protected _grid: IGrid;\n        protected _lineHeight: LineHeightType;\n        protected _parent: Control | undefined;\n        protected _dock: DockStyle;\n        protected _linkTo: Control;\n        protected _border: Border;\n        protected _overflow: Overflow;\n        protected _anchor: IAnchor;\n        protected _background: Background;\n        protected _resizer: ContainerResizer;\n        private _tooltip;\n        protected _font: IFont;\n        protected _display: DisplayType;\n        protected _cursor: CursorType;\n        protected _letterSpacing: string | number;\n        protected _boxShadow: string;\n        private _cmediaQueries;\n        protected _mediaStyle: string;\n        protected _contextMenuId: string | null;\n        protected _contextMenuControl: Control | null;\n        private _opacity;\n        protected _zIndex: string;\n        protected propertyClassMap: Record<string, string>;\n        _container?: HTMLElement;\n        tag: any;\n        protected static create(options?: any, parent?: Container, defaults?: any): Promise<Control>;\n        constructor(parent?: Control, options?: any, defaults?: any);\n        _setDesignPropValue(prop: string, value: string | number | boolean | object, breakpointProp?: any): void;\n        _getCustomProperties(): ICustomProperties;\n        private getMarginStyle;\n        private getPaddingStyle;\n        protected xssSanitize(value: string): string;\n        get contextMenu(): Control | null;\n        set contextMenu(value: string | Control | null);\n        get margin(): ISpace;\n        set margin(value: ISpace);\n        protected get marginStyle(): (side: BorderStylesSideType) => number;\n        get padding(): ISpace;\n        set padding(value: ISpace);\n        protected get paddingStyle(): (side: BorderStylesSideType) => number;\n        protected addChildControl(control: Control): void;\n        protected removeChildControl(control: Control): void;\n        get parent(): Control | undefined;\n        set parent(value: Control | undefined);\n        connectedCallback(): void;\n        disconnectedCallback(): void;\n        protected getParentHeight(): number;\n        protected getParentWidth(): number;\n        protected getParentOccupiedLeft(): number;\n        protected getParentOccupiedRight(): number;\n        protected getParentOccupiedBottom(): number;\n        protected getParentOccupiedTop(): number;\n        get dock(): DockStyle;\n        set dock(value: DockStyle);\n        get enabled(): boolean;\n        set enabled(value: boolean);\n        protected _handleClick(event: MouseEvent, stopPropagation?: boolean): boolean;\n        protected _handleContextMenu(event: MouseEvent, stopPropagation?: boolean): boolean;\n        protected _handleDblClick(event: MouseEvent, stopPropagation?: boolean): boolean;\n        protected _handleFocus(event: Event, stopPropagation?: boolean): boolean;\n        protected _handleKeyDown(event: KeyboardEvent, stopPropagation?: boolean): boolean | undefined;\n        protected _handleKeyUp(event: KeyboardEvent, stopPropagation?: boolean): boolean | undefined;\n        protected _handleMouseDown(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;\n        protected _handleMouseMove(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;\n        protected _handleMouseUp(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean | undefined;\n        get maxWidth(): number | string;\n        set maxWidth(value: number | string);\n        get minWidth(): string | number;\n        set minWidth(value: string | number);\n        observables(propName: string): any;\n        get onClick(): notifyMouseEventCallback;\n        set onClick(callback: notifyMouseEventCallback);\n        get onContextMenu(): notifyMouseEventCallback;\n        set onContextMenu(callback: notifyMouseEventCallback);\n        get onDblClick(): notifyMouseEventCallback;\n        set onDblClick(callback: notifyMouseEventCallback);\n        get onMouseDown(): notifyGestureEventCallback;\n        set onMouseDown(callback: notifyGestureEventCallback);\n        get onMouseUp(): notifyGestureEventCallback;\n        set onMouseUp(callback: notifyGestureEventCallback);\n        clearInnerHTML(): void;\n        refresh(): void;\n        get resizable(): boolean;\n        protected setProperty(propName: string, value: any): void;\n        protected setAttributeToProperty<P extends keyof Control>(propertyName: P): void;\n        protected init(): void;\n        protected setElementPosition(elm: HTMLElement, prop: any, value: any): void;\n        protected setPosition(prop: any, value: any): void;\n        get height(): number | string;\n        set height(value: number | string);\n        get heightValue(): number;\n        get left(): number | string;\n        set left(value: number | string);\n        set right(value: number | string);\n        set bottom(value: number | string);\n        get top(): number | string;\n        set top(value: number | string);\n        get visible(): boolean;\n        set visible(value: boolean);\n        get width(): number | string;\n        set width(value: number | string);\n        get widthValue(): number;\n        get stack(): IStack;\n        set stack(value: IStack);\n        get grid(): IGrid;\n        set grid(value: IGrid);\n        get background(): Background;\n        set background(value: IBackground);\n        get zIndex(): string;\n        set zIndex(value: string | number);\n        get lineHeight(): LineHeightType;\n        set lineHeight(value: LineHeightType);\n        get linkTo(): Control;\n        set linkTo(value: Control);\n        get position(): PositionType;\n        set position(value: PositionType);\n        get maxHeight(): string | number;\n        set maxHeight(value: string | number);\n        get minHeight(): string | number;\n        set minHeight(value: string | number);\n        get border(): Border;\n        set border(value: IBorder);\n        get overflow(): Overflow;\n        set overflow(value: OverflowType | IOverflow);\n        get tooltip(): any;\n        get font(): IFont;\n        set font(value: IFont);\n        get display(): DisplayType;\n        set display(value: DisplayType);\n        get anchor(): IAnchor;\n        set anchor(value: IAnchor);\n        get opacity(): string;\n        set opacity(value: number | string);\n        get cursor(): CursorType;\n        set cursor(value: CursorType);\n        get letterSpacing(): string | number;\n        set letterSpacing(value: string | number);\n        get boxShadow(): string;\n        set boxShadow(value: string);\n        get mediaQueries(): any[];\n        set mediaQueries(value: any[]);\n        protected removeStyle<P extends keyof Control>(propertyName: P): void;\n        protected setStyle<P extends keyof Control>(propertyName: P, value: string): void;\n    }\n    export class ContainerResizer {\n        private target;\n        private _resizer;\n        private _mouseDownPos;\n        private _origWidth;\n        private _origHeight;\n        private _mouseDownHandler;\n        private _mouseUpHandler;\n        private _mouseMoveHandler;\n        constructor(target: Container);\n        reset(): void;\n        private handleMouseDown;\n        private handleMouseMove;\n        private handleMouseUp;\n        private get resizer();\n    }\n    export class Container extends Control {\n        get controls(): Control[];\n        get resizer(): boolean;\n        set resizer(value: boolean);\n        protected init(): void;\n        protected refreshControls(): void;\n        refresh(skipRefreshControls?: boolean): void;\n    }\n}\ndeclare module \"packages/base/src/types\" {\n    export interface INumberDictionary<TValue> {\n        [id: number]: TValue;\n    }\n    export type Color = string;\n}\n/// <amd-module name=\"@ijstech/components/base\" />\ndeclare module \"@ijstech/components/base\" {\n    export { Observe, Unobserve, ClearObservers, Observables, isObservable, observable } from \"packages/base/src/observable\";\n    export { IFont, Component, BorderSides, ISpace, IStack, FontStyle, IOverflow, OverflowType, IBackground, TextTransform, ICustomEventParam } from \"packages/base/src/component\";\n    export { IBorder, BorderStylesSideType, IBorderSideStyles, IMediaQuery, DisplayType, PositionType, Background, Border, SpaceValue, IControlMediaQueryProps, IControlMediaQuery, IContextMenu, Overflow } from \"packages/base/src/control\";\n    import { IStack, IFont, ISpace, IOverflow, OverflowType, IAnchor, IBackground, ICustomProperties, CursorType } from \"packages/base/src/component\";\n    import { Control, Container, DockStyle, LineHeightType, IBorder, IGrid, DisplayType, PositionType, IControlMediaQuery } from \"packages/base/src/control\";\n    import { ITooltip } from \"packages/tooltip/src/index\";\n    export { Control, Container };\n    export * as Types from \"packages/base/src/types\";\n    export { getControlMediaQueriesStyle, getBackground, getSpacingValue } from \"packages/base/src/style/base.css\";\n    let LibPath: string;\n    export { LibPath };\n    export const RequireJS: {\n        config(config: any): void;\n        require(reqs: string[], callback: any): void;\n        defined(module: string): boolean;\n    };\n    export type notifyEventCallback = (target: Control, event: Event) => void;\n    export type notifyMouseEventCallback = (target: Control, event: MouseEvent) => void;\n    export type notifyKeyboardEventCallback = (target: Control, event: KeyboardEvent) => void;\n    export type notifyGestureEventCallback = (target: Control, event: PointerEvent | MouseEvent | TouchEvent) => void;\n    export interface ControlElement {\n        class?: string;\n        contextMenu?: string;\n        bottom?: number | string;\n        dock?: DockStyle;\n        enabled?: boolean;\n        height?: number | string;\n        id?: string;\n        left?: number | string;\n        maxWidth?: number | string;\n        minWidth?: number | string;\n        maxHeight?: number | string;\n        minHeight?: number | string;\n        right?: number | string;\n        top?: number | string;\n        visible?: boolean;\n        width?: number | string;\n        margin?: ISpace;\n        padding?: ISpace;\n        stack?: IStack;\n        grid?: IGrid;\n        background?: IBackground;\n        lineHeight?: LineHeightType;\n        zIndex?: string | number;\n        position?: PositionType;\n        linkTo?: Control;\n        border?: IBorder;\n        overflow?: IOverflow | OverflowType;\n        font?: IFont;\n        display?: DisplayType;\n        tooltip?: ITooltip | string;\n        anchor?: IAnchor;\n        opacity?: number | string;\n        tag?: any;\n        cursor?: CursorType;\n        letterSpacing?: string | number;\n        boxShadow?: string;\n        mediaQueries?: IControlMediaQuery[];\n        onClick?: notifyMouseEventCallback;\n        onDblClick?: notifyMouseEventCallback;\n        onContextMenu?: notifyMouseEventCallback;\n    }\n    export interface ContainerElement extends ControlElement {\n        resizer?: boolean;\n    }\n    export function getCustomElementProperties(name: string): ICustomProperties | undefined;\n    export function getCustomElements(): {\n        [name: string]: ICustomProperties | undefined;\n    };\n    export function customElements(tagName: string, properties?: ICustomProperties): (constructor: CustomElementConstructor) => void;\n    export function customModule(target: any): void;\n    export function setAttributeToProperty<T extends Control>(element: T, propertyName: keyof T, defaultValue?: any): void;\n}\ndeclare module \"packages/image/src/style/image.css\" { }\ndeclare module \"packages/image/src/image\" {\n    import { Control, ControlElement, IBorder, Border } from \"@ijstech/components/base\";\n    import \"packages/image/src/style/image.css\";\n    type ObjectFitType = 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';\n    export interface ImageElement extends ControlElement {\n        rotate?: number;\n        url?: string;\n        fallbackUrl?: string;\n        objectFit?: ObjectFitType;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-image']: ImageElement;\n            }\n        }\n    }\n    export class Image extends Control {\n        private imageElm;\n        private _url;\n        private _rotate;\n        private _fallbackUrl;\n        private _objectFit;\n        private _borderValue;\n        constructor(parent?: Control, options?: any);\n        get rotate(): number;\n        set rotate(value: any);\n        get url(): string;\n        set url(value: string);\n        get objectFit(): ObjectFitType;\n        set objectFit(value: ObjectFitType);\n        get border(): Border;\n        set border(value: IBorder);\n        protected init(): void;\n        static create(options?: ImageElement, parent?: Control): Promise<Image>;\n    }\n}\ndeclare module \"packages/image/src/index\" {\n    export { Image, ImageElement } from \"packages/image/src/image\";\n}\ndeclare module \"packages/icon/src/style/icon.css\" { }\ndeclare module \"packages/icon/src/icon\" {\n    import { Control, ControlElement, Types } from \"@ijstech/components/base\";\n    import { Image, ImageElement } from \"packages/image/src/index\";\n    import \"packages/icon/src/style/icon.css\";\n    export type IconName = \"\" | \"ad\" | \"address-book\" | \"address-card\" | \"adjust\" | \"air-freshener\" | \"align-center\" | \"align-justify\" | \"align-left\" | \"align-right\" | \"allergies\" | \"ambulance\" | \"american-sign-language-interpreting\" | \"anchor\" | \"angle-double-down\" | \"angle-double-left\" | \"angle-double-right\" | \"angle-double-up\" | \"angle-down\" | \"angle-left\" | \"angle-right\" | \"angle-up\" | \"angry\" | \"ankh\" | \"apple-alt\" | \"archive\" | \"archway\" | \"arrow-alt-circle-down\" | \"arrow-alt-circle-left\" | \"arrow-alt-circle-right\" | \"arrow-alt-circle-up\" | \"arrow-circle-down\" | \"arrow-circle-left\" | \"arrow-circle-right\" | \"arrow-circle-up\" | \"arrow-down\" | \"arrow-left\" | \"arrow-right\" | \"arrow-up\" | \"arrows-alt\" | \"arrows-alt-h\" | \"arrows-alt-v\" | \"assistive-listening-systems\" | \"asterisk\" | \"at\" | \"atlas\" | \"atom\" | \"audio-description\" | \"award\" | \"baby\" | \"baby-carriage\" | \"backspace\" | \"backward\" | \"bacon\" | \"bacteria\" | \"bacterium\" | \"bahai\" | \"balance-scale\" | \"balance-scale-left\" | \"balance-scale-right\" | \"ban\" | \"band-aid\" | \"barcode\" | \"bars\" | \"baseball-ball\" | \"basketball-ball\" | \"bath\" | \"battery-empty\" | \"battery-full\" | \"battery-half\" | \"battery-quarter\" | \"battery-three-quarters\" | \"bed\" | \"beer\" | \"bell\" | \"bell-slash\" | \"bezier-curve\" | \"bible\" | \"bicycle\" | \"biking\" | \"binoculars\" | \"biohazard\" | \"birthday-cake\" | \"blender\" | \"blender-phone\" | \"blind\" | \"blog\" | \"bold\" | \"bolt\" | \"bomb\" | \"bone\" | \"bong\" | \"book\" | \"book-dead\" | \"book-medical\" | \"book-open\" | \"book-reader\" | \"bookmark\" | \"border-all\" | \"border-none\" | \"border-style\" | \"bowling-ball\" | \"box\" | \"box-open\" | \"box-tissue\" | \"boxes\" | \"braille\" | \"brain\" | \"bread-slice\" | \"briefcase\" | \"briefcase-medical\" | \"broadcast-tower\" | \"broom\" | \"brush\" | \"bug\" | \"building\" | \"bullhorn\" | \"bullseye\" | \"burn\" | \"bus\" | \"bus-alt\" | \"business-time\" | \"calculator\" | \"calendar\" | \"calendar-alt\" | \"calendar-check\" | \"calendar-day\" | \"calendar-minus\" | \"calendar-plus\" | \"calendar-times\" | \"calendar-week\" | \"camera\" | \"camera-retro\" | \"campground\" | \"candy-cane\" | \"cannabis\" | \"capsules\" | \"car\" | \"car-alt\" | \"car-battery\" | \"car-crash\" | \"car-side\" | \"caravan\" | \"caret-down\" | \"caret-left\" | \"caret-right\" | \"caret-square-down\" | \"caret-square-left\" | \"caret-square-right\" | \"caret-square-up\" | \"caret-up\" | \"carrot\" | \"cart-arrow-down\" | \"cart-plus\" | \"cash-register\" | \"cat\" | \"certificate\" | \"chair\" | \"chalkboard\" | \"chalkboard-teacher\" | \"charging-station\" | \"chart-area\" | \"chart-bar\" | \"chart-line\" | \"chart-pie\" | \"check\" | \"check-circle\" | \"check-double\" | \"check-square\" | \"cheese\" | \"chess\" | \"chess-bishop\" | \"chess-board\" | \"chess-king\" | \"chess-knight\" | \"chess-pawn\" | \"chess-queen\" | \"chess-rook\" | \"chevron-circle-down\" | \"chevron-circle-left\" | \"chevron-circle-right\" | \"chevron-circle-up\" | \"chevron-down\" | \"chevron-left\" | \"chevron-right\" | \"chevron-up\" | \"child\" | \"church\" | \"circle\" | \"circle-notch\" | \"city\" | \"clinic-medical\" | \"clipboard\" | \"clipboard-check\" | \"clipboard-list\" | \"clock\" | \"clone\" | \"closed-captioning\" | \"cloud\" | \"cloud-download-alt\" | \"cloud-meatball\" | \"cloud-moon\" | \"cloud-moon-rain\" | \"cloud-rain\" | \"cloud-showers-heavy\" | \"cloud-sun\" | \"cloud-sun-rain\" | \"cloud-upload-alt\" | \"cocktail\" | \"code\" | \"code-branch\" | \"coffee\" | \"cog\" | \"cogs\" | \"coins\" | \"columns\" | \"comment\" | \"comment-alt\" | \"comment-dollar\" | \"comment-dots\" | \"comment-medical\" | \"comment-slash\" | \"comments\" | \"comments-dollar\" | \"compact-disc\" | \"compass\" | \"compress\" | \"compress-alt\" | \"compress-arrows-alt\" | \"concierge-bell\" | \"cookie\" | \"cookie-bite\" | \"copy\" | \"copyright\" | \"couch\" | \"credit-card\" | \"crop\" | \"crop-alt\" | \"cross\" | \"crosshairs\" | \"crow\" | \"crown\" | \"crutch\" | \"cube\" | \"cubes\" | \"cut\" | \"database\" | \"deaf\" | \"democrat\" | \"desktop\" | \"dharmachakra\" | \"diagnoses\" | \"dice\" | \"dice-d20\" | \"dice-d6\" | \"dice-five\" | \"dice-four\" | \"dice-one\" | \"dice-six\" | \"dice-three\" | \"dice-two\" | \"digital-tachograph\" | \"directions\" | \"disease\" | \"divide\" | \"dizzy\" | \"dna\" | \"dog\" | \"dollar-sign\" | \"dolly\" | \"dolly-flatbed\" | \"donate\" | \"door-closed\" | \"door-open\" | \"dot-circle\" | \"dove\" | \"download\" | \"drafting-compass\" | \"dragon\" | \"draw-polygon\" | \"drum\" | \"drum-steelpan\" | \"drumstick-bite\" | \"dumbbell\" | \"dumpster\" | \"dumpster-fire\" | \"dungeon\" | \"edit\" | \"egg\" | \"eject\" | \"ellipsis-h\" | \"ellipsis-v\" | \"envelope\" | \"envelope-open\" | \"envelope-open-text\" | \"envelope-square\" | \"equals\" | \"eraser\" | \"ethernet\" | \"euro-sign\" | \"exchange-alt\" | \"exclamation\" | \"exclamation-circle\" | \"exclamation-triangle\" | \"expand\" | \"expand-alt\" | \"expand-arrows-alt\" | \"external-link-alt\" | \"external-link-square-alt\" | \"eye\" | \"eye-dropper\" | \"eye-slash\" | \"fan\" | \"fast-backward\" | \"fast-forward\" | \"faucet\" | \"fax\" | \"feather\" | \"feather-alt\" | \"female\" | \"fighter-jet\" | \"file\" | \"file-alt\" | \"file-archive\" | \"file-audio\" | \"file-code\" | \"file-contract\" | \"file-csv\" | \"file-download\" | \"file-excel\" | \"file-export\" | \"file-image\" | \"file-import\" | \"file-invoice\" | \"file-invoice-dollar\" | \"file-medical\" | \"file-medical-alt\" | \"file-pdf\" | \"file-powerpoint\" | \"file-prescription\" | \"file-signature\" | \"file-upload\" | \"file-video\" | \"file-word\" | \"fill\" | \"fill-drip\" | \"film\" | \"filter\" | \"fingerprint\" | \"fire\" | \"fire-alt\" | \"fire-extinguisher\" | \"first-aid\" | \"fish\" | \"fist-raised\" | \"flag\" | \"flag-checkered\" | \"flag-usa\" | \"flask\" | \"flushed\" | \"folder\" | \"folder-minus\" | \"folder-open\" | \"folder-plus\" | \"font\" | \"font-awesome-logo-full\" | \"football-ball\" | \"forward\" | \"frog\" | \"frown\" | \"frown-open\" | \"funnel-dollar\" | \"futbol\" | \"gamepad\" | \"gas-pump\" | \"gavel\" | \"gem\" | \"genderless\" | \"ghost\" | \"gift\" | \"gifts\" | \"glass-cheers\" | \"glass-martini\" | \"glass-martini-alt\" | \"glass-whiskey\" | \"glasses\" | \"globe\" | \"globe-africa\" | \"globe-americas\" | \"globe-asia\" | \"globe-europe\" | \"golf-ball\" | \"gopuram\" | \"graduation-cap\" | \"greater-than\" | \"greater-than-equal\" | \"grimace\" | \"grin\" | \"grin-alt\" | \"grin-beam\" | \"grin-beam-sweat\" | \"grin-hearts\" | \"grin-squint\" | \"grin-squint-tears\" | \"grin-stars\" | \"grin-tears\" | \"grin-tongue\" | \"grin-tongue-squint\" | \"grin-tongue-wink\" | \"grin-wink\" | \"grip-horizontal\" | \"grip-lines\" | \"grip-lines-vertical\" | \"grip-vertical\" | \"guitar\" | \"h-square\" | \"hamburger\" | \"hammer\" | \"hamsa\" | \"hand-holding\" | \"hand-holding-heart\" | \"hand-holding-medical\" | \"hand-holding-usd\" | \"hand-holding-water\" | \"hand-lizard\" | \"hand-middle-finger\" | \"hand-paper\" | \"hand-peace\" | \"hand-point-down\" | \"hand-point-left\" | \"hand-point-right\" | \"hand-point-up\" | \"hand-pointer\" | \"hand-rock\" | \"hand-scissors\" | \"hand-sparkles\" | \"hand-spock\" | \"hands\" | \"hands-helping\" | \"hands-wash\" | \"handshake\" | \"handshake-alt-slash\" | \"handshake-slash\" | \"hanukiah\" | \"hard-hat\" | \"hashtag\" | \"hat-cowboy\" | \"hat-cowboy-side\" | \"hat-wizard\" | \"hdd\" | \"head-side-cough\" | \"head-side-cough-slash\" | \"head-side-mask\" | \"head-side-virus\" | \"heading\" | \"headphones\" | \"headphones-alt\" | \"headset\" | \"heart\" | \"heart-broken\" | \"heartbeat\" | \"helicopter\" | \"highlighter\" | \"hiking\" | \"hippo\" | \"history\" | \"hockey-puck\" | \"holly-berry\" | \"home\" | \"horse\" | \"horse-head\" | \"hospital\" | \"hospital-alt\" | \"hospital-symbol\" | \"hospital-user\" | \"hot-tub\" | \"hotdog\" | \"hotel\" | \"hourglass\" | \"hourglass-end\" | \"hourglass-half\" | \"hourglass-start\" | \"house-damage\" | \"house-user\" | \"hryvnia\" | \"i-cursor\" | \"ice-cream\" | \"icicles\" | \"icons\" | \"id-badge\" | \"id-card\" | \"id-card-alt\" | \"igloo\" | \"image\" | \"images\" | \"inbox\" | \"indent\" | \"industry\" | \"infinity\" | \"info\" | \"info-circle\" | \"italic\" | \"jedi\" | \"joint\" | \"journal-whills\" | \"kaaba\" | \"key\" | \"keyboard\" | \"khanda\" | \"kiss\" | \"kiss-beam\" | \"kiss-wink-heart\" | \"kiwi-bird\" | \"landmark\" | \"language\" | \"laptop\" | \"laptop-code\" | \"laptop-house\" | \"laptop-medical\" | \"laugh\" | \"laugh-beam\" | \"laugh-squint\" | \"laugh-wink\" | \"layer-group\" | \"leaf\" | \"lemon\" | \"less-than\" | \"less-than-equal\" | \"level-down-alt\" | \"level-up-alt\" | \"life-ring\" | \"lightbulb\" | \"link\" | \"lira-sign\" | \"list\" | \"list-alt\" | \"list-ol\" | \"list-ul\" | \"location-arrow\" | \"lock\" | \"lock-open\" | \"long-arrow-alt-down\" | \"long-arrow-alt-left\" | \"long-arrow-alt-right\" | \"long-arrow-alt-up\" | \"low-vision\" | \"luggage-cart\" | \"lungs\" | \"lungs-virus\" | \"magic\" | \"magnet\" | \"mail-bulk\" | \"male\" | \"map\" | \"map-marked\" | \"map-marked-alt\" | \"map-marker\" | \"map-marker-alt\" | \"map-pin\" | \"map-signs\" | \"marker\" | \"mars\" | \"mars-double\" | \"mars-stroke\" | \"mars-stroke-h\" | \"mars-stroke-v\" | \"mask\" | \"medal\" | \"medkit\" | \"meh\" | \"meh-blank\" | \"meh-rolling-eyes\" | \"memory\" | \"menorah\" | \"mercury\" | \"meteor\" | \"microchip\" | \"microphone\" | \"microphone-alt\" | \"microphone-alt-slash\" | \"microphone-slash\" | \"microscope\" | \"minus\" | \"minus-circle\" | \"minus-square\" | \"mitten\" | \"mobile\" | \"mobile-alt\" | \"money-bill\" | \"money-bill-alt\" | \"money-bill-wave\" | \"money-bill-wave-alt\" | \"money-check\" | \"money-check-alt\" | \"monument\" | \"moon\" | \"mortar-pestle\" | \"mosque\" | \"motorcycle\" | \"mountain\" | \"mouse\" | \"mouse-pointer\" | \"mug-hot\" | \"music\" | \"network-wired\" | \"neuter\" | \"newspaper\" | \"not-equal\" | \"notes-medical\" | \"object-group\" | \"object-ungroup\" | \"oil-can\" | \"om\" | \"otter\" | \"outdent\" | \"pager\" | \"paint-brush\" | \"paint-roller\" | \"palette\" | \"pallet\" | \"paper-plane\" | \"paperclip\" | \"parachute-box\" | \"paragraph\" | \"parking\" | \"passport\" | \"pastafarianism\" | \"paste\" | \"pause\" | \"pause-circle\" | \"paw\" | \"peace\" | \"pen\" | \"pen-alt\" | \"pen-fancy\" | \"pen-nib\" | \"pen-square\" | \"pencil-alt\" | \"pencil-ruler\" | \"people-arrows\" | \"people-carry\" | \"pepper-hot\" | \"percent\" | \"percentage\" | \"person-booth\" | \"phone\" | \"phone-alt\" | \"phone-slash\" | \"phone-square\" | \"phone-square-alt\" | \"phone-volume\" | \"photo-video\" | \"piggy-bank\" | \"pills\" | \"pizza-slice\" | \"place-of-worship\" | \"plane\" | \"plane-arrival\" | \"plane-departure\" | \"plane-slash\" | \"play\" | \"play-circle\" | \"plug\" | \"plus\" | \"plus-circle\" | \"plus-square\" | \"podcast\" | \"poll\" | \"poll-h\" | \"poo\" | \"poo-storm\" | \"poop\" | \"portrait\" | \"pound-sign\" | \"power-off\" | \"pray\" | \"praying-hands\" | \"prescription\" | \"prescription-bottle\" | \"prescription-bottle-alt\" | \"print\" | \"procedures\" | \"project-diagram\" | \"pump-medical\" | \"pump-soap\" | \"puzzle-piece\" | \"qrcode\" | \"question\" | \"question-circle\" | \"quidditch\" | \"quote-left\" | \"quote-right\" | \"quran\" | \"radiation\" | \"radiation-alt\" | \"rainbow\" | \"random\" | \"receipt\" | \"record-vinyl\" | \"recycle\" | \"redo\" | \"redo-alt\" | \"registered\" | \"remove-format\" | \"reply\" | \"reply-all\" | \"republican\" | \"restroom\" | \"retweet\" | \"ribbon\" | \"ring\" | \"road\" | \"robot\" | \"rocket\" | \"route\" | \"rss\" | \"rss-square\" | \"ruble-sign\" | \"ruler\" | \"ruler-combined\" | \"ruler-horizontal\" | \"ruler-vertical\" | \"running\" | \"rupee-sign\" | \"sad-cry\" | \"sad-tear\" | \"satellite\" | \"satellite-dish\" | \"save\" | \"school\" | \"screwdriver\" | \"scroll\" | \"sd-card\" | \"search\" | \"search-dollar\" | \"search-location\" | \"search-minus\" | \"search-plus\" | \"seedling\" | \"server\" | \"shapes\" | \"share\" | \"share-alt\" | \"share-alt-square\" | \"share-square\" | \"shekel-sign\" | \"shield-alt\" | \"shield-virus\" | \"ship\" | \"shipping-fast\" | \"shoe-prints\" | \"shopping-bag\" | \"shopping-basket\" | \"shopping-cart\" | \"shower\" | \"shuttle-van\" | \"sign\" | \"sign-in-alt\" | \"sign-language\" | \"sign-out-alt\" | \"signal\" | \"signature\" | \"sim-card\" | \"sink\" | \"sitemap\" | \"skating\" | \"skiing\" | \"skiing-nordic\" | \"skull\" | \"skull-crossbones\" | \"slash\" | \"sleigh\" | \"sliders-h\" | \"smile\" | \"smile-beam\" | \"smile-wink\" | \"smog\" | \"smoking\" | \"smoking-ban\" | \"sms\" | \"snowboarding\" | \"snowflake\" | \"snowman\" | \"snowplow\" | \"soap\" | \"socks\" | \"solar-panel\" | \"sort\" | \"sort-alpha-down\" | \"sort-alpha-down-alt\" | \"sort-alpha-up\" | \"sort-alpha-up-alt\" | \"sort-amount-down\" | \"sort-amount-down-alt\" | \"sort-amount-up\" | \"sort-amount-up-alt\" | \"sort-down\" | \"sort-numeric-down\" | \"sort-numeric-down-alt\" | \"sort-numeric-up\" | \"sort-numeric-up-alt\" | \"sort-up\" | \"spa\" | \"space-shuttle\" | \"spell-check\" | \"spider\" | \"spinner\" | \"splotch\" | \"spray-can\" | \"square\" | \"square-full\" | \"square-root-alt\" | \"stamp\" | \"star\" | \"star-and-crescent\" | \"star-half\" | \"star-half-alt\" | \"star-of-david\" | \"star-of-life\" | \"step-backward\" | \"step-forward\" | \"stethoscope\" | \"sticky-note\" | \"stop\" | \"stop-circle\" | \"stopwatch\" | \"stopwatch-20\" | \"store\" | \"store-alt\" | \"store-alt-slash\" | \"store-slash\" | \"stream\" | \"street-view\" | \"strikethrough\" | \"stroopwafel\" | \"subscript\" | \"subway\" | \"suitcase\" | \"suitcase-rolling\" | \"sun\" | \"superscript\" | \"surprise\" | \"swatchbook\" | \"swimmer\" | \"swimming-pool\" | \"synagogue\" | \"sync\" | \"sync-alt\" | \"syringe\" | \"table\" | \"table-tennis\" | \"tablet\" | \"tablet-alt\" | \"tablets\" | \"tachometer-alt\" | \"tag\" | \"tags\" | \"tape\" | \"tasks\" | \"taxi\" | \"teeth\" | \"teeth-open\" | \"temperature-high\" | \"temperature-low\" | \"tenge\" | \"terminal\" | \"text-height\" | \"text-width\" | \"th\" | \"th-large\" | \"th-list\" | \"theater-masks\" | \"thermometer\" | \"thermometer-empty\" | \"thermometer-full\" | \"thermometer-half\" | \"thermometer-quarter\" | \"thermometer-three-quarters\" | \"thumbs-down\" | \"thumbs-up\" | \"thumbtack\" | \"ticket-alt\" | \"times\" | \"times-circle\" | \"tint\" | \"tint-slash\" | \"tired\" | \"toggle-off\" | \"toggle-on\" | \"toilet\" | \"toilet-paper\" | \"toilet-paper-slash\" | \"toolbox\" | \"tools\" | \"tooth\" | \"torah\" | \"torii-gate\" | \"tractor\" | \"trademark\" | \"traffic-light\" | \"trailer\" | \"train\" | \"tram\" | \"transgender\" | \"transgender-alt\" | \"trash\" | \"trash-alt\" | \"trash-restore\" | \"trash-restore-alt\" | \"tree\" | \"trophy\" | \"truck\" | \"truck-loading\" | \"truck-monster\" | \"truck-moving\" | \"truck-pickup\" | \"tshirt\" | \"tty\" | \"tv\" | \"umbrella\" | \"umbrella-beach\" | \"underline\" | \"undo\" | \"undo-alt\" | \"universal-access\" | \"university\" | \"unlink\" | \"unlock\" | \"unlock-alt\" | \"upload\" | \"user\" | \"user-alt\" | \"user-alt-slash\" | \"user-astronaut\" | \"user-check\" | \"user-circle\" | \"user-clock\" | \"user-cog\" | \"user-edit\" | \"user-friends\" | \"user-graduate\" | \"user-injured\" | \"user-lock\" | \"user-md\" | \"user-minus\" | \"user-ninja\" | \"user-nurse\" | \"user-plus\" | \"user-secret\" | \"user-shield\" | \"user-slash\" | \"user-tag\" | \"user-tie\" | \"user-times\" | \"users\" | \"users-cog\" | \"users-slash\" | \"utensil-spoon\" | \"utensils\" | \"vector-square\" | \"venus\" | \"venus-double\" | \"venus-mars\" | \"vest\" | \"vest-patches\" | \"vial\" | \"vials\" | \"video\" | \"video-slash\" | \"vihara\" | \"virus\" | \"virus-slash\" | \"viruses\" | \"voicemail\" | \"volleyball-ball\" | \"volume-down\" | \"volume-mute\" | \"volume-off\" | \"volume-up\" | \"vote-yea\" | \"vr-cardboard\" | \"walking\" | \"wallet\" | \"warehouse\" | \"water\" | \"wave-square\" | \"weight\" | \"weight-hanging\" | \"wheelchair\" | \"wifi\" | \"wind\" | \"window-close\" | \"window-maximize\" | \"window-minimize\" | \"window-restore\" | \"wine-bottle\" | \"wine-glass\" | \"wine-glass-alt\" | \"won-sign\" | \"wrench\" | \"x-ray\" | \"yen-sign\" | \"yin-yang\";\n    export interface IconElement extends ControlElement {\n        name?: IconName;\n        fill?: Types.Color;\n        image?: ImageElement;\n        spin?: boolean;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-icon']: IconElement;\n            }\n        }\n    }\n    export class Icon extends Control {\n        private svgElm;\n        private _name;\n        private _size;\n        private _image;\n        private _spin;\n        private _fill;\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n        get fill(): Types.Color;\n        set fill(color: Types.Color);\n        get name(): IconName;\n        set name(value: IconName);\n        get image(): Image;\n        set image(image: Image);\n        get spin(): boolean;\n        set spin(value: boolean);\n        private _updateIcon;\n        static create(options?: IconElement, parent?: Control): Promise<Icon>;\n    }\n}\ndeclare module \"packages/icon/src/index\" {\n    export { IconName, Icon, IconElement } from \"packages/icon/src/icon\";\n}\ndeclare module \"packages/modal/src/style/modal.css\" {\n    import { IModalMediaQuery } from \"packages/modal/src/modal\";\n    export const getOverlayStyle: () => string;\n    export const getWrapperStyle: () => string;\n    export const getNoBackdropStyle: () => string;\n    export const getFixedWrapperStyle: (paddingLeft: string, paddingTop: string) => string;\n    export const getAbsoluteWrapperStyle: (left: string, top: string) => string;\n    export const getModalStyle: (left: string, top: string) => string;\n    export const modalStyle: string;\n    export const getBodyStyle: string;\n    export const titleStyle: string;\n    export const getModalMediaQueriesStyleClass: (mediaQueries: IModalMediaQuery[]) => string;\n}\ndeclare module \"packages/modal/src/modal\" {\n    import { Control, ControlElement, Container, IBackground, IBorder, Background, Border, IMediaQuery, IControlMediaQueryProps, ISpace, Overflow, IOverflow, OverflowType } from \"@ijstech/components/base\";\n    import { Icon, IconElement } from \"packages/icon/src/index\";\n    export type modalPopupPlacementType = 'center' | 'bottom' | 'bottomLeft' | 'bottomRight' | 'top' | 'topLeft' | 'topRight' | 'rightTop' | 'left' | 'right';\n    type eventCallback = (target: Control) => void;\n    type ModalPositionType = \"fixed\" | \"absolute\";\n    export interface IModalMediaQueryProps extends IControlMediaQueryProps {\n        showBackdrop?: boolean;\n        popupPlacement?: 'center' | 'bottom' | 'top';\n        position?: ModalPositionType;\n    }\n    export type IModalMediaQuery = IMediaQuery<IModalMediaQueryProps>;\n    export interface ModalElement extends ControlElement {\n        title?: string;\n        showBackdrop?: boolean;\n        closeIcon?: IconElement;\n        popupPlacement?: modalPopupPlacementType;\n        closeOnBackdropClick?: boolean;\n        isChildFixed?: boolean;\n        closeOnScrollChildFixed?: boolean;\n        item?: Control;\n        mediaQueries?: IModalMediaQuery[];\n        onOpen?: eventCallback;\n        onClose?: eventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-modal']: ModalElement;\n            }\n        }\n    }\n    export class Modal extends Container {\n        protected _visible: boolean;\n        private wrapperDiv;\n        private titleSpan;\n        private modalDiv;\n        private bodyDiv;\n        private overlayDiv;\n        private _closeIcon;\n        private _placement;\n        private _closeOnBackdropClick;\n        private _showBackdrop;\n        private _wrapperPositionAt;\n        private _isChildFixed;\n        private _closeOnScrollChildFixed;\n        private _mediaQueries;\n        private hasInitializedChildFixed;\n        private mapScrollTop;\n        private insideClick;\n        private boundHandleModalMouseDown;\n        private boundHandleModalMouseUp;\n        protected _onOpen: eventCallback;\n        onClose: eventCallback;\n        constructor(parent?: Control, options?: any);\n        get visible(): boolean;\n        set visible(value: boolean);\n        get onOpen(): any;\n        set onOpen(callback: any);\n        get title(): string;\n        set title(value: string);\n        get popupPlacement(): modalPopupPlacementType;\n        set popupPlacement(value: modalPopupPlacementType);\n        get closeIcon(): Icon | null;\n        set closeIcon(elm: Icon | null);\n        get closeOnBackdropClick(): boolean;\n        set closeOnBackdropClick(value: boolean);\n        get showBackdrop(): boolean;\n        set showBackdrop(value: boolean);\n        private updateNoBackdropMd;\n        get item(): Control;\n        set item(value: Control);\n        get body(): Control;\n        set body(value: Control);\n        get position(): ModalPositionType;\n        set position(value: ModalPositionType);\n        get isChildFixed(): boolean;\n        set isChildFixed(value: boolean);\n        get closeOnScrollChildFixed(): boolean;\n        set closeOnScrollChildFixed(value: boolean);\n        get mediaQueries(): IModalMediaQuery[];\n        set mediaQueries(value: IModalMediaQuery[]);\n        private setChildFixed;\n        private positionAtChildFixed;\n        private getWrapperParent;\n        private positionAt;\n        private positionAtFix;\n        private positionAtAbsolute;\n        private getWrapperFixCoords;\n        private getWrapperOffsets;\n        private getWrapperAbsoluteCoords;\n        protected _handleOnShow(event: Event): void;\n        private handleModalMouseDown;\n        private handleModalMouseUp;\n        private setInsideClick;\n        private updateModal;\n        refresh(): void;\n        get background(): Background;\n        set background(value: IBackground);\n        get width(): number | string;\n        set width(value: number | string);\n        get height(): number | string;\n        set height(value: number | string);\n        get border(): Border;\n        set border(value: IBorder);\n        get padding(): ISpace;\n        set padding(value: ISpace);\n        get boxShadow(): string;\n        set boxShadow(value: string);\n        get overflow(): Overflow;\n        set overflow(value: OverflowType | IOverflow);\n        protected removeTargetStyle(target: HTMLElement, propertyName: string): void;\n        protected setTargetStyle(target: HTMLElement, propertyName: string, value: string): void;\n        protected init(): void;\n        static create(options?: ModalElement, parent?: Container): Promise<Modal>;\n    }\n}\ndeclare module \"packages/modal/src/index\" {\n    export { Modal, ModalElement, modalPopupPlacementType } from \"packages/modal/src/modal\";\n}\ndeclare module \"packages/module/src/module\" {\n    import { Container, ContainerElement } from \"@ijstech/components/base\";\n    import { IconElement } from \"packages/icon/src/index\";\n    import { Modal, ModalElement } from \"packages/modal/src/index\";\n    export interface ModuleElement extends ContainerElement {\n        caption?: string;\n    }\n    global {\n        var Render: any;\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-module']: ModuleElement;\n            }\n        }\n    }\n    export interface IOpenModalOptions {\n        title?: string;\n        showBackdrop?: boolean;\n        closeIcon?: IconElement;\n        width?: number | string;\n        zIndex?: number;\n    }\n    export class Module extends Container {\n        private $renderElms;\n        private $render;\n        private modulesUrlRegex;\n        private static _modalMap;\n        static create(options?: ModuleElement, parent?: Container, defaults?: ModuleElement): Promise<Module>;\n        constructor(parent?: Container, options?: any, defaults?: any);\n        init(): void;\n        flattenArray(arr: any[]): any;\n        _render(...params: any[]): HTMLElement;\n        render(): void;\n        onLoad(): void;\n        onShow(options?: any): void;\n        onHide(): void;\n        disconnectedCallback(): void;\n        openModal(options?: ModalElement): Modal;\n        closeModal(): void;\n    }\n}\ndeclare module \"packages/module/src/index\" {\n    export { Module, ModuleElement, IOpenModalOptions } from \"packages/module/src/module\";\n}\ndeclare module \"packages/application/src/event-bus\" {\n    export interface Registry {\n        unregister: () => void;\n    }\n    export interface Callable {\n        [key: string]: Function;\n    }\n    export interface Subscriber {\n        [key: string]: Callable;\n    }\n    export interface IEventBus {\n        dispatch<T>(event: string, arg?: T): void;\n        register(sender: any, event: string, callback: Function): Registry;\n    }\n    export class EventBus implements IEventBus {\n        private subscribers;\n        private static nextId;\n        private static instance?;\n        private constructor();\n        static getInstance(): EventBus;\n        dispatch<T>(event: string, arg?: T): void;\n        register(sender: any, event: string, callback: Function): Registry;\n        private getNextId;\n    }\n}\ndeclare module \"packages/checkbox/src/style/checkbox.css\" { }\ndeclare module \"packages/checkbox/src/checkbox\" {\n    import { ControlElement, Control, notifyEventCallback } from \"@ijstech/components/base\";\n    import \"packages/checkbox/src/style/checkbox.css\";\n    export interface CheckboxElement extends ControlElement {\n        checked?: boolean;\n        indeterminate?: boolean;\n        caption?: string;\n        captionWidth?: number | string;\n        readOnly?: boolean;\n        onChanged?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-checkbox']: CheckboxElement;\n            }\n        }\n    }\n    export class Checkbox extends Control {\n        private _caption;\n        private _captionWidth;\n        private _indeterminate;\n        private _checked;\n        private _readOnly;\n        private wrapperElm;\n        private inputSpanElm;\n        private captionSpanElm;\n        private inputElm;\n        private checkmarklElm;\n        onChanged: notifyEventCallback;\n        constructor(parent?: Control, options?: any);\n        get caption(): string;\n        set caption(value: string);\n        get captionWidth(): number | string;\n        set captionWidth(value: number | string);\n        get height(): number;\n        set height(value: number | string);\n        get indeterminate(): boolean;\n        set indeterminate(value: boolean);\n        get checked(): boolean;\n        set checked(value: boolean);\n        get value(): any;\n        set value(data: any);\n        get readOnly(): boolean;\n        set readOnly(value: boolean);\n        private _handleChange;\n        private addClass;\n        protected init(): void;\n        static create(options?: CheckboxElement, parent?: Control): Promise<Checkbox>;\n    }\n}\ndeclare module \"packages/checkbox/src/index\" {\n    export { Checkbox, CheckboxElement } from \"packages/checkbox/src/checkbox\";\n}\ndeclare module \"packages/application/src/globalEvent\" {\n    export class GlobalEvents {\n        _leftMouseButtonDown: boolean;\n        private _initialTouchPos;\n        constructor();\n        abortEvent(event: Event): void;\n        private _handleClick;\n        private _handleMouseDown;\n        private _handleMouseMove;\n        private _handleMouseUp;\n        private _handleDblClick;\n        private _handleKeyDown;\n        private _handleKeyUp;\n        private _handleContextMenu;\n        private _handleChange;\n        private _handleMouseWheel;\n        private _handleFocus;\n        private _handleBlur;\n        private bindEvents;\n    }\n}\ndeclare module \"packages/application/src/styles/index.css\" {\n    export const applicationStyle: string;\n}\ndeclare module \"packages/ipfs/src/types\" {\n    export enum CidCode {\n        DAG_PB = 112,\n        RAW = 85\n    }\n    export interface ICidData {\n        cid: string;\n        links?: ICidInfo[];\n        name?: string;\n        size: number;\n        type?: 'dir' | 'file';\n        code?: CidCode;\n        multihash?: any;\n        bytes?: Uint8Array;\n    }\n    export interface ICidInfo {\n        cid: string;\n        links?: ICidInfo[];\n        name?: string;\n        size: number;\n        type?: 'dir' | 'file';\n    }\n}\ndeclare module \"packages/ipfs/src/utils\" {\n    import { ICidData, ICidInfo } from \"packages/ipfs/src/types\";\n    export function parse(cid: string, bytes?: Uint8Array): ICidData;\n    export interface IHashChunk {\n        size: number;\n        dataSize: number;\n        cid: {\n            toString: () => string;\n        };\n    }\n    export function hashChunk(data: Buffer, version?: number): Promise<IHashChunk>;\n    export function hashChunks(chunks: IHashChunk[] | ICidInfo[], version?: number): Promise<ICidData>;\n    export function hashItems(items?: ICidInfo[], version?: number): Promise<ICidData>;\n    export function hashContent(content: string | Uint8Array, version?: number): Promise<ICidData>;\n    export function hashFile(file: File | Uint8Array, version?: number): Promise<ICidData>;\n    export function cidToHash(cid: string): string;\n}\ndeclare module \"packages/ipfs/src/fileManager\" {\n    import { ICidData, ICidInfo } from \"packages/ipfs/src/types\";\n    export interface ISignature {\n        pubKey: string;\n        timestamp: number;\n        sig: string;\n    }\n    export interface ISignerData {\n        action: string;\n        timestamp: number;\n        data?: any;\n    }\n    export interface ISigner {\n        sign(data: ISignerData, schema: object): Promise<ISignature>;\n    }\n    interface IFileManagerOptions {\n        transport?: IFileManagerTransport;\n        endpoint?: string;\n        signer?: ISigner;\n        rootCid?: string;\n    }\n    export interface IUploadEndpoints {\n        [cid: string]: {\n            exists?: boolean;\n            url: string;\n            method?: string;\n            headers?: {\n                [key: string]: string;\n            };\n        };\n    }\n    export type IGetUploadUrlResult = {\n        success: true;\n        data: IUploadEndpoints;\n    };\n    export interface IRootInfo {\n        success: boolean;\n        data: {\n            cid: string;\n            used: number;\n            quota: number;\n        };\n    }\n    export interface IResult {\n        success: boolean;\n        data?: any;\n    }\n    export interface IFileManagerTransport {\n        applyUpdate(node: FileNode): Promise<IResult>;\n        getCidInfo(cid: string): Promise<ICidInfo | undefined>;\n        getRoot(): Promise<IRootInfo>;\n        getUploadUrl(cidInfo: ICidInfo): Promise<IGetUploadUrlResult | undefined>;\n    }\n    export interface IFileManagerTransporterOptions {\n        endpoint?: string;\n        signer?: ISigner;\n    }\n    export class FileManagerHttpTransport implements IFileManagerTransport {\n        private options;\n        private updated;\n        constructor(options?: IFileManagerTransporterOptions);\n        applyUpdate(node: FileNode): Promise<IResult>;\n        getCidInfo(cid: string): Promise<ICidInfo | undefined>;\n        getRoot(): Promise<IRootInfo>;\n        getUploadUrl(cidInfo: ICidInfo, isRoot?: boolean): Promise<IGetUploadUrlResult | undefined>;\n    }\n    export class FileNode {\n        private _name;\n        private _parent;\n        protected _items: FileNode[];\n        private _cidInfo;\n        private _isFile;\n        private _isFolder;\n        private _file;\n        private _fileContent;\n        private _isModified;\n        private _owner;\n        isRoot: boolean;\n        constructor(owner: FileManager, name: string, parent?: FileNode, cidInfo?: ICidData);\n        get cid(): string;\n        checkCid(): Promise<void>;\n        get fullPath(): string;\n        get isModified(): boolean;\n        modified(value?: boolean): false | undefined;\n        get name(): string;\n        set name(value: string);\n        get parent(): FileNode;\n        set parent(value: FileNode);\n        itemCount(): Promise<number>;\n        items(index: number): Promise<FileNode>;\n        addFile(name: string, file: File): Promise<FileNode>;\n        addFileContent(name: string, content: Uint8Array | string): Promise<FileNode>;\n        addItem(item: FileNode): Promise<void>;\n        removeItem(item: FileNode): void;\n        findItem(name: string): Promise<FileNode | undefined>;\n        get cidInfo(): ICidData | undefined;\n        isFile(): Promise<boolean>;\n        isFolder(): Promise<boolean>;\n        get file(): File | undefined;\n        set file(value: File | undefined);\n        get fileContent(): string | Uint8Array | undefined;\n        set fileContent(value: string | Uint8Array | undefined);\n        hash(): Promise<ICidData | undefined>;\n    }\n    export class FileManager {\n        private transporter;\n        private rootNode;\n        private options;\n        quota: number;\n        used: number;\n        constructor(options?: IFileManagerOptions);\n        addFileTo(folder: FileNode, filePath: string, file: File | Uint8Array): Promise<FileNode>;\n        addFile(filePath: string, file: File): Promise<FileNode | undefined>;\n        addFileContent(filePath: string, content: Uint8Array | string): Promise<FileNode | undefined>;\n        getCidInfo(cid: string): Promise<ICidInfo | undefined>;\n        private updateNode;\n        applyUpdates(): Promise<FileNode | undefined>;\n        delete(fileNode: FileNode): void;\n        addFolder(folder: FileNode, name: string): Promise<FileNode>;\n        updateFolderName(fileNode: FileNode, newName: string): Promise<void>;\n        getFileNode(path: string): Promise<FileNode | undefined>;\n        getRootNode(): Promise<FileNode | undefined>;\n        reset(): void;\n        setRootCid(cid: string): Promise<FileNode | undefined>;\n        move(fileNode: FileNode, newParent: FileNode): void;\n    }\n}\ndeclare module \"packages/ipfs/src/index\" {\n    import { ICidInfo } from \"packages/ipfs/src/types\";\n    export { CidCode, ICidData, ICidInfo } from \"packages/ipfs/src/types\";\n    export { cidToHash, hashContent, hashFile, hashItems, parse } from \"packages/ipfs/src/utils\";\n    export { FileManager, FileManagerHttpTransport, IFileManagerTransport, IFileManagerTransporterOptions, ISigner, ISignerData, ISignature, FileNode, IGetUploadUrlResult } from \"packages/ipfs/src/fileManager\";\n    export interface IFile extends File {\n        path?: string;\n        cid?: {\n            cid: string;\n            size: number;\n        };\n    }\n    export function hashFiles(files: IFile[], version?: number): Promise<ICidInfo>;\n    export function cidToSri(cid: string): Promise<string>;\n}\ndeclare module \"packages/button/src/style/button.css\" { }\n/// <amd-module name=\"@ijstech/components/button\" />\ndeclare module \"@ijstech/components/button\" {\n    import { Control, Container, ControlElement } from \"@ijstech/components/base\";\n    import { Icon, IconElement } from \"packages/icon/src/index\";\n    import \"packages/button/src/style/button.css\";\n    export interface ButtonElement extends ControlElement {\n        caption?: string;\n        icon?: IconElement;\n        rightIcon?: IconElement;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-button']: ButtonElement;\n            }\n        }\n    }\n    export class Button extends Control {\n        private captionElm;\n        private _icon;\n        private _rightIcon;\n        static create(options?: ButtonElement, parent?: Container): Promise<Button>;\n        constructor(parent?: Control, options?: ButtonElement);\n        get caption(): string;\n        set caption(value: string);\n        get icon(): Icon;\n        set icon(value: Icon);\n        get rightIcon(): Icon;\n        set rightIcon(value: Icon);\n        get enabled(): boolean;\n        set enabled(value: boolean);\n        private get isSpinning();\n        private prependIcon;\n        private appendIcon;\n        private updateButton;\n        _handleClick(event: MouseEvent): boolean;\n        refresh(): void;\n        protected init(): void;\n    }\n}\ndeclare module \"packages/button/src/index\" {\n    export { Button, ButtonElement } from \"@ijstech/components/button\";\n}\ndeclare module \"packages/link/src/style/link.css\" { }\ndeclare module \"packages/link/src/link\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    import \"packages/link/src/style/link.css\";\n    type TagertType = '_self' | '_blank' | '_parent' | '_top';\n    export interface LinkElement extends ControlElement {\n        href?: string;\n        target?: TagertType;\n    }\n    export class Link extends Control {\n        private _href;\n        private _target;\n        private _linkElm;\n        constructor(parent?: Control, options?: any);\n        get href(): string;\n        set href(value: string);\n        get target(): TagertType;\n        set target(value: TagertType);\n        append(children: Control | HTMLElement): void;\n        _handleClick(event: MouseEvent, stopPropagation?: boolean): boolean;\n        protected addChildControl(control: Control): void;\n        protected removeChildControl(control: Control): void;\n        protected init(): void;\n        static create(options?: LinkElement, parent?: Control): Promise<Link>;\n    }\n}\ndeclare module \"packages/link/src/index\" {\n    export { Link, LinkElement } from \"packages/link/src/link\";\n}\ndeclare module \"packages/text/src/style/text.css\" { }\ndeclare module \"packages/text/src/text\" {\n    import { Control, ControlElement, DisplayType } from \"@ijstech/components/base\";\n    import \"packages/text/src/style/text.css\";\n    type WordBreakType = 'normal' | 'break-all' | 'keep-all' | 'break-word' | 'inherit' | 'initial' | 'revert' | 'unset';\n    type OverflowWrapType = 'normal' | 'break-word' | 'anywhere' | 'inherit' | 'initial' | 'revert' | 'unset';\n    export type TextOverflowType = 'clip' | 'ellipsis' | 'initial' | 'inherit';\n    export interface TextElement extends ControlElement {\n        wordBreak?: WordBreakType;\n        overflowWrap?: OverflowWrapType;\n        textOverflow?: TextOverflowType;\n        lineClamp?: number;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-text']: TextElement;\n            }\n        }\n    }\n    export class Text extends Control {\n        constructor(parent?: Control, options?: any);\n        get wordBreak(): WordBreakType;\n        set wordBreak(value: WordBreakType);\n        get overflowWrap(): OverflowWrapType;\n        set overflowWrap(value: OverflowWrapType);\n        get textOverflow(): TextOverflowType;\n        set textOverflow(value: TextOverflowType);\n        get lineClamp(): number;\n        set lineClamp(value: number);\n        get display(): DisplayType;\n        set display(value: DisplayType);\n        protected init(): void;\n        static create(options?: TextElement, parent?: Control): Promise<Text>;\n    }\n}\ndeclare module \"packages/text/src/index\" {\n    export { Text, TextElement, TextOverflowType } from \"packages/text/src/text\";\n}\ndeclare module \"packages/label/src/style/label.css\" { }\ndeclare module \"packages/label/src/label\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { Link, LinkElement } from \"packages/link/src/index\";\n    import { Text, TextElement } from \"packages/text/src/index\";\n    import \"packages/label/src/style/label.css\";\n    export interface LabelElement extends TextElement {\n        caption?: string;\n        link?: LinkElement;\n        textDecoration?: string;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-label']: LabelElement;\n            }\n        }\n    }\n    export class Label extends Text {\n        private captionSpan;\n        private _link;\n        constructor(parent?: Control, options?: any);\n        get caption(): string;\n        set caption(value: string);\n        get link(): Link;\n        set link(value: Link);\n        set height(value: number);\n        set width(value: number);\n        get textDecoration(): string;\n        set textDecoration(value: string);\n        protected init(): void;\n        static create(options?: LabelElement, parent?: Control): Promise<Label>;\n    }\n}\ndeclare module \"packages/label/src/index\" {\n    export { Label, LabelElement } from \"packages/label/src/label\";\n}\ndeclare module \"packages/layout/src/interfaces\" {\n    export interface IHover {\n        opacity?: number;\n        backgroundColor?: string;\n        fontColor?: string;\n    }\n}\ndeclare module \"packages/layout/src/style/panel.css\" {\n    import { IGridLayoutMediaQuery, IStackMediaQuery, StackDirectionType } from \"packages/layout/src/index\";\n    import { IHover } from \"packages/layout/src/interfaces\";\n    export const panelStyle: string;\n    export const overflowStyle: string;\n    export const vStackStyle: string;\n    export const hStackStyle: string;\n    export const gridStyle: string;\n    export const getStackDirectionStyleClass: (direction: StackDirectionType, reverse: boolean) => string;\n    export const getStackMediaQueriesStyleClass: (mediaQueries: IStackMediaQuery[], currentDirection: StackDirectionType) => string;\n    export const justifyContentStartStyle: string;\n    export const justifyContentCenterStyle: string;\n    export const justifyContentEndStyle: string;\n    export const justifyContentSpaceBetweenStyle: string;\n    export const justifyContentSpaceAroundStyle: string;\n    export const justifyContentSpaceEvenlyStyle: string;\n    export const alignItemsStretchStyle: string;\n    export const alignItemsBaselineStyle: string;\n    export const alignItemsStartStyle: string;\n    export const alignItemsCenterStyle: string;\n    export const alignItemsEndStyle: string;\n    export const alignSelfAutoStyle: string;\n    export const alignSelfStretchStyle: string;\n    export const alignSelfStartStyle: string;\n    export const alignSelfCenterStyle: string;\n    export const alignSelfEndStyle: string;\n    export const alignContentSpaceBetweenStyle: string;\n    export const alignContentSpaceAroundStyle: string;\n    export const alignContentStretchStyle: string;\n    export const alignContentStartStyle: string;\n    export const alignContentCenterStyle: string;\n    export const alignContentEndStyle: string;\n    export const getTemplateColumnsStyleClass: (columns: string[]) => string;\n    export const getTemplateRowsStyleClass: (rows: string[]) => string;\n    export const getTemplateAreasStyleClass: (templateAreas: string[][]) => string;\n    export const getGridLayoutMediaQueriesStyleClass: (mediaQueries: IGridLayoutMediaQuery[]) => string;\n    export const getHoverStyleClass: (hover: IHover) => string;\n}\ndeclare module \"packages/layout/src/stack\" {\n    import { Container, ContainerElement, IMediaQuery, IControlMediaQueryProps } from \"@ijstech/components/base\";\n    import { IHover } from \"packages/layout/src/interfaces\";\n    export interface IStackMediaQueryProps extends IControlMediaQueryProps {\n        direction?: StackDirectionType;\n        gap?: number | string;\n        justifyContent?: StackJustifyContentType;\n        alignItems?: StackAlignItemsType;\n        alignSelf?: StackAlignSelfType;\n        reverse?: boolean;\n    }\n    export type IStackMediaQuery = IMediaQuery<IStackMediaQueryProps>;\n    export type StackWrapType = 'nowrap' | 'wrap' | 'wrap-reverse' | 'initial' | 'inherit';\n    export type StackDirectionType = 'horizontal' | 'vertical';\n    export type StackJustifyContentType = \"start\" | \"center\" | \"end\" | \"space-between\" | \"space-around\" | \"space-evenly\";\n    export type StackAlignItemsType = \"stretch\" | \"start\" | \"center\" | \"end\" | \"baseline\";\n    export type StackAlignSelfType = \"auto\" | \"stretch\" | \"start\" | \"center\" | \"end\";\n    export type StackAlignContentType = \"stretch\" | \"start\" | \"center\" | \"end\" | \"space-between\" | \"space-around\" | \"space-evenly\";\n    export interface StackLayoutElement extends ContainerElement {\n        gap?: number | string;\n        wrap?: StackWrapType;\n        direction?: StackDirectionType;\n        justifyContent?: StackJustifyContentType;\n        alignItems?: StackAlignItemsType;\n        alignSelf?: StackAlignSelfType;\n        alignContent?: StackAlignSelfType;\n        reverse?: boolean;\n        mediaQueries?: IStackMediaQuery[];\n        hover?: IHover;\n    }\n    export type HStackHAlignmentType = StackJustifyContentType;\n    export type HStackVAlignmentType = StackAlignItemsType;\n    export type VStackHAlignmentType = StackAlignItemsType;\n    export type VStackVAlignmentType = StackJustifyContentType;\n    export interface HStackElement extends StackLayoutElement {\n        horizontalAlignment?: HStackHAlignmentType;\n        verticalAlignment?: HStackVAlignmentType;\n    }\n    export interface VStackElement extends StackLayoutElement {\n        horizontalAlignment?: VStackHAlignmentType;\n        verticalAlignment?: VStackVAlignmentType;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-stack']: StackLayoutElement;\n            }\n        }\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-hstack']: HStackElement;\n            }\n        }\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-vstack']: VStackElement;\n            }\n        }\n    }\n    export type StackLayoutAlignmentType<T extends StackDirectionType> = T extends 'horizontal' ? HStackHAlignmentType : VStackHAlignmentType;\n    export type StackVerticalAlignmentType<T extends StackDirectionType> = T extends 'horizontal' ? HStackVAlignmentType : VStackVAlignmentType;\n    export class StackLayout extends Container {\n        private _gap;\n        private _wrap;\n        private _direction;\n        private _reverse;\n        private _justifyContent;\n        private _alignItems;\n        private _alignSelf;\n        private _alignContent;\n        private _mediaQueries;\n        private _hover;\n        constructor(parent?: Container, options?: any);\n        static create(options?: StackLayoutElement, parent?: Container): Promise<StackLayout>;\n        get direction(): StackDirectionType;\n        set direction(value: StackDirectionType);\n        get reverse(): boolean;\n        set reverse(value: boolean);\n        get justifyContent(): StackJustifyContentType;\n        set justifyContent(value: StackJustifyContentType);\n        get alignItems(): StackAlignItemsType;\n        set alignItems(value: StackAlignItemsType);\n        get alignSelf(): StackAlignSelfType;\n        set alignSelf(value: StackAlignSelfType);\n        get alignContent(): StackAlignContentType;\n        set alignContent(value: StackAlignContentType);\n        get gap(): number | string;\n        set gap(value: number | string);\n        get wrap(): StackWrapType;\n        set wrap(value: StackWrapType);\n        get mediaQueries(): IStackMediaQuery[];\n        set mediaQueries(value: IStackMediaQuery[]);\n        get hover(): IHover;\n        set hover(value: IHover);\n        protected removeStyle<P extends keyof StackLayout>(propertyName: P): void;\n        protected setStyle<P extends keyof StackLayout>(propertyName: P, value: string): void;\n        protected init(): void;\n    }\n    export class HStack extends StackLayout {\n        private _horizontalAlignment;\n        private _verticalAlignment;\n        constructor(parent?: Container, options?: any);\n        get horizontalAlignment(): HStackHAlignmentType;\n        set horizontalAlignment(value: HStackHAlignmentType);\n        get verticalAlignment(): HStackVAlignmentType;\n        set verticalAlignment(value: HStackVAlignmentType);\n        protected init(): void;\n        static create(options?: HStackElement, parent?: Container): Promise<HStack>;\n    }\n    export class VStack extends StackLayout {\n        private _horizontalAlignment;\n        private _verticalAlignment;\n        constructor(parent?: Container, options?: any);\n        get horizontalAlignment(): VStackHAlignmentType;\n        set horizontalAlignment(value: VStackHAlignmentType);\n        get verticalAlignment(): VStackVAlignmentType;\n        set verticalAlignment(value: VStackVAlignmentType);\n        init(): void;\n        static create(options?: VStackElement, parent?: Container): Promise<VStack>;\n    }\n}\ndeclare module \"packages/layout/src/panel\" {\n    import { Control, Container, ContainerElement } from \"@ijstech/components/base\";\n    import { IHover } from \"packages/layout/src/interfaces\";\n    export interface PanelElement extends ContainerElement {\n        hover?: IHover;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-panel']: PanelElement;\n            }\n        }\n    }\n    export class Panel extends Container {\n        private _hover;\n        constructor(parent?: Control, options?: any);\n        get hover(): IHover;\n        set hover(value: IHover);\n        protected removeStyle<P extends keyof Panel>(propertyName: P): void;\n        protected setStyle<P extends keyof Panel>(propertyName: P, value: string): void;\n        protected init(): void;\n        connectedCallback(): void;\n        static create(options?: PanelElement, parent?: Control): Promise<Panel>;\n    }\n}\ndeclare module \"packages/layout/src/grid\" {\n    import { Control, ControlElement, Container, IMediaQuery, DisplayType, IBackground, IControlMediaQueryProps } from \"@ijstech/components/base\";\n    export interface IGap {\n        row?: string | number;\n        column?: string | number;\n    }\n    export interface IGridLayoutMediaQueryProps extends IControlMediaQueryProps {\n        templateColumns?: string[];\n        templateRows?: string[];\n        templateAreas?: string[][];\n        display?: DisplayType;\n        gap?: IGap;\n        background?: IBackground;\n    }\n    export type IGridLayoutMediaQuery = IMediaQuery<IGridLayoutMediaQueryProps>;\n    export type GridLayoutHorizontalAlignmentType = \"stretch\" | \"start\" | \"end\" | \"center\";\n    export type GridLayoutVerticalAlignmentType = \"stretch\" | \"start\" | \"end\" | \"center\" | \"baseline\";\n    export interface GridLayoutElement extends ControlElement {\n        templateColumns?: string[];\n        templateRows?: string[];\n        templateAreas?: string[][];\n        display?: DisplayType;\n        autoColumnSize?: string;\n        autoRowSize?: string;\n        columnsPerRow?: number;\n        gap?: IGap;\n        horizontalAlignment?: GridLayoutHorizontalAlignmentType;\n        verticalAlignment?: GridLayoutVerticalAlignmentType;\n        autoFillInHoles?: boolean;\n        mediaQueries?: IGridLayoutMediaQuery[];\n    }\n    export const gridSchemaProps: any;\n    export class GridLayout extends Container {\n        private _templateColumns;\n        private _templateRows;\n        private _templateAreas;\n        private _autoColumnSize;\n        private _autoRowSize;\n        protected _columnsPerRow: number;\n        private _gap;\n        private _horizontalAlignment;\n        private _verticalAlignment;\n        private _autoFillInHoles;\n        private _mediaQueries;\n        private _styleClassMap;\n        constructor(parent?: Control, options?: any);\n        static create(options?: GridLayoutElement, parent?: Container): Promise<GridLayout>;\n        get templateColumns(): string[];\n        set templateColumns(columns: string[]);\n        get templateRows(): string[];\n        set templateRows(rows: string[]);\n        get templateAreas(): string[][];\n        set templateAreas(value: string[][]);\n        get autoColumnSize(): string;\n        set autoColumnSize(value: string);\n        get autoRowSize(): string;\n        set autoRowSize(value: string);\n        get columnsPerRow(): number;\n        set columnsPerRow(value: number);\n        get gap(): IGap;\n        set gap(value: IGap);\n        get horizontalAlignment(): GridLayoutHorizontalAlignmentType;\n        set horizontalAlignment(value: GridLayoutHorizontalAlignmentType);\n        get verticalAlignment(): GridLayoutVerticalAlignmentType;\n        set verticalAlignment(value: GridLayoutVerticalAlignmentType);\n        get autoFillInHoles(): boolean;\n        set autoFillInHoles(value: boolean);\n        get mediaQueries(): IGridLayoutMediaQuery[];\n        set mediaQueries(value: IGridLayoutMediaQuery[]);\n        protected setAttributeToProperty<P extends keyof GridLayout>(propertyName: P): void;\n        protected removeStyleClass(name: string): void;\n        protected init(): void;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-grid-layout']: GridLayoutElement;\n            }\n        }\n    }\n}\ndeclare module \"packages/layout/src/card\" {\n    import { Container } from \"@ijstech/components/base\";\n    import { GridLayout, GridLayoutElement } from \"packages/layout/src/grid\";\n    export interface CardLayoutElement extends GridLayoutElement {\n        cardMinWidth?: number | string;\n        cardHeight?: number | string;\n    }\n    export class CardLayout extends GridLayout {\n        private _cardMinWidth;\n        private _cardHeight;\n        constructor(parent?: Container, options?: any);\n        static create(options?: CardLayoutElement, parent?: Container): Promise<CardLayout>;\n        get cardMinWidth(): number | string;\n        set cardMinWidth(value: number | string);\n        get columnsPerRow(): number;\n        set columnsPerRow(value: number);\n        get cardHeight(): number | string;\n        set cardHeight(value: number | string);\n        updateGridTemplateColumns(): void;\n        protected setAttributeToProperty<P extends keyof CardLayout>(propertyName: P): void;\n        protected init(): void;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-card-layout']: CardLayoutElement;\n            }\n        }\n    }\n}\ndeclare module \"packages/layout/src/index\" {\n    export { StackDirectionType, StackLayout, VStack, VStackElement, HStack, HStackElement, IStackMediaQuery } from \"packages/layout/src/stack\";\n    export { Panel, PanelElement } from \"packages/layout/src/panel\";\n    export { CardLayout, CardLayoutElement } from \"packages/layout/src/card\";\n    export { IGridLayoutMediaQuery, GridLayout, GridLayoutElement } from \"packages/layout/src/grid\";\n}\ndeclare module \"packages/upload/src/style/upload.css\" { }\ndeclare module \"packages/upload/src/upload\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    import \"packages/upload/src/style/upload.css\";\n    type beforeDropCallback = (target: Upload) => void;\n    type changedCallback = (target: Upload, files: UploadRawFile[]) => void;\n    type removedCallback = (target: Upload, file?: File) => void;\n    type uploadingCallback = (target: Upload, file: File) => Promise<boolean>;\n    type addedCallback = (target: Upload, file: File) => Promise<boolean>;\n    export const genFileId: () => number;\n    export interface UploadRawFile extends File {\n        uid?: number;\n        path?: string;\n        cid?: {\n            cid: string;\n            size: number;\n        };\n    }\n    export interface UploadElement extends ControlElement {\n        fileList?: File[];\n        multiple?: boolean;\n        accept?: string;\n        draggable?: boolean;\n        caption?: string;\n        showFileList?: boolean;\n        onBeforeDrop?: beforeDropCallback;\n        onChanged?: changedCallback;\n        onRemoved?: removedCallback;\n        onAdded?: addedCallback;\n        onUploading?: uploadingCallback;\n    }\n    interface UploadDragElement extends ControlElement {\n        fileList?: File[];\n        caption?: string;\n        disabled?: boolean;\n        onBeforeDrop?: any;\n        onDrop?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-upload']: UploadElement;\n                ['i-upload-drag']: UploadDragElement;\n            }\n        }\n    }\n    export class Upload extends Control {\n        private _wrapperElm;\n        private _wrapperFileElm;\n        private _fileElm;\n        private _previewElm;\n        private _previewImgElm;\n        private _previewRemoveElm;\n        private _wrapImgElm;\n        private _fileListElm;\n        private _uploadDragElm;\n        private _caption;\n        private _accept;\n        private _draggable;\n        private _multiple;\n        private isPreviewing;\n        onBeforeDrop: beforeDropCallback;\n        onChanged: changedCallback;\n        onRemoved: removedCallback;\n        onAdded: addedCallback;\n        onUploading: uploadingCallback;\n        private _dt;\n        private _fileList;\n        constructor(parent?: Control, options?: any);\n        get caption(): string;\n        set caption(value: string);\n        get accept(): string;\n        set accept(value: string);\n        get draggable(): boolean;\n        set draggable(value: boolean);\n        get multiple(): boolean;\n        set multiple(value: boolean);\n        get fileList(): UploadRawFile[];\n        set fileList(value: UploadRawFile[]);\n        get enabled(): boolean;\n        set enabled(value: boolean);\n        private addFile;\n        private previewFile;\n        private handleUpload;\n        private proccessFiles;\n        private checkBeforeUpload;\n        private updateFileListUI;\n        private renderPreview;\n        private handleRemoveImagePreview;\n        private handleRemove;\n        toBase64(file: File): Promise<unknown>;\n        preview(uri: string): void;\n        clear(): void;\n        upload(): Promise<void>;\n        addFiles(): void;\n        addFolder(): void;\n        protected init(): void;\n        static create(options?: UploadElement, parent?: Control): Promise<Upload>;\n    }\n}\ndeclare module \"packages/progress/src/style/progress.css\" { }\ndeclare module \"packages/progress/src/progress\" {\n    import { Control, ControlElement, Types, IFont } from \"@ijstech/components/base\";\n    import \"packages/progress/src/style/progress.css\";\n    export type ProgressStatus = 'success' | 'exception' | 'active' | 'warning';\n    export type ProgressType = 'line' | 'circle';\n    type callbackType = (source: Control) => void;\n    export interface ProgressElement extends ControlElement {\n        percent?: number;\n        strokeWidth?: number;\n        strokeColor?: Types.Color;\n        loading?: boolean;\n        steps?: number;\n        type?: ProgressType;\n        format?: (percent: number) => string;\n        onRenderStart?: callbackType;\n        onRenderEnd?: callbackType;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-progress']: ProgressElement;\n            }\n        }\n    }\n    export class Progress extends Control {\n        private _percent;\n        private _status;\n        private _loading;\n        private _steps;\n        private _type;\n        private _strokeWidth;\n        private _strokeColor;\n        private _wrapperElm;\n        private _startElm;\n        private _barElm;\n        private _endElm;\n        private _textElm;\n        format: (percent: number) => string;\n        onRenderStart: callbackType;\n        onRenderEnd: callbackType;\n        constructor(parent?: Control, options?: any);\n        get percent(): number;\n        set percent(value: number);\n        get strokeColor(): Types.Color;\n        set strokeColor(value: Types.Color);\n        get loading(): boolean;\n        set loading(value: boolean);\n        get steps(): number;\n        set steps(value: number);\n        get type(): ProgressType;\n        set type(value: ProgressType);\n        get strokeWidth(): number;\n        set strokeWidth(value: number);\n        get font(): IFont;\n        set font(value: IFont);\n        private get relativeStrokeWidth();\n        private get radius();\n        private get trackPath();\n        private get perimeter();\n        private get rate();\n        private get strokeDashoffset();\n        private get trailPathStyle();\n        private get circlePathStyle();\n        private get stroke();\n        private get trackColor();\n        private get progressTextSize();\n        private renderLine;\n        private renderCircle;\n        private renderCircleInner;\n        private updateCircleInner;\n        protected init(): void;\n        static create(options?: ProgressElement, parent?: Control): Promise<Progress>;\n    }\n}\ndeclare module \"packages/progress/src/index\" {\n    export { Progress } from \"packages/progress/src/progress\";\n}\ndeclare module \"packages/upload/src/style/upload-modal.css\" { }\ndeclare module \"packages/upload/src/upload-modal\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    import { ICidInfo } from \"packages/ipfs/src/index\";\n    import \"packages/upload/src/style/upload-modal.css\";\n    export enum FILE_STATUS {\n        LISTED = 0,\n        SUCCESS = 1,\n        FAILED = 2,\n        UPLOADING = 3\n    }\n    type BeforeUploadedCallback = (target: UploadModal, data: ICidInfo) => void;\n    type UploadedCallback = (target: UploadModal, file: File, cid: string) => void;\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-upload-modal']: UploadModalElement;\n            }\n        }\n    }\n    export interface UploadModalElement extends ControlElement {\n        rootCid?: string;\n        parentDir?: Partial<ICidInfo>;\n        onBeforeUploaded: BeforeUploadedCallback;\n        onUploaded?: UploadedCallback;\n    }\n    export interface IIPFSItem {\n        cid: string;\n        name: string;\n        size: number;\n        type: 'dir' | 'file';\n        links?: IIPFSItem[];\n    }\n    export interface IUploadResult {\n        success: boolean;\n        error?: string;\n        data?: IIPFSItem;\n    }\n    export class UploadModal extends Control {\n        private _uploadModalElm;\n        private _closeBtnElm;\n        private _uploadBoxElm;\n        private _fileUploader;\n        private _fileIcon;\n        private _dragLabelElm;\n        private _statusFilterElm;\n        private _filterBarElm;\n        private _filterActionsElm;\n        private _fileListElm;\n        private _uploadBtnElm;\n        private _notePnlElm;\n        private _paginationElm;\n        private _rootCid;\n        private _parentDir;\n        onBeforeUploaded: BeforeUploadedCallback;\n        onUploaded: UploadedCallback;\n        private isForcedCancelled;\n        private currentRequest;\n        private currentPage;\n        private currentFilterStatus;\n        private files;\n        private fileListData;\n        constructor(parent?: Control, options?: any);\n        get rootCid(): string;\n        set rootCid(value: string);\n        get parentDir(): Partial<ICidInfo>;\n        set parentDir(value: Partial<ICidInfo>);\n        show(): Promise<void>;\n        private updateUI;\n        hide(): void;\n        private onBeforeDrop;\n        private onBeforeUpload;\n        private filteredFileListData;\n        private numPages;\n        private setCurrentPage;\n        private get isSmallWidth();\n        private renderFilterBar;\n        private renderFileList;\n        private formatBytes;\n        private getStatus;\n        private getPagination;\n        private renderPagination;\n        private onChangeCurrentFilterStatus;\n        private onClear;\n        private onCancel;\n        private onChangeFile;\n        private updateBtnCaption;\n        private onRemove;\n        private onRemoveFile;\n        private getDirItems;\n        private onUpload;\n        private reset;\n        private toggle;\n        protected init(): Promise<void>;\n        static create(options?: UploadModalElement, parent?: Control): Promise<UploadModal>;\n    }\n}\ndeclare module \"packages/upload/src/index\" {\n    export { Upload, UploadElement, UploadRawFile } from \"packages/upload/src/upload\";\n    export { UploadModal } from \"packages/upload/src/upload-modal\";\n}\ndeclare module \"packages/tab/src/style/tab.css\" {\n    import { ITabMediaQuery } from \"packages/tab/src/tab\";\n    export const getTabMediaQueriesStyleClass: (mediaQueries: ITabMediaQuery[]) => string;\n}\ndeclare module \"packages/tab/src/tab\" {\n    import { Control, Container, ContainerElement, IFont, IMediaQuery, IControlMediaQueryProps } from \"@ijstech/components/base\";\n    import { Icon, IconElement } from \"packages/icon/src/index\";\n    import \"packages/tab/src/style/tab.css\";\n    type TabModeType = \"horizontal\" | \"vertical\";\n    type TabsEventCallback = (target: Tabs, activeTab: Tab) => void;\n    type TabCloseEventCallback = (target: Tabs, tab: Tab) => void;\n    export interface TabsElement extends ContainerElement {\n        activeTabIndex?: number;\n        closable?: boolean;\n        draggable?: boolean;\n        mode?: TabModeType;\n        mediaQueries?: ITabMediaQuery[];\n        onChanged?: TabsEventCallback;\n        onCloseTab?: TabCloseEventCallback;\n    }\n    export interface TabElement extends ContainerElement {\n        caption?: string;\n        icon?: IconElement;\n        font?: IFont;\n    }\n    export interface ITab extends TabElement {\n        children?: Control | Container;\n    }\n    export interface ITabMediaQueryProps extends IControlMediaQueryProps {\n        mode?: TabModeType;\n    }\n    export type ITabMediaQuery = IMediaQuery<ITabMediaQueryProps>;\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-tabs']: TabsElement;\n                ['i-tab']: TabElement;\n            }\n        }\n    }\n    export class Tabs extends Container {\n        private tabsNavElm;\n        private tabsContentElm;\n        private contentPanes;\n        private _tabs;\n        private _activeTabIndex;\n        private _closable;\n        private _draggable;\n        private _mediaQueries;\n        private accumTabIndex;\n        private curDragTab;\n        onChanged: TabsEventCallback;\n        onCloseTab: TabCloseEventCallback;\n        constructor(parent?: Container, options?: any);\n        get activeTab(): Tab;\n        get activeTabIndex(): number;\n        set activeTabIndex(index: number);\n        get items(): Tab[];\n        get closable(): boolean;\n        set closable(value: boolean);\n        get draggable(): boolean;\n        set draggable(value: boolean);\n        get mode(): TabModeType;\n        set mode(type: TabModeType);\n        get mediaQueries(): ITabMediaQuery[];\n        set mediaQueries(value: ITabMediaQuery[]);\n        add(options?: ITab): Tab;\n        delete(tab: Tab): void;\n        private appendTab;\n        private handleTagDrag;\n        _handleClick(event: MouseEvent): boolean;\n        private dragStartHandler;\n        private dragOverHandler;\n        private dropHandler;\n        refresh(): void;\n        protected init(): void;\n        private initTabsNav;\n        static create(options?: TabsElement, parent?: Container): Promise<Tabs>;\n    }\n    export class Tab extends Container {\n        private tabContainer;\n        private captionElm;\n        private _contentElm;\n        private _icon;\n        protected _parent: Tabs;\n        active(): void;\n        protected addChildControl(control: Control): void;\n        protected removeChildControl(control: Control): void;\n        get caption(): string;\n        set caption(value: string);\n        close(): void;\n        get index(): number;\n        get icon(): Icon;\n        set icon(elm: Icon);\n        get innerHTML(): string;\n        set innerHTML(value: string);\n        get font(): IFont;\n        set font(value: IFont);\n        _handleClick(event: MouseEvent): boolean;\n        private handleCloseTab;\n        init(): void;\n        static create(options?: TabElement, parent?: Control): Promise<Tab>;\n    }\n}\ndeclare module \"packages/tab/src/index\" {\n    export { Tabs, TabsElement, Tab, TabElement } from \"packages/tab/src/tab\";\n}\ndeclare module \"packages/combo-box/src/style/combo-box.css\" {\n    export let ItemListStyle: string;\n}\ndeclare module \"packages/combo-box/src/combo-box\" {\n    import { Control, ControlElement, notifyEventCallback, IBorder, Border, IFont, IBackground, Background } from \"@ijstech/components/base\";\n    import { Icon, IconElement } from \"packages/icon/src/index\";\n    import \"packages/combo-box/src/style/combo-box.css\";\n    export interface IComboItem {\n        value: string;\n        label: string;\n        isNew?: boolean;\n        description?: string;\n        icon?: string;\n    }\n    type ModeType = 'single' | 'multiple' | 'tags';\n    export interface ComboBoxElement extends ControlElement {\n        selectedItem?: IComboItem | IComboItem[];\n        items?: IComboItem[];\n        icon?: IconElement;\n        mode?: ModeType;\n        readOnly?: boolean;\n        placeholder?: string;\n        onChanged?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-combo-box\"]: ComboBoxElement;\n            }\n        }\n    }\n    export class ComboBox extends Control {\n        private _selectedItem;\n        private _caption;\n        private _captionWidth;\n        private _items;\n        private _icon;\n        private _mode;\n        private _readOnly;\n        private _searchStr;\n        private newItem;\n        private isListShown;\n        private captionSpanElm;\n        private labelElm;\n        private inputWrapElm;\n        private inputElm;\n        private iconElm;\n        private listElm;\n        private callback;\n        onChanged: notifyEventCallback;\n        constructor(parent?: Control, options?: any);\n        get value(): IComboItem | IComboItem[] | undefined;\n        set value(value: IComboItem | IComboItem[] | undefined);\n        get selectedItem(): IComboItem | IComboItem[] | undefined;\n        set selectedItem(value: IComboItem | IComboItem[] | undefined);\n        get caption(): string;\n        set caption(value: string);\n        get captionWidth(): number | string;\n        set captionWidth(value: number | string);\n        get items(): IComboItem[];\n        set items(items: IComboItem[]);\n        get icon(): Icon;\n        set icon(value: Icon);\n        get searchStr(): string;\n        set searchStr(str: string);\n        get placeholder(): string;\n        set placeholder(value: string);\n        get mode(): ModeType;\n        set mode(value: ModeType);\n        get isMulti(): boolean;\n        set border(value: IBorder);\n        get border(): Border;\n        get readOnly(): boolean;\n        set readOnly(value: boolean);\n        get background(): Background;\n        set background(value: IBackground);\n        get font(): IFont;\n        set font(value: IFont);\n        private isValueValid;\n        private getItemIndex;\n        private openList;\n        calculatePositon(): void;\n        private closeList;\n        private toggleList;\n        private escapeRegExp;\n        private renderItems;\n        private add;\n        private handleRemove;\n        private onItemClick;\n        clear(): void;\n        protected init(): void;\n        disconnectedCallback(): void;\n        static create(options?: ComboBoxElement, parent?: Control): Promise<ComboBox>;\n    }\n}\ndeclare module \"packages/combo-box/src/index\" {\n    export { ComboBox, ComboBoxElement, IComboItem } from \"packages/combo-box/src/combo-box\";\n}\ndeclare module \"packages/datepicker/src/style/datepicker.css\" { }\ndeclare module \"packages/datepicker/src/datepicker\" {\n    import { ControlElement, Control, notifyEventCallback, IBorder, Border } from \"@ijstech/components/base\";\n    import \"packages/datepicker/src/style/datepicker.css\";\n    import Moment from 'moment';\n    type actionCallback = (target: Datepicker) => void;\n    type dateType = 'date' | 'dateTime' | 'time';\n    export interface DatepickerElement extends ControlElement {\n        caption?: string;\n        captionWidth?: number | string;\n        value?: Moment.Moment;\n        placeholder?: string;\n        type?: dateType;\n        dateTimeFormat?: string;\n        onChanged?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-datepicker']: DatepickerElement;\n            }\n        }\n    }\n    export class Datepicker extends Control {\n        private _value?;\n        private _caption;\n        private _captionWidth;\n        private _iconWidth;\n        private _dateTimeFormat;\n        private _type;\n        private _placeholder;\n        private callback;\n        private captionSpanElm;\n        private labelElm;\n        private inputElm;\n        private toggleElm;\n        private toggleIconElm;\n        private datepickerElm;\n        onChanged: notifyEventCallback;\n        onBlur: actionCallback;\n        constructor(parent?: Control, options?: any);\n        _handleClick(event: MouseEvent): boolean;\n        get caption(): string;\n        set caption(value: string);\n        get captionWidth(): number;\n        set captionWidth(value: number | string);\n        get height(): number;\n        set height(value: number | string);\n        get width(): number;\n        set width(value: number | string);\n        set border(value: IBorder);\n        get border(): Border;\n        get value(): Moment.Moment | undefined;\n        set value(value: Moment.Moment | undefined);\n        get defaultDateTimeFormat(): string;\n        get dateTimeFormat(): string;\n        set dateTimeFormat(format: string);\n        get datepickerFormat(): string;\n        get maxLength(): number;\n        get enabled(): boolean;\n        set enabled(value: boolean);\n        get placeholder(): string;\n        set placeholder(value: string);\n        get type(): dateType;\n        set type(value: dateType);\n        private get formatString();\n        private _onDatePickerChange;\n        private _onBlur;\n        private updateValue;\n        private clear;\n        protected init(): void;\n        protected _handleBlur(event: Event, stopPropagation?: boolean): boolean;\n        static create(options?: DatepickerElement, parent?: Control): Promise<Datepicker>;\n    }\n}\ndeclare module \"packages/datepicker/src/index\" {\n    export { Datepicker, DatepickerElement } from \"packages/datepicker/src/datepicker\";\n}\ndeclare module \"packages/range/src/style/range.css\" { }\ndeclare module \"packages/range/src/range\" {\n    import { Control, ControlElement, notifyEventCallback, Types } from \"@ijstech/components/base\";\n    import \"packages/range/src/style/range.css\";\n    export interface RangeElement extends ControlElement {\n        caption?: string;\n        captionWidth?: number | string;\n        value?: number;\n        min?: number;\n        max?: number;\n        step?: number;\n        stepDots?: boolean | number;\n        tooltipFormatter?: any;\n        tooltipVisible?: boolean;\n        trackColor?: Types.Color;\n        onChanged?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-range']: RangeElement;\n            }\n        }\n    }\n    export class Range extends Control {\n        private _value;\n        private _caption;\n        private _captionWidth;\n        private _tooltipVisible;\n        private _trackColor;\n        private tooltipFormatter;\n        private captionSpanElm;\n        private labelElm;\n        private inputElm;\n        private inputContainerElm;\n        private tooltipElm;\n        onChanged: notifyEventCallback;\n        onKeyUp: notifyEventCallback;\n        private callback;\n        constructor(parent?: Control, options?: any);\n        get caption(): string;\n        set caption(value: string);\n        get captionWidth(): number;\n        set captionWidth(value: number | string);\n        get value(): number;\n        set value(value: number);\n        get width(): number;\n        set width(value: number | string);\n        get enabled(): boolean;\n        set enabled(value: boolean);\n        get tooltipVisible(): boolean;\n        set tooltipVisible(value: boolean);\n        get trackColor(): Types.Color;\n        set trackColor(value: Types.Color);\n        private onSliderChange;\n        private onUpdateTooltip;\n        protected init(): void;\n        static create(options?: RangeElement, parent?: Control): Promise<Range>;\n    }\n}\ndeclare module \"packages/range/src/index\" {\n    export { Range, RangeElement } from \"packages/range/src/range\";\n}\ndeclare module \"packages/radio/src/radio.css\" {\n    export const captionStyle: string;\n}\ndeclare module \"packages/radio/src/radio\" {\n    import { Control, ControlElement, notifyEventCallback, IFont } from \"@ijstech/components/base\";\n    export interface RadioElement extends ControlElement {\n        caption?: string;\n        captionWidth?: number | string;\n        value?: string;\n    }\n    export type RadioGroupLayout = 'vertical' | 'horizontal';\n    export interface RadioGroupElement extends ControlElement {\n        layout?: RadioGroupLayout;\n        selectedValue?: string;\n        radioItems?: RadioElement[];\n        onChanged?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-radio-group']: RadioGroupElement;\n                ['i-radio']: RadioElement;\n            }\n        }\n    }\n    export class Radio extends Control {\n        private _value;\n        private _caption;\n        private _captionWidth;\n        private labelElm;\n        private inputElm;\n        private captionSpanElm;\n        constructor(parent?: Control, options?: any);\n        get value(): string;\n        set value(value: string);\n        get caption(): string;\n        set caption(value: string);\n        get captionWidth(): number | string;\n        set captionWidth(value: number | string);\n        set font(value: IFont);\n        get font(): IFont;\n        _handleClick(event: MouseEvent): boolean;\n        protected init(): void;\n        static create(options?: RadioElement, parent?: Control): Promise<Radio>;\n    }\n    export class RadioGroup extends Control {\n        private _selectedValue;\n        private _radioItems;\n        private _layout;\n        private _group;\n        private name;\n        onChanged: notifyEventCallback;\n        constructor(parent?: Control, options?: any);\n        get selectedValue(): string;\n        set selectedValue(value: string);\n        get radioItems(): RadioElement[];\n        set radioItems(value: RadioElement[]);\n        get layout(): RadioGroupLayout;\n        set layout(value: RadioGroupLayout);\n        private renderUI;\n        private appendItem;\n        private _handleChange;\n        add(options: RadioElement): Radio;\n        delete(index: number): void;\n        protected init(): void;\n        static create(options?: RadioGroupElement, parent?: Control): Promise<RadioGroup>;\n    }\n}\ndeclare module \"packages/radio/src/index\" {\n    export { Radio, RadioElement, RadioGroup, RadioGroupElement, RadioGroupLayout } from \"packages/radio/src/radio\";\n}\ndeclare module \"packages/color/src/utils\" {\n    export function stringToArr(color: string, isRgb: boolean): string[];\n    export function hslaToHex(h: number, s: number, l: number, a: number): string;\n    export function rgbToHex(rgba: string[]): string;\n    export function hslaToRgba(h: number, s: number, l: number): {\n        r: number;\n        g: number;\n        b: number;\n    };\n    export function rgbaToHsla(r: number, g: number, b: number): {\n        h: number;\n        s: number;\n        l: number;\n    };\n    export function getUnitValues(h: number, s: number, l: number, a: number): {\n        hex: string;\n        isValid: boolean;\n        r: number;\n        g: number;\n        b: number;\n        h: number;\n        s: number;\n        l: number;\n        a: number;\n    };\n    export function convertColor(color: string): any;\n    export function isRgbValid(value: string): boolean;\n    export function isHValid(value: string): boolean;\n    export function isPercentValid(value: string): boolean;\n    export function customRound(value: number, threshold: number): number;\n    export function hsvToHsl(h: number, s: number, v: number): {\n        h: number;\n        s: number;\n        l: number;\n    };\n    export function hslToHsv(h: number, s: number, l: number): {\n        h: number;\n        s: number;\n        v: number;\n    };\n}\ndeclare module \"packages/color/src/style/color.css\" { }\ndeclare module \"packages/color/src/color\" {\n    import { ControlElement, Control, notifyEventCallback } from \"@ijstech/components/base\";\n    import \"packages/color/src/style/color.css\";\n    export interface ColorPickerElement extends ControlElement {\n        value?: string;\n        caption?: string;\n        captionWidth?: number | string;\n        onChanged?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-color']: ColorPickerElement;\n            }\n        }\n    }\n    export class ColorPicker extends Control {\n        private wrapperElm;\n        private inputSpanElm;\n        private captionSpanElm;\n        private mdColorPicker;\n        private colorPalette;\n        private colorSlider;\n        private pnlShown;\n        private pnlWrap;\n        private pnlInput;\n        private colorSelected;\n        private _caption;\n        private _captionWidth;\n        private _format;\n        private inputMap;\n        private currentH;\n        private currentColor;\n        private currentPalette;\n        private isMousePressed;\n        onChanged: notifyEventCallback;\n        onClosed: () => void;\n        constructor(parent?: Control, options?: any);\n        get value(): string;\n        set value(color: string);\n        get caption(): string;\n        set caption(value: string);\n        get captionWidth(): number | string;\n        set captionWidth(value: number | string);\n        get height(): number;\n        set height(value: number | string);\n        protected init(): Promise<void>;\n        private onOpenPicker;\n        private onClosePicker;\n        private createInputGroup;\n        private createPreview;\n        protected _handleMouseDown(event: MouseEvent): boolean;\n        private handleMouseMove;\n        private handleMouseUp;\n        private createPicker;\n        private activeEyeDropper;\n        private onPaletteChanged;\n        private onSliderChanged;\n        private onToggleFormat;\n        private updateIconPointer;\n        private onColorSelected;\n        private updateColor;\n        private updateCurrentColor;\n        private updateHex;\n        private updateUI;\n        private initUI;\n        private setPalette;\n        private onInputChanged;\n        static create(options?: ColorPickerElement, parent?: Control): Promise<ColorPicker>;\n    }\n}\ndeclare module \"packages/color/src/index\" {\n    export { ColorPicker, ColorPickerElement } from \"packages/color/src/color\";\n}\ndeclare module \"packages/input/src/style/input.css\" { }\ndeclare module \"packages/input/src/input\" {\n    import { Control, ControlElement, notifyEventCallback, IBorder, Border, IBackground, Background, IFont } from \"@ijstech/components/base\";\n    import { Checkbox, CheckboxElement } from \"packages/checkbox/src/index\";\n    import { ComboBox, ComboBoxElement } from \"packages/combo-box/src/index\";\n    import { Datepicker, DatepickerElement } from \"packages/datepicker/src/index\";\n    import { Range, RangeElement } from \"packages/range/src/index\";\n    import { Radio, RadioElement } from \"packages/radio/src/index\";\n    import { ColorPicker } from \"packages/color/src/index\";\n    import \"packages/input/src/style/input.css\";\n    export type InputType = 'checkbox' | 'radio' | 'range' | 'date' | 'time' | 'dateTime' | 'password' | 'combobox' | 'number' | 'textarea' | 'text' | 'color';\n    type InputControlType = Checkbox | ComboBox | Datepicker | Range | Radio | ColorPicker;\n    type actionCallback = (target: Input) => void;\n    type resizeType = \"none\" | \"auto\" | \"both\" | \"horizontal\" | \"vertical\" | \"initial\" | \"inherit\" | \"auto-grow\";\n    export interface InputElement extends ControlElement, CheckboxElement, ComboBoxElement, DatepickerElement, RangeElement, RadioElement {\n        caption?: string;\n        captionWidth?: number | string;\n        inputType?: InputType;\n        value?: any;\n        placeholder?: string;\n        readOnly?: boolean;\n        showClearButton?: boolean;\n        rows?: number;\n        multiline?: boolean;\n        resize?: resizeType;\n        maxLength?: number;\n        onChanged?: notifyEventCallback;\n        onKeyDown?: notifyEventCallback;\n        onKeyUp?: notifyEventCallback;\n        onBlur?: actionCallback;\n        onFocus?: actionCallback;\n        onClearClick?: actionCallback;\n        onClosed?: () => void;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-input']: InputElement;\n            }\n        }\n    }\n    export class Input extends Control {\n        private _value;\n        private _caption;\n        private _captionWidth;\n        private _inputType;\n        private _placeholder;\n        private _readOnly;\n        private _showClearButton;\n        private _clearBtnWidth;\n        private _rows;\n        private _multiline;\n        private _resize;\n        private _maxLength;\n        private captionSpanElm;\n        private labelElm;\n        private inputElm;\n        private _inputControl;\n        private clearIconElm;\n        private _onClosed;\n        onKeyDown: notifyEventCallback;\n        onKeyUp: notifyEventCallback;\n        onChanged: notifyEventCallback;\n        onBlur: actionCallback;\n        onFocus: actionCallback;\n        onClearClick: actionCallback;\n        constructor(parent?: Control, options?: any);\n        get caption(): string;\n        set caption(value: string);\n        get captionWidth(): number | string;\n        set captionWidth(value: number | string);\n        get height(): number;\n        set height(value: number | string);\n        get value(): any;\n        set value(value: any);\n        get width(): number | string;\n        set width(value: number | string);\n        get readOnly(): boolean;\n        set readOnly(value: boolean);\n        get inputType(): InputType;\n        set inputType(type: InputType);\n        get inputControl(): InputControlType;\n        get enabled(): boolean;\n        set enabled(value: boolean);\n        set placeholder(value: string);\n        get rows(): number;\n        set rows(value: number);\n        get multiline(): boolean;\n        set multiline(value: boolean);\n        get resize(): resizeType;\n        set resize(value: resizeType);\n        set border(value: IBorder);\n        get border(): Border;\n        set maxLength(value: number);\n        get maxLength(): number;\n        get background(): Background;\n        set background(value: IBackground);\n        get font(): IFont;\n        set font(value: IFont);\n        set onClosed(callback: () => void);\n        get onClosed(): () => void;\n        private _createInputElement;\n        private _inputCallback;\n        private _handleChange;\n        private _handleInputKeyDown;\n        private _handleInputKeyUp;\n        protected _handleBlur(event: Event, stopPropagation?: boolean): boolean;\n        private _handleOnFocus;\n        private _clearValue;\n        focus(): void;\n        protected init(): void;\n        static create(options?: InputElement, parent?: Control): Promise<Input>;\n    }\n}\ndeclare module \"packages/input/src/index\" {\n    export { Input, InputElement } from \"packages/input/src/input\";\n}\ndeclare module \"packages/switch/src/style/switch.css\" { }\ndeclare module \"packages/switch/src/switch\" {\n    import { Control, ControlElement, notifyEventCallback } from \"@ijstech/components/base\";\n    import \"packages/switch/src/style/switch.css\";\n    export interface SwitchElement extends ControlElement {\n        checkedThumbColor?: string;\n        uncheckedThumbColor?: string;\n        checkedThumbText?: string;\n        uncheckedThumbText?: string;\n        checkedTrackColor?: string;\n        uncheckedTrackColor?: string;\n        checkedText?: string;\n        uncheckedText?: string;\n        checked?: boolean;\n        onChanged?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-switch\"]: SwitchElement;\n            }\n        }\n    }\n    export class Switch extends Control {\n        private wrapperElm;\n        private switchBaseElm;\n        private inputElm;\n        private thumbElm;\n        private rippleElm;\n        private trackElm;\n        private _checked;\n        private _checkedThumbColor;\n        private _uncheckedThumbColor;\n        private _checkedTrackColor;\n        private _uncheckedTrackColor;\n        private _checkedText;\n        private _uncheckedText;\n        private _checkedThumbText;\n        private _uncheckedThumbText;\n        onChanged: notifyEventCallback;\n        constructor(parent?: Control, options?: any);\n        get checked(): boolean;\n        set checked(value: boolean);\n        get checkedThumbColor(): string;\n        set checkedThumbColor(value: string);\n        get uncheckedThumbColor(): string;\n        set uncheckedThumbColor(value: string);\n        get checkedTrackColor(): string;\n        set checkedTrackColor(value: string);\n        get uncheckedTrackColor(): string;\n        set uncheckedTrackColor(value: string);\n        get checkedText(): string;\n        set checkedText(value: string);\n        get uncheckedText(): string;\n        set uncheckedText(value: string);\n        get checkedThumbText(): string;\n        set checkedThumbText(value: string);\n        get uncheckedThumbText(): string;\n        set uncheckedThumbText(value: string);\n        protected setAttributeToProperty<P extends keyof Switch>(propertyName: P): void;\n        _handleClick(event: MouseEvent): boolean;\n        init(): void;\n        static create(options?: SwitchElement, parent?: Control): Promise<Switch>;\n    }\n}\ndeclare module \"packages/switch/src/index\" {\n    export { Switch, SwitchElement } from \"packages/switch/src/switch\";\n}\ndeclare module \"packages/application/src/styles/jsonUI.css\" {\n    export const jsonUICheckboxStyle: string;\n    export const jsonUIComboboxStyle: string;\n    export const jsonUITabStyle: string;\n}\ndeclare module \"packages/application/src/jsonUI\" {\n    import { Control } from \"@ijstech/components/base\";\n    type IJSONSchema4TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';\n    type IJSONSchema4Type = string | number | boolean | IJSONSchema4Object | IJSONSchema4Array | null;\n    interface IJSONSchema4Object {\n        [key: string]: IJSONSchema4Type;\n    }\n    interface IJSONSchema4Array extends Array<IJSONSchema4Type> {\n    }\n    type IJSONSchema4Version = string;\n    interface IJSONSchema4 {\n        id?: string | undefined;\n        $ref?: string | undefined;\n        $schema?: IJSONSchema4Version | undefined;\n        title?: string | undefined;\n        description?: string | undefined;\n        default?: IJSONSchema4Type | undefined;\n        multipleOf?: number | undefined;\n        maximum?: number | undefined;\n        exclusiveMaximum?: boolean | undefined;\n        minimum?: number | undefined;\n        exclusiveMinimum?: boolean | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        pattern?: string | undefined;\n        additionalItems?: boolean | IJSONSchema4 | undefined;\n        items?: IJSONSchema4 | IJSONSchema4[] | undefined;\n        maxItems?: number | undefined;\n        minItems?: number | undefined;\n        uniqueItems?: boolean | undefined;\n        maxProperties?: number | undefined;\n        minProperties?: number | undefined;\n        required?: boolean | string[] | undefined;\n        additionalProperties?: boolean | IJSONSchema4 | undefined;\n        definitions?: {\n            [k: string]: IJSONSchema4;\n        } | undefined;\n        properties?: {\n            [k: string]: IJSONSchema4;\n        } | undefined;\n        patternProperties?: {\n            [k: string]: IJSONSchema4;\n        } | undefined;\n        dependencies?: {\n            [k: string]: IJSONSchema4 | string[];\n        } | undefined;\n        enum?: IJSONSchema4Type[] | undefined;\n        type?: IJSONSchema4TypeName | IJSONSchema4TypeName[] | undefined;\n        allOf?: IJSONSchema4[] | undefined;\n        anyOf?: IJSONSchema4[] | undefined;\n        oneOf?: IJSONSchema4[] | undefined;\n        not?: IJSONSchema4 | undefined;\n        extends?: string | string[] | undefined;\n        [k: string]: any;\n        format?: string | undefined;\n    }\n    type IJSONSchema6TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';\n    type IJSONSchema6Type = string | number | boolean | IJSONSchema6Object | IJSONSchema6Array | null;\n    interface IJSONSchema6Object {\n        [key: string]: IJSONSchema6Type;\n    }\n    interface IJSONSchema6Array extends Array<IJSONSchema6Type> {\n    }\n    type IJSONSchema6Version = string;\n    type IJSONSchema6Definition = IJSONSchema6 | boolean;\n    interface IJSONSchema6 {\n        $id?: string | undefined;\n        $ref?: string | undefined;\n        $schema?: IJSONSchema6Version | undefined;\n        multipleOf?: number | undefined;\n        maximum?: number | undefined;\n        exclusiveMaximum?: number | undefined;\n        minimum?: number | undefined;\n        exclusiveMinimum?: number | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        pattern?: string | undefined;\n        items?: IJSONSchema6Definition | IJSONSchema6Definition[] | undefined;\n        additionalItems?: IJSONSchema6Definition | undefined;\n        maxItems?: number | undefined;\n        minItems?: number | undefined;\n        uniqueItems?: boolean | undefined;\n        contains?: IJSONSchema6Definition | undefined;\n        maxProperties?: number | undefined;\n        minProperties?: number | undefined;\n        required?: string[] | undefined;\n        properties?: {\n            [k: string]: IJSONSchema6Definition;\n        } | undefined;\n        patternProperties?: {\n            [k: string]: IJSONSchema6Definition;\n        } | undefined;\n        additionalProperties?: IJSONSchema6Definition | undefined;\n        dependencies?: {\n            [k: string]: IJSONSchema6Definition | string[];\n        } | undefined;\n        propertyNames?: IJSONSchema6Definition | undefined;\n        enum?: IJSONSchema6Type[] | undefined;\n        const?: IJSONSchema6Type | undefined;\n        type?: IJSONSchema6TypeName | IJSONSchema6TypeName[] | undefined;\n        allOf?: IJSONSchema6Definition[] | undefined;\n        anyOf?: IJSONSchema6Definition[] | undefined;\n        oneOf?: IJSONSchema6Definition[] | undefined;\n        not?: IJSONSchema6Definition | undefined;\n        definitions?: {\n            [k: string]: IJSONSchema6Definition;\n        } | undefined;\n        title?: string | undefined;\n        description?: string | undefined;\n        default?: IJSONSchema6Type | undefined;\n        examples?: IJSONSchema6Type[] | undefined;\n        format?: string | undefined;\n    }\n    type IJSONSchema7TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null';\n    type IJSONSchema7Type = string | number | boolean | IJSONSchema7Object | IJSONSchema7Array | null;\n    interface IJSONSchema7Object {\n        [key: string]: IJSONSchema7Type;\n    }\n    interface IJSONSchema7Array extends Array<IJSONSchema7Type> {\n    }\n    type IJSONSchema7Version = string;\n    type IJSONSchema7Definition = IJSONSchema7 | boolean;\n    interface IJSONSchema7 {\n        $id?: string | undefined;\n        $ref?: string | undefined;\n        $schema?: IJSONSchema7Version | undefined;\n        $comment?: string | undefined;\n        $defs?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        type?: IJSONSchema7TypeName | IJSONSchema7TypeName[] | undefined;\n        enum?: IJSONSchema7Type[] | undefined;\n        const?: IJSONSchema7Type | undefined;\n        multipleOf?: number | undefined;\n        maximum?: number | undefined;\n        exclusiveMaximum?: number | undefined;\n        minimum?: number | undefined;\n        exclusiveMinimum?: number | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        pattern?: string | undefined;\n        items?: IJSONSchema7Definition | IJSONSchema7Definition[] | undefined;\n        additionalItems?: IJSONSchema7Definition | undefined;\n        maxItems?: number | undefined;\n        minItems?: number | undefined;\n        uniqueItems?: boolean | undefined;\n        contains?: IJSONSchema7 | undefined;\n        maxProperties?: number | undefined;\n        minProperties?: number | undefined;\n        required?: string[] | undefined;\n        properties?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        patternProperties?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        additionalProperties?: IJSONSchema7Definition | undefined;\n        dependencies?: {\n            [key: string]: IJSONSchema7Definition | string[];\n        } | undefined;\n        propertyNames?: IJSONSchema7Definition | undefined;\n        if?: IJSONSchema7Definition | undefined;\n        then?: IJSONSchema7Definition | undefined;\n        else?: IJSONSchema7Definition | undefined;\n        allOf?: IJSONSchema7Definition[] | undefined;\n        anyOf?: IJSONSchema7Definition[] | undefined;\n        oneOf?: IJSONSchema7Definition[] | undefined;\n        not?: IJSONSchema7Definition | undefined;\n        format?: string | undefined;\n        contentMediaType?: string | undefined;\n        contentEncoding?: string | undefined;\n        definitions?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        title?: string | undefined;\n        description?: string | undefined;\n        default?: IJSONSchema7Type | undefined;\n        readOnly?: boolean | undefined;\n        writeOnly?: boolean | undefined;\n        examples?: IJSONSchema7Type | undefined;\n    }\n    export type IUISchemaType = 'VerticalLayout' | 'HorizontalLayout' | 'Group' | 'Categorization' | 'Category' | 'Control';\n    export type IUISchemaRulesEffect = 'HIDE' | 'SHOW' | 'DISABLE' | 'ENABLE';\n    export interface IUISchemaRulesCondition {\n        scope: string;\n        schema: {\n            [key: string]: any;\n        };\n    }\n    export interface IUISchema {\n        type: IUISchemaType;\n        elements?: IUISchema[];\n        label?: string | boolean;\n        scope?: string;\n        rule?: IUISchemaRules;\n        options?: IUISchemaOptions;\n    }\n    export interface IUISchemaOptions {\n        detail?: 'DEFAULT' | 'GENERATED' | 'REGISTERED' | IUISchema;\n        showSortButtons?: boolean;\n        elementLabelProp?: string;\n        format?: 'date' | 'time' | 'date-time' | 'radio';\n        slider?: boolean;\n        multi?: boolean;\n        color?: boolean;\n        restrict?: boolean;\n        showUnfocusedDescription?: boolean;\n        hideRequiredAsterisk?: boolean;\n        toggle?: boolean;\n        readonly?: boolean;\n        autocomplete?: boolean;\n        variant?: 'stepper';\n    }\n    export interface IUISchemaRules {\n        effect?: IUISchemaRulesEffect;\n        condition?: IUISchemaRulesCondition;\n    }\n    interface ValidationResult {\n        valid: boolean;\n        errors: ValidationError[];\n    }\n    interface ValidationError {\n        property: string;\n        scope: string;\n        message: string;\n    }\n    export type IDataSchema = IJSONSchema4 | IJSONSchema6 | IJSONSchema7;\n    export const DataSchemaValidator: {\n        checkPropertyChange: (value: any, schema: IDataSchema, property: string) => ValidationResult | null;\n        mustBeValid: (result: ValidationResult) => void;\n        validate: (instance: any, schema: IDataSchema, options: any) => ValidationResult | null;\n    };\n    export interface IRenderUIOptions {\n        jsonSchema: IDataSchema;\n        data?: any;\n        jsonUISchema?: IUISchema;\n        hideConfirmButton?: boolean;\n        columnsPerRow?: number;\n        showClearButton?: boolean;\n        clearButtonCaption?: string;\n        confirmButtonCaption?: string;\n        confirmButtonBackgroundColor?: string;\n        confirmButtonFontColor?: string;\n        columnWidth?: string | number;\n        clearButtonBackgroundColor?: string;\n        clearButtonFontColor?: string;\n        dateFormat?: string;\n        timeFormat?: string;\n        dateTimeFormat?: string;\n    }\n    export function renderUI(target: Control, options: IRenderUIOptions, confirmCallback?: (result: boolean, data: any) => void, valueChangedCallback?: (data: any, errMsg: string) => void): void;\n}\ndeclare module \"packages/moment/src/index\" {\n    import Moment from 'moment';\n    var moment: typeof Moment;\n    export { moment };\n}\ndeclare module \"packages/application/src/formatUtils\" {\n    type RoundingMethod = 'floor' | 'round' | 'ceil';\n    export interface IFormatNumberOptions {\n        useSeparators?: boolean;\n        roundingMethod?: RoundingMethod;\n        decimalFigures?: number;\n        minValue?: number | string;\n        shortScale?: boolean;\n        hasTrailingZero?: boolean;\n    }\n    export class FormatUtils {\n        static unixToFormattedDate(unixTimestamp: number): string;\n        static truncateTxHash(hash: string, length?: number): string;\n        static truncateWalletAddress(address: string): string;\n        static formatNumber(value: BigInt | string | number, options?: IFormatNumberOptions): string;\n        private static scaleValue;\n        private static removeExponential;\n        private static compareToMinValue;\n        private static processDecimalPart;\n        private static customRound;\n        private static roundIntegerPart;\n        private static incrementLastDigit;\n    }\n    export class BigDecimal {\n        static decimals: number;\n        private bigVal;\n        constructor(value: string);\n        static fromBigInt(bigVal: bigint): any;\n        toString(): string;\n        divide(value: BigDecimal): any;\n    }\n}\ndeclare module \"packages/application/src/idUtils\" {\n    export class IdUtils {\n        static generateUUID(length?: number): string;\n    }\n}\ndeclare module \"packages/application/src/index\" {\n    import { Module } from \"packages/module/src/index\";\n    import { EventBus } from \"packages/application/src/event-bus\";\n    import { GlobalEvents } from \"packages/application/src/globalEvent\";\n    import { ICidInfo } from \"packages/ipfs/src/index\";\n    export interface IGeo {\n        enabled: boolean;\n        apiUrl?: string;\n        blockedCountries: string[];\n        moduleOnBlocking: string;\n    }\n    export interface IGeoInfo {\n        country: string;\n        timezone: string;\n    }\n    export interface IHasDependencies {\n        assets?: string;\n        bundle?: boolean;\n        ipfs?: string;\n        rootDir?: string;\n        moduleDir?: string;\n        libDir?: string;\n        main?: string;\n        geo?: IGeo;\n        dependencies?: {\n            [name: string]: string;\n        };\n        modules?: {\n            [name: string]: {\n                path: string;\n                dependencies: string[];\n            };\n        };\n        script?: string;\n    }\n    export interface IModuleRoute extends IHasDependencies {\n        url: string;\n        module: string;\n        default?: boolean;\n    }\n    export interface IModuleMenuItem {\n        text: string;\n        to: string;\n        isToExternal?: boolean;\n        img?: string;\n        subItems?: IModuleMenuItem[];\n        isDisabled?: boolean;\n        supportedChainIds?: number[];\n        env?: string[];\n    }\n    export interface IModuleOptions extends IHasDependencies {\n        codeCID?: string;\n        name?: string;\n        main?: string;\n        type?: number;\n        version?: string;\n        root?: string;\n        routes?: IModuleRoute[];\n        params?: any;\n        menuItems?: IModuleMenuItem[];\n        env?: string;\n    }\n    export enum IpfsDataType {\n        Raw = 0,\n        Directory = 1,\n        File = 2,\n        Metadata = 3,\n        Symlink = 4,\n        HAMTShard = 5\n    }\n    export interface IUploadResult {\n        success: boolean;\n        error?: string;\n        data?: ICidInfo;\n    }\n    export interface IUploadItem {\n        cid: ICidInfo;\n        data?: File | string;\n    }\n    class Application {\n        private static _instance;\n        private modules;\n        private modulesId;\n        private scripts;\n        globalEvents: GlobalEvents;\n        private id;\n        currentModulePath: string;\n        currentModuleDir: string;\n        LibHost: string;\n        private packageNames;\n        private packages;\n        _assets: {\n            [name: string]: any;\n        };\n        private _initOptions?;\n        private _uploadModal;\n        private cidItems;\n        geoInfo: IGeoInfo;\n        private bundleLibs;\n        store: Record<string, any>;\n        rootDir: string;\n        private constructor();\n        get EventBus(): EventBus;\n        static get Instance(): Application;\n        assets(name: string): any;\n        private calculateElementScconfigPath;\n        createElement(name: string, lazyLoad?: boolean, attributes?: {\n            [name: string]: string;\n        }, modulePath?: string): Promise<HTMLElement | undefined>;\n        fetch(input: RequestInfo, init?: RequestInit | undefined): Promise<Response>;\n        postData(endpoint: string, data: any): Promise<any>;\n        showUploadModal(): Promise<void>;\n        getUploadUrl(item: ICidInfo): Promise<{\n            [cid: string]: string;\n        }>;\n        uploadData(fileName: string, content: string): Promise<IUploadResult>;\n        uploadFile(extensions?: string | string[]): Promise<IUploadResult>;\n        uploadTo(targetCid: string, items: IUploadItem[]): Promise<IUploadResult>;\n        upload(url: string, data: File | string): Promise<number>;\n        private getCidItem;\n        private verifyScript;\n        private getScript;\n        loadScript(modulePath: string, script?: string): Promise<boolean>;\n        getContent(modulePath: string): Promise<string>;\n        fetchDirectoryInfoByCID(ipfsCid: string): Promise<ICidInfo[]>;\n        private calculatePackageModulePath;\n        loadPackage(packageName: string, modulePath?: string): Promise<{\n            [name: string]: any;\n        } | null>;\n        loadPackages(packages: string[]): Promise<void>;\n        private dynamicImportPackage;\n        loadModule(modulePath: string, options?: IHasDependencies): Promise<Module | null>;\n        private getModulePath;\n        initModule(modulePath: string, script: string): Promise<string | null>;\n        init(scconfigPath: string, customData?: Record<string, any>): Promise<Module | null>;\n        newModule(module: string, options?: IHasDependencies): Promise<Module | null>;\n        copyToClipboard(value: string): Promise<boolean>;\n        xssSanitize(value: string): string;\n    }\n    export const application: Application;\n    export { EventBus, IEventBus } from \"packages/application/src/event-bus\";\n    export { IDataSchema, IUISchema, IRenderUIOptions, renderUI, DataSchemaValidator } from \"packages/application/src/jsonUI\";\n    export { FormatUtils, IFormatNumberOptions } from \"packages/application/src/formatUtils\";\n    export { IdUtils } from \"packages/application/src/idUtils\";\n    export default application;\n}\ndeclare module \"packages/alert/src/style/alert.css\" { }\ndeclare module \"packages/alert/src/alert\" {\n    import { Control, Container, ControlElement } from \"@ijstech/components/base\";\n    import \"packages/alert/src/style/alert.css\";\n    export interface AlertElement extends ControlElement {\n        status?: \"warning\" | \"success\" | \"error\" | \"loading\" | \"confirm\";\n        title?: string;\n        content?: string;\n        link?: {\n            caption: string;\n            href: string;\n        };\n        onClose?: any;\n        onConfirm?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-alert\"]: AlertElement;\n            }\n        }\n    }\n    export interface IAlertMessage {\n        status: \"warning\" | \"success\" | \"error\" | \"loading\" | \"confirm\";\n        title?: string;\n        content?: string;\n        link?: {\n            caption: string;\n            href: string;\n        };\n        onClose?: any;\n        onConfirm?: any;\n    }\n    export class Alert extends Control {\n        private mdAlert;\n        private pnlMain;\n        private _status;\n        private _title;\n        private _content;\n        private _link;\n        onClose?: any;\n        onConfirm?: any;\n        constructor(parent?: Container, options?: any);\n        get status(): string;\n        set status(value: string);\n        get title(): string;\n        set title(value: string);\n        get content(): string;\n        set content(value: string);\n        get link(): {\n            caption: string;\n            href: string;\n        };\n        set link(value: {\n            caption: string;\n            href: string;\n        });\n        private get iconName();\n        private get color();\n        closeModal: () => void;\n        showModal: () => void;\n        private renderUI;\n        private renderContent;\n        private renderLink;\n        private renderButtons;\n        protected init(): Promise<void>;\n    }\n}\ndeclare module \"packages/alert/src/index\" {\n    export { Alert, AlertElement } from \"packages/alert/src/alert\";\n}\ndeclare module \"packages/code-editor/src/editor.api\" {\n    global {\n        let MonacoEnvironment: Environment | undefined;\n    }\n    export type Thenable<T> = PromiseLike<T>;\n    export interface Environment {\n        globalAPI?: boolean;\n        baseUrl?: string;\n        getWorker?(workerId: string, label: string): Worker;\n        getWorkerUrl?(workerId: string, label: string): string;\n    }\n    export interface IDisposable {\n        dispose(): void;\n    }\n    export interface IEvent<T> {\n        (listener: (e: T) => any, thisArg?: any): IDisposable;\n    }\n    export enum MarkerTag {\n        Unnecessary = 1,\n        Deprecated = 2\n    }\n    export enum MarkerSeverity {\n        Hint = 1,\n        Info = 2,\n        Warning = 4,\n        Error = 8\n    }\n    export interface CancellationToken {\n        readonly isCancellationRequested: boolean;\n        readonly onCancellationRequested: (listener: (e: any) => any, thisArgs?: any, disposables?: IDisposable[]) => IDisposable;\n    }\n    export class Uri implements UriComponents {\n        static isUri(thing: any): thing is Uri;\n        readonly scheme: string;\n        readonly authority: string;\n        readonly path: string;\n        readonly query: string;\n        readonly fragment: string;\n        get fsPath(): string;\n        with(change: {\n            scheme?: string;\n            authority?: string | null;\n            path?: string | null;\n            query?: string | null;\n            fragment?: string | null;\n        }): Uri;\n        static parse(value: string, _strict?: boolean): Uri;\n        static file(path: string): Uri;\n        static from(components: {\n            scheme: string;\n            authority?: string;\n            path?: string;\n            query?: string;\n            fragment?: string;\n        }): Uri;\n        static joinPath(uri: Uri, ...pathFragment: string[]): Uri;\n        toString(skipEncoding?: boolean): string;\n        toJSON(): UriComponents;\n        static revive(data: UriComponents | Uri): Uri;\n        static revive(data: UriComponents | Uri | undefined): Uri | undefined;\n        static revive(data: UriComponents | Uri | null): Uri | null;\n        static revive(data: UriComponents | Uri | undefined | null): Uri | undefined | null;\n    }\n    export interface UriComponents {\n        scheme: string;\n        authority: string;\n        path: string;\n        query: string;\n        fragment: string;\n    }\n    export enum KeyCode {\n        DependsOnKbLayout = -1,\n        Unknown = 0,\n        Backspace = 1,\n        Tab = 2,\n        Enter = 3,\n        Shift = 4,\n        Ctrl = 5,\n        Alt = 6,\n        PauseBreak = 7,\n        CapsLock = 8,\n        Escape = 9,\n        Space = 10,\n        PageUp = 11,\n        PageDown = 12,\n        End = 13,\n        Home = 14,\n        LeftArrow = 15,\n        UpArrow = 16,\n        RightArrow = 17,\n        DownArrow = 18,\n        Insert = 19,\n        Delete = 20,\n        Digit0 = 21,\n        Digit1 = 22,\n        Digit2 = 23,\n        Digit3 = 24,\n        Digit4 = 25,\n        Digit5 = 26,\n        Digit6 = 27,\n        Digit7 = 28,\n        Digit8 = 29,\n        Digit9 = 30,\n        KeyA = 31,\n        KeyB = 32,\n        KeyC = 33,\n        KeyD = 34,\n        KeyE = 35,\n        KeyF = 36,\n        KeyG = 37,\n        KeyH = 38,\n        KeyI = 39,\n        KeyJ = 40,\n        KeyK = 41,\n        KeyL = 42,\n        KeyM = 43,\n        KeyN = 44,\n        KeyO = 45,\n        KeyP = 46,\n        KeyQ = 47,\n        KeyR = 48,\n        KeyS = 49,\n        KeyT = 50,\n        KeyU = 51,\n        KeyV = 52,\n        KeyW = 53,\n        KeyX = 54,\n        KeyY = 55,\n        KeyZ = 56,\n        Meta = 57,\n        ContextMenu = 58,\n        F1 = 59,\n        F2 = 60,\n        F3 = 61,\n        F4 = 62,\n        F5 = 63,\n        F6 = 64,\n        F7 = 65,\n        F8 = 66,\n        F9 = 67,\n        F10 = 68,\n        F11 = 69,\n        F12 = 70,\n        F13 = 71,\n        F14 = 72,\n        F15 = 73,\n        F16 = 74,\n        F17 = 75,\n        F18 = 76,\n        F19 = 77,\n        NumLock = 78,\n        ScrollLock = 79,\n        Semicolon = 80,\n        Equal = 81,\n        Comma = 82,\n        Minus = 83,\n        Period = 84,\n        Slash = 85,\n        Backquote = 86,\n        BracketLeft = 87,\n        Backslash = 88,\n        BracketRight = 89,\n        Quote = 90,\n        OEM_8 = 91,\n        IntlBackslash = 92,\n        Numpad0 = 93,\n        Numpad1 = 94,\n        Numpad2 = 95,\n        Numpad3 = 96,\n        Numpad4 = 97,\n        Numpad5 = 98,\n        Numpad6 = 99,\n        Numpad7 = 100,\n        Numpad8 = 101,\n        Numpad9 = 102,\n        NumpadMultiply = 103,\n        NumpadAdd = 104,\n        NUMPAD_SEPARATOR = 105,\n        NumpadSubtract = 106,\n        NumpadDecimal = 107,\n        NumpadDivide = 108,\n        KEY_IN_COMPOSITION = 109,\n        ABNT_C1 = 110,\n        ABNT_C2 = 111,\n        AudioVolumeMute = 112,\n        AudioVolumeUp = 113,\n        AudioVolumeDown = 114,\n        BrowserSearch = 115,\n        BrowserHome = 116,\n        BrowserBack = 117,\n        BrowserForward = 118,\n        MediaTrackNext = 119,\n        MediaTrackPrevious = 120,\n        MediaStop = 121,\n        MediaPlayPause = 122,\n        LaunchMediaPlayer = 123,\n        LaunchMail = 124,\n        LaunchApp2 = 125,\n        MAX_VALUE = 126\n    }\n    export interface IMarkdownString {\n        readonly value: string;\n        readonly isTrusted?: boolean;\n        readonly supportThemeIcons?: boolean;\n        readonly supportHtml?: boolean;\n        uris?: {\n            [href: string]: UriComponents;\n        };\n    }\n    export interface IKeyboardEvent {\n        readonly _standardKeyboardEventBrand: true;\n        readonly browserEvent: KeyboardEvent;\n        readonly target: HTMLElement;\n        readonly ctrlKey: boolean;\n        readonly shiftKey: boolean;\n        readonly altKey: boolean;\n        readonly metaKey: boolean;\n        readonly keyCode: KeyCode;\n        readonly code: string;\n        equals(keybinding: number): boolean;\n        preventDefault(): void;\n        stopPropagation(): void;\n    }\n    export interface IMouseEvent {\n        readonly browserEvent: MouseEvent;\n        readonly leftButton: boolean;\n        readonly middleButton: boolean;\n        readonly rightButton: boolean;\n        readonly buttons: number;\n        readonly target: HTMLElement;\n        readonly detail: number;\n        readonly posx: number;\n        readonly posy: number;\n        readonly ctrlKey: boolean;\n        readonly shiftKey: boolean;\n        readonly altKey: boolean;\n        readonly metaKey: boolean;\n        readonly timestamp: number;\n        preventDefault(): void;\n        stopPropagation(): void;\n    }\n    export interface IScrollEvent {\n        readonly scrollTop: number;\n        readonly scrollLeft: number;\n        readonly scrollWidth: number;\n        readonly scrollHeight: number;\n        readonly scrollTopChanged: boolean;\n        readonly scrollLeftChanged: boolean;\n        readonly scrollWidthChanged: boolean;\n        readonly scrollHeightChanged: boolean;\n    }\n    export interface IPosition {\n        readonly lineNumber: number;\n        readonly column: number;\n    }\n    class Position {\n        readonly lineNumber: number;\n        readonly column: number;\n        constructor(lineNumber: number, column: number);\n        with(newLineNumber?: number, newColumn?: number): Position;\n        delta(deltaLineNumber?: number, deltaColumn?: number): Position;\n        equals(other: IPosition): boolean;\n        static equals(a: IPosition | null, b: IPosition | null): boolean;\n        isBefore(other: IPosition): boolean;\n        static isBefore(a: IPosition, b: IPosition): boolean;\n        isBeforeOrEqual(other: IPosition): boolean;\n        static isBeforeOrEqual(a: IPosition, b: IPosition): boolean;\n        static compare(a: IPosition, b: IPosition): number;\n        clone(): Position;\n        toString(): string;\n        static lift(pos: IPosition): Position;\n        static isIPosition(obj: any): obj is IPosition;\n    }\n    export interface IRange {\n        readonly startLineNumber: number;\n        readonly startColumn: number;\n        readonly endLineNumber: number;\n        readonly endColumn: number;\n    }\n    class Range {\n        readonly startLineNumber: number;\n        readonly startColumn: number;\n        readonly endLineNumber: number;\n        readonly endColumn: number;\n        constructor(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number);\n        isEmpty(): boolean;\n        static isEmpty(range: IRange): boolean;\n        containsPosition(position: IPosition): boolean;\n        static containsPosition(range: IRange, position: IPosition): boolean;\n        containsRange(range: IRange): boolean;\n        static containsRange(range: IRange, otherRange: IRange): boolean;\n        strictContainsRange(range: IRange): boolean;\n        static strictContainsRange(range: IRange, otherRange: IRange): boolean;\n        plusRange(range: IRange): Range;\n        static plusRange(a: IRange, b: IRange): Range;\n        intersectRanges(range: IRange): Range | null;\n        static intersectRanges(a: IRange, b: IRange): Range | null;\n        equalsRange(other: IRange | null): boolean;\n        static equalsRange(a: IRange | null, b: IRange | null): boolean;\n        getEndPosition(): Position;\n        static getEndPosition(range: IRange): Position;\n        getStartPosition(): Position;\n        static getStartPosition(range: IRange): Position;\n        toString(): string;\n        setEndPosition(endLineNumber: number, endColumn: number): Range;\n        setStartPosition(startLineNumber: number, startColumn: number): Range;\n        collapseToStart(): Range;\n        static collapseToStart(range: IRange): Range;\n        static fromPositions(start: IPosition, end?: IPosition): Range;\n        static lift(range: undefined | null): null;\n        static lift(range: IRange): Range;\n        static isIRange(obj: any): obj is IRange;\n        static areIntersectingOrTouching(a: IRange, b: IRange): boolean;\n        static areIntersecting(a: IRange, b: IRange): boolean;\n        static compareRangesUsingStarts(a: IRange | null | undefined, b: IRange | null | undefined): number;\n        static compareRangesUsingEnds(a: IRange, b: IRange): number;\n        static spansMultipleLines(range: IRange): boolean;\n    }\n    export interface ISelection {\n        readonly selectionStartLineNumber: number;\n        readonly selectionStartColumn: number;\n        readonly positionLineNumber: number;\n        readonly positionColumn: number;\n    }\n    class Selection extends Range {\n        readonly selectionStartLineNumber: number;\n        readonly selectionStartColumn: number;\n        readonly positionLineNumber: number;\n        readonly positionColumn: number;\n        constructor(selectionStartLineNumber: number, selectionStartColumn: number, positionLineNumber: number, positionColumn: number);\n        toString(): string;\n        equalsSelection(other: ISelection): boolean;\n        static selectionsEqual(a: ISelection, b: ISelection): boolean;\n        getDirection(): SelectionDirection;\n        setEndPosition(endLineNumber: number, endColumn: number): Selection;\n        getPosition(): Position;\n        getSelectionStart(): Position;\n        setStartPosition(startLineNumber: number, startColumn: number): Selection;\n        static fromPositions(start: IPosition, end?: IPosition): Selection;\n        static fromRange(range: Range, direction: SelectionDirection): Selection;\n        static liftSelection(sel: ISelection): Selection;\n        static selectionsArrEqual(a: ISelection[], b: ISelection[]): boolean;\n        static isISelection(obj: any): obj is ISelection;\n        static createWithDirection(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number, direction: SelectionDirection): Selection;\n    }\n    export enum SelectionDirection {\n        LTR = 0,\n        RTL = 1\n    }\n    class Token {\n        _tokenBrand: void;\n        readonly offset: number;\n        readonly type: string;\n        readonly language: string;\n        constructor(offset: number, type: string, language: string);\n        toString(): string;\n    }\n    export namespace editor {\n        interface IDiffNavigator {\n            canNavigate(): boolean;\n            next(): void;\n            previous(): void;\n            dispose(): void;\n        }\n        function create(domElement: HTMLElement, options?: IStandaloneEditorConstructionOptions, override?: IEditorOverrideServices): IStandaloneCodeEditor;\n        function onDidCreateEditor(listener: (codeEditor: ICodeEditor) => void): IDisposable;\n        function createDiffEditor(domElement: HTMLElement, options?: IStandaloneDiffEditorConstructionOptions, override?: IEditorOverrideServices): IStandaloneDiffEditor;\n        interface IDiffNavigatorOptions {\n            readonly followsCaret?: boolean;\n            readonly ignoreCharChanges?: boolean;\n            readonly alwaysRevealFirst?: boolean;\n        }\n        function createDiffNavigator(diffEditor: IStandaloneDiffEditor, opts?: IDiffNavigatorOptions): IDiffNavigator;\n        function createModel(value: string, language?: string, uri?: Uri): ITextModel;\n        function setModelLanguage(model: ITextModel, languageId: string): void;\n        function setModelMarkers(model: ITextModel, owner: string, markers: IMarkerData[]): void;\n        function getModelMarkers(filter: {\n            owner?: string;\n            resource?: Uri;\n            take?: number;\n        }): IMarker[];\n        function onDidChangeMarkers(listener: (e: readonly Uri[]) => void): IDisposable;\n        function getModel(uri: Uri): ITextModel | null;\n        function getModels(): ITextModel[];\n        function onDidCreateModel(listener: (model: ITextModel) => void): IDisposable;\n        function onWillDisposeModel(listener: (model: ITextModel) => void): IDisposable;\n        function onDidChangeModelLanguage(listener: (e: {\n            readonly model: ITextModel;\n            readonly oldLanguage: string;\n        }) => void): IDisposable;\n        function createWebWorker<T>(opts: IWebWorkerOptions): MonacoWebWorker<T>;\n        function colorizeElement(domNode: HTMLElement, options: IColorizerElementOptions): Promise<void>;\n        function colorize(text: string, languageId: string, options: IColorizerOptions): Promise<string>;\n        function colorizeModelLine(model: ITextModel, lineNumber: number, tabSize?: number): string;\n        function tokenize(text: string, languageId: string): Token[][];\n        function defineTheme(themeName: string, themeData: IStandaloneThemeData): void;\n        function setTheme(themeName: string): void;\n        function remeasureFonts(): void;\n        function registerCommand(id: string, handler: (accessor: any, ...args: any[]) => void): IDisposable;\n        type BuiltinTheme = 'vs' | 'vs-dark' | 'hc-black';\n        interface IStandaloneThemeData {\n            base: BuiltinTheme;\n            inherit: boolean;\n            rules: ITokenThemeRule[];\n            encodedTokensColors?: string[];\n            colors: IColors;\n        }\n        type IColors = {\n            [colorId: string]: string;\n        };\n        interface ITokenThemeRule {\n            token: string;\n            foreground?: string;\n            background?: string;\n            fontStyle?: string;\n        }\n        interface MonacoWebWorker<T> {\n            dispose(): void;\n            getProxy(): Promise<T>;\n            withSyncedResources(resources: Uri[]): Promise<T>;\n        }\n        interface IWebWorkerOptions {\n            moduleId: string;\n            createData?: any;\n            label?: string;\n            host?: any;\n            keepIdleModels?: boolean;\n        }\n        interface IActionDescriptor {\n            id: string;\n            label: string;\n            precondition?: string;\n            keybindings?: number[];\n            keybindingContext?: string;\n            contextMenuGroupId?: string;\n            contextMenuOrder?: number;\n            run(editor: ICodeEditor, ...args: any[]): void | Promise<void>;\n        }\n        interface IGlobalEditorOptions {\n            tabSize?: number;\n            insertSpaces?: boolean;\n            detectIndentation?: boolean;\n            trimAutoWhitespace?: boolean;\n            largeFileOptimizations?: boolean;\n            wordBasedSuggestions?: boolean;\n            wordBasedSuggestionsOnlySameLanguage?: boolean;\n            'semanticHighlighting.enabled'?: true | false | 'configuredByTheme';\n            stablePeek?: boolean;\n            maxTokenizationLineLength?: number;\n            theme?: string;\n            autoDetectHighContrast?: boolean;\n        }\n        interface IStandaloneEditorConstructionOptions extends IEditorConstructionOptions, IGlobalEditorOptions {\n            model?: ITextModel | null;\n            value?: string;\n            language?: string;\n            theme?: string;\n            autoDetectHighContrast?: boolean;\n            accessibilityHelpUrl?: string;\n            ariaContainerElement?: HTMLElement;\n        }\n        interface IStandaloneDiffEditorConstructionOptions extends IDiffEditorConstructionOptions {\n            theme?: string;\n            autoDetectHighContrast?: boolean;\n        }\n        interface IStandaloneCodeEditor extends ICodeEditor {\n            updateOptions(newOptions: IEditorOptions & IGlobalEditorOptions): void;\n            addCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null;\n            createContextKey<T>(key: string, defaultValue: T): IContextKey<T>;\n            addAction(descriptor: IActionDescriptor): IDisposable;\n        }\n        interface IStandaloneDiffEditor extends IDiffEditor {\n            addCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null;\n            createContextKey<T>(key: string, defaultValue: T): IContextKey<T>;\n            addAction(descriptor: IActionDescriptor): IDisposable;\n            getOriginalEditor(): IStandaloneCodeEditor;\n            getModifiedEditor(): IStandaloneCodeEditor;\n        }\n        interface ICommandHandler {\n            (...args: any[]): void;\n        }\n        interface IContextKey<T> {\n            set(value: T): void;\n            reset(): void;\n            get(): T | undefined;\n        }\n        interface IEditorOverrideServices {\n            [index: string]: any;\n        }\n        interface IMarker {\n            owner: string;\n            resource: Uri;\n            severity: MarkerSeverity;\n            code?: string | {\n                value: string;\n                target: Uri;\n            };\n            message: string;\n            source?: string;\n            startLineNumber: number;\n            startColumn: number;\n            endLineNumber: number;\n            endColumn: number;\n            relatedInformation?: IRelatedInformation[];\n            tags?: MarkerTag[];\n        }\n        interface IMarkerData {\n            code?: string | {\n                value: string;\n                target: Uri;\n            };\n            severity: MarkerSeverity;\n            message: string;\n            source?: string;\n            startLineNumber: number;\n            startColumn: number;\n            endLineNumber: number;\n            endColumn: number;\n            relatedInformation?: IRelatedInformation[];\n            tags?: MarkerTag[];\n        }\n        interface IRelatedInformation {\n            resource: Uri;\n            message: string;\n            startLineNumber: number;\n            startColumn: number;\n            endLineNumber: number;\n            endColumn: number;\n        }\n        interface IColorizerOptions {\n            tabSize?: number;\n        }\n        interface IColorizerElementOptions extends IColorizerOptions {\n            theme?: string;\n            mimeType?: string;\n        }\n        enum ScrollbarVisibility {\n            Auto = 1,\n            Hidden = 2,\n            Visible = 3\n        }\n        interface ThemeColor {\n            id: string;\n        }\n        enum OverviewRulerLane {\n            Left = 1,\n            Center = 2,\n            Right = 4,\n            Full = 7\n        }\n        enum MinimapPosition {\n            Inline = 1,\n            Gutter = 2\n        }\n        interface IDecorationOptions {\n            color: string | ThemeColor | undefined;\n            darkColor?: string | ThemeColor;\n        }\n        interface IModelDecorationOverviewRulerOptions extends IDecorationOptions {\n            position: OverviewRulerLane;\n        }\n        interface IModelDecorationMinimapOptions extends IDecorationOptions {\n            position: MinimapPosition;\n        }\n        interface IModelDecorationOptions {\n            stickiness?: TrackedRangeStickiness;\n            className?: string | null;\n            glyphMarginHoverMessage?: IMarkdownString | IMarkdownString[] | null;\n            hoverMessage?: IMarkdownString | IMarkdownString[] | null;\n            isWholeLine?: boolean;\n            zIndex?: number;\n            overviewRuler?: IModelDecorationOverviewRulerOptions | null;\n            minimap?: IModelDecorationMinimapOptions | null;\n            glyphMarginClassName?: string | null;\n            linesDecorationsClassName?: string | null;\n            firstLineDecorationClassName?: string | null;\n            marginClassName?: string | null;\n            inlineClassName?: string | null;\n            inlineClassNameAffectsLetterSpacing?: boolean;\n            beforeContentClassName?: string | null;\n            afterContentClassName?: string | null;\n            after?: InjectedTextOptions | null;\n            before?: InjectedTextOptions | null;\n        }\n        interface InjectedTextOptions {\n            readonly content: string;\n            readonly inlineClassName?: string | null;\n            readonly inlineClassNameAffectsLetterSpacing?: boolean;\n        }\n        interface IModelDeltaDecoration {\n            range: IRange;\n            options: IModelDecorationOptions;\n        }\n        interface IModelDecoration {\n            readonly id: string;\n            readonly ownerId: number;\n            readonly range: Range;\n            readonly options: IModelDecorationOptions;\n        }\n        interface IWordAtPosition {\n            readonly word: string;\n            readonly startColumn: number;\n            readonly endColumn: number;\n        }\n        enum EndOfLinePreference {\n            TextDefined = 0,\n            LF = 1,\n            CRLF = 2\n        }\n        enum DefaultEndOfLine {\n            LF = 1,\n            CRLF = 2\n        }\n        enum EndOfLineSequence {\n            LF = 0,\n            CRLF = 1\n        }\n        interface ISingleEditOperation {\n            range: IRange;\n            text: string | null;\n            forceMoveMarkers?: boolean;\n        }\n        interface IIdentifiedSingleEditOperation {\n            range: IRange;\n            text: string | null;\n            forceMoveMarkers?: boolean;\n        }\n        interface IValidEditOperation {\n            range: Range;\n            text: string;\n        }\n        interface ICursorStateComputer {\n            (inverseEditOperations: IValidEditOperation[]): Selection[] | null;\n        }\n        class TextModelResolvedOptions {\n            _textModelResolvedOptionsBrand: void;\n            readonly tabSize: number;\n            readonly indentSize: number;\n            readonly insertSpaces: boolean;\n            readonly defaultEOL: DefaultEndOfLine;\n            readonly trimAutoWhitespace: boolean;\n            readonly bracketPairColorizationOptions: BracketPairColorizationOptions;\n        }\n        interface BracketPairColorizationOptions {\n            enabled: boolean;\n        }\n        interface ITextModelUpdateOptions {\n            tabSize?: number;\n            indentSize?: number;\n            insertSpaces?: boolean;\n            trimAutoWhitespace?: boolean;\n            bracketColorizationOptions?: BracketPairColorizationOptions;\n        }\n        class FindMatch {\n            _findMatchBrand: void;\n            readonly range: Range;\n            readonly matches: string[] | null;\n        }\n        enum TrackedRangeStickiness {\n            AlwaysGrowsWhenTypingAtEdges = 0,\n            NeverGrowsWhenTypingAtEdges = 1,\n            GrowsOnlyWhenTypingBefore = 2,\n            GrowsOnlyWhenTypingAfter = 3\n        }\n        interface ITextModel {\n            readonly uri: Uri;\n            readonly id: string;\n            getOptions(): TextModelResolvedOptions;\n            getVersionId(): number;\n            getAlternativeVersionId(): number;\n            setValue(newValue: string): void;\n            getValue(eol?: EndOfLinePreference, preserveBOM?: boolean): string;\n            getValueLength(eol?: EndOfLinePreference, preserveBOM?: boolean): number;\n            getValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n            getValueLengthInRange(range: IRange): number;\n            getCharacterCountInRange(range: IRange): number;\n            getLineCount(): number;\n            getLineContent(lineNumber: number): string;\n            getLineLength(lineNumber: number): number;\n            getLinesContent(): string[];\n            getEOL(): string;\n            getEndOfLineSequence(): EndOfLineSequence;\n            getLineMinColumn(lineNumber: number): number;\n            getLineMaxColumn(lineNumber: number): number;\n            getLineFirstNonWhitespaceColumn(lineNumber: number): number;\n            getLineLastNonWhitespaceColumn(lineNumber: number): number;\n            validatePosition(position: IPosition): Position;\n            modifyPosition(position: IPosition, offset: number): Position;\n            validateRange(range: IRange): Range;\n            getOffsetAt(position: IPosition): number;\n            getPositionAt(offset: number): Position;\n            getFullModelRange(): Range;\n            isDisposed(): boolean;\n            findMatches(searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n            findMatches(searchString: string, searchScope: IRange | IRange[], isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n            findNextMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n            findPreviousMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n            getLanguageId(): string;\n            getWordAtPosition(position: IPosition): IWordAtPosition | null;\n            getWordUntilPosition(position: IPosition): IWordAtPosition;\n            deltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[], ownerId?: number): string[];\n            getDecorationOptions(id: string): IModelDecorationOptions | null;\n            getDecorationRange(id: string): Range | null;\n            getLineDecorations(lineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n            getLinesDecorations(startLineNumber: number, endLineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n            getDecorationsInRange(range: IRange, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n            getAllDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n            getOverviewRulerDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n            getInjectedTextDecorations(ownerId?: number): IModelDecoration[];\n            normalizeIndentation(str: string): string;\n            updateOptions(newOpts: ITextModelUpdateOptions): void;\n            detectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void;\n            pushStackElement(): void;\n            popStackElement(): void;\n            pushEditOperations(beforeCursorState: Selection[] | null, editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): Selection[] | null;\n            pushEOL(eol: EndOfLineSequence): void;\n            applyEdits(operations: IIdentifiedSingleEditOperation[]): void;\n            applyEdits(operations: IIdentifiedSingleEditOperation[], computeUndoEdits: false): void;\n            applyEdits(operations: IIdentifiedSingleEditOperation[], computeUndoEdits: true): IValidEditOperation[];\n            setEOL(eol: EndOfLineSequence): void;\n            onDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable;\n            onDidChangeDecorations(listener: (e: IModelDecorationsChangedEvent) => void): IDisposable;\n            onDidChangeOptions(listener: (e: IModelOptionsChangedEvent) => void): IDisposable;\n            onDidChangeLanguage(listener: (e: IModelLanguageChangedEvent) => void): IDisposable;\n            onDidChangeLanguageConfiguration(listener: (e: IModelLanguageConfigurationChangedEvent) => void): IDisposable;\n            onDidChangeAttached(listener: () => void): IDisposable;\n            onWillDispose(listener: () => void): IDisposable;\n            dispose(): void;\n            isAttachedToEditor(): boolean;\n        }\n        interface IEditOperationBuilder {\n            addEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n            addTrackedEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n            trackSelection(selection: Selection, trackPreviousOnEmpty?: boolean): string;\n        }\n        interface ICursorStateComputerData {\n            getInverseEditOperations(): IValidEditOperation[];\n            getTrackedSelection(id: string): Selection;\n        }\n        interface ICommand {\n            getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void;\n            computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection;\n        }\n        interface IDiffEditorModel {\n            original: ITextModel;\n            modified: ITextModel;\n        }\n        interface IModelChangedEvent {\n            readonly oldModelUrl: Uri | null;\n            readonly newModelUrl: Uri | null;\n        }\n        interface IDimension {\n            width: number;\n            height: number;\n        }\n        interface IChange {\n            readonly originalStartLineNumber: number;\n            readonly originalEndLineNumber: number;\n            readonly modifiedStartLineNumber: number;\n            readonly modifiedEndLineNumber: number;\n        }\n        interface ICharChange extends IChange {\n            readonly originalStartColumn: number;\n            readonly originalEndColumn: number;\n            readonly modifiedStartColumn: number;\n            readonly modifiedEndColumn: number;\n        }\n        interface ILineChange extends IChange {\n            readonly charChanges: ICharChange[] | undefined;\n        }\n        interface IContentSizeChangedEvent {\n            readonly contentWidth: number;\n            readonly contentHeight: number;\n            readonly contentWidthChanged: boolean;\n            readonly contentHeightChanged: boolean;\n        }\n        interface INewScrollPosition {\n            scrollLeft?: number;\n            scrollTop?: number;\n        }\n        interface IEditorAction {\n            readonly id: string;\n            readonly label: string;\n            readonly alias: string;\n            isSupported(): boolean;\n            run(): Promise<void>;\n        }\n        type IEditorModel = ITextModel | IDiffEditorModel;\n        interface ICursorState {\n            inSelectionMode: boolean;\n            selectionStart: IPosition;\n            position: IPosition;\n        }\n        interface IViewState {\n            scrollTop?: number;\n            scrollTopWithoutViewZones?: number;\n            scrollLeft: number;\n            firstPosition: IPosition;\n            firstPositionDeltaTop: number;\n        }\n        interface ICodeEditorViewState {\n            cursorState: ICursorState[];\n            viewState: IViewState;\n            contributionsState: {\n                [id: string]: any;\n            };\n        }\n        interface IDiffEditorViewState {\n            original: ICodeEditorViewState | null;\n            modified: ICodeEditorViewState | null;\n        }\n        type IEditorViewState = ICodeEditorViewState | IDiffEditorViewState;\n        enum ScrollType {\n            Smooth = 0,\n            Immediate = 1\n        }\n        interface IEditor {\n            onDidDispose(listener: () => void): IDisposable;\n            dispose(): void;\n            getId(): string;\n            getEditorType(): string;\n            updateOptions(newOptions: IEditorOptions): void;\n            layout(dimension?: IDimension): void;\n            focus(): void;\n            hasTextFocus(): boolean;\n            getSupportedActions(): IEditorAction[];\n            saveViewState(): IEditorViewState | null;\n            restoreViewState(state: IEditorViewState): void;\n            getVisibleColumnFromPosition(position: IPosition): number;\n            getPosition(): Position | null;\n            setPosition(position: IPosition): void;\n            revealLine(lineNumber: number, scrollType?: ScrollType): void;\n            revealLineInCenter(lineNumber: number, scrollType?: ScrollType): void;\n            revealLineInCenterIfOutsideViewport(lineNumber: number, scrollType?: ScrollType): void;\n            revealLineNearTop(lineNumber: number, scrollType?: ScrollType): void;\n            revealPosition(position: IPosition, scrollType?: ScrollType): void;\n            revealPositionInCenter(position: IPosition, scrollType?: ScrollType): void;\n            revealPositionInCenterIfOutsideViewport(position: IPosition, scrollType?: ScrollType): void;\n            revealPositionNearTop(position: IPosition, scrollType?: ScrollType): void;\n            getSelection(): Selection | null;\n            getSelections(): Selection[] | null;\n            setSelection(selection: IRange): void;\n            setSelection(selection: Range): void;\n            setSelection(selection: ISelection): void;\n            setSelection(selection: Selection): void;\n            setSelections(selections: readonly ISelection[]): void;\n            revealLines(startLineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n            revealLinesInCenter(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n            revealLinesInCenterIfOutsideViewport(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n            revealLinesNearTop(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n            revealRange(range: IRange, scrollType?: ScrollType): void;\n            revealRangeInCenter(range: IRange, scrollType?: ScrollType): void;\n            revealRangeAtTop(range: IRange, scrollType?: ScrollType): void;\n            revealRangeInCenterIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n            revealRangeNearTop(range: IRange, scrollType?: ScrollType): void;\n            revealRangeNearTopIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n            trigger(source: string | null | undefined, handlerId: string, payload: any): void;\n            getModel(): IEditorModel | null;\n            setModel(model: IEditorModel | null): void;\n        }\n        interface IEditorContribution {\n            dispose(): void;\n            saveViewState?(): any;\n            restoreViewState?(state: any): void;\n        }\n        const EditorType: {\n            ICodeEditor: string;\n            IDiffEditor: string;\n        };\n        interface IModelLanguageChangedEvent {\n            readonly oldLanguage: string;\n            readonly newLanguage: string;\n        }\n        interface IModelLanguageConfigurationChangedEvent {\n        }\n        interface IModelContentChange {\n            readonly range: IRange;\n            readonly rangeOffset: number;\n            readonly rangeLength: number;\n            readonly text: string;\n        }\n        interface IModelContentChangedEvent {\n            readonly changes: IModelContentChange[];\n            readonly eol: string;\n            readonly versionId: number;\n            readonly isUndoing: boolean;\n            readonly isRedoing: boolean;\n            readonly isFlush: boolean;\n        }\n        interface IModelDecorationsChangedEvent {\n            readonly affectsMinimap: boolean;\n            readonly affectsOverviewRuler: boolean;\n        }\n        interface IModelOptionsChangedEvent {\n            readonly tabSize: boolean;\n            readonly indentSize: boolean;\n            readonly insertSpaces: boolean;\n            readonly trimAutoWhitespace: boolean;\n        }\n        enum CursorChangeReason {\n            NotSet = 0,\n            ContentFlush = 1,\n            RecoverFromMarkers = 2,\n            Explicit = 3,\n            Paste = 4,\n            Undo = 5,\n            Redo = 6\n        }\n        interface ICursorPositionChangedEvent {\n            readonly position: Position;\n            readonly secondaryPositions: Position[];\n            readonly reason: CursorChangeReason;\n            readonly source: string;\n        }\n        interface ICursorSelectionChangedEvent {\n            readonly selection: Selection;\n            readonly secondarySelections: Selection[];\n            readonly modelVersionId: number;\n            readonly oldSelections: Selection[] | null;\n            readonly oldModelVersionId: number;\n            readonly source: string;\n            readonly reason: CursorChangeReason;\n        }\n        enum AccessibilitySupport {\n            Unknown = 0,\n            Disabled = 1,\n            Enabled = 2\n        }\n        type EditorAutoClosingStrategy = 'always' | 'languageDefined' | 'beforeWhitespace' | 'never';\n        type EditorAutoSurroundStrategy = 'languageDefined' | 'quotes' | 'brackets' | 'never';\n        type EditorAutoClosingEditStrategy = 'always' | 'auto' | 'never';\n        enum EditorAutoIndentStrategy {\n            None = 0,\n            Keep = 1,\n            Brackets = 2,\n            Advanced = 3,\n            Full = 4\n        }\n        interface IEditorOptions {\n            inDiffEditor?: boolean;\n            ariaLabel?: string;\n            tabIndex?: number;\n            rulers?: (number | IRulerOption)[];\n            wordSeparators?: string;\n            selectionClipboard?: boolean;\n            lineNumbers?: LineNumbersType;\n            cursorSurroundingLines?: number;\n            cursorSurroundingLinesStyle?: 'default' | 'all';\n            renderFinalNewline?: boolean;\n            unusualLineTerminators?: 'auto' | 'off' | 'prompt';\n            selectOnLineNumbers?: boolean;\n            lineNumbersMinChars?: number;\n            glyphMargin?: boolean;\n            lineDecorationsWidth?: number | string;\n            revealHorizontalRightPadding?: number;\n            roundedSelection?: boolean;\n            extraEditorClassName?: string;\n            readOnly?: boolean;\n            domReadOnly?: boolean;\n            linkedEditing?: boolean;\n            renameOnType?: boolean;\n            renderValidationDecorations?: 'editable' | 'on' | 'off';\n            scrollbar?: IEditorScrollbarOptions;\n            minimap?: IEditorMinimapOptions;\n            find?: IEditorFindOptions;\n            fixedOverflowWidgets?: boolean;\n            overviewRulerLanes?: number;\n            overviewRulerBorder?: boolean;\n            cursorBlinking?: 'blink' | 'smooth' | 'phase' | 'expand' | 'solid';\n            mouseWheelZoom?: boolean;\n            mouseStyle?: 'text' | 'default' | 'copy';\n            cursorSmoothCaretAnimation?: boolean;\n            cursorStyle?: 'line' | 'block' | 'underline' | 'line-thin' | 'block-outline' | 'underline-thin';\n            cursorWidth?: number;\n            fontLigatures?: boolean | string;\n            disableLayerHinting?: boolean;\n            disableMonospaceOptimizations?: boolean;\n            hideCursorInOverviewRuler?: boolean;\n            scrollBeyondLastLine?: boolean;\n            scrollBeyondLastColumn?: number;\n            smoothScrolling?: boolean;\n            automaticLayout?: boolean;\n            wordWrap?: 'off' | 'on' | 'wordWrapColumn' | 'bounded';\n            wordWrapOverride1?: 'off' | 'on' | 'inherit';\n            wordWrapOverride2?: 'off' | 'on' | 'inherit';\n            wordWrapColumn?: number;\n            wrappingIndent?: 'none' | 'same' | 'indent' | 'deepIndent';\n            wrappingStrategy?: 'simple' | 'advanced';\n            wordWrapBreakBeforeCharacters?: string;\n            wordWrapBreakAfterCharacters?: string;\n            stopRenderingLineAfter?: number;\n            hover?: IEditorHoverOptions;\n            links?: boolean;\n            colorDecorators?: boolean;\n            comments?: IEditorCommentsOptions;\n            contextmenu?: boolean;\n            mouseWheelScrollSensitivity?: number;\n            fastScrollSensitivity?: number;\n            scrollPredominantAxis?: boolean;\n            columnSelection?: boolean;\n            multiCursorModifier?: 'ctrlCmd' | 'alt';\n            multiCursorMergeOverlapping?: boolean;\n            multiCursorPaste?: 'spread' | 'full';\n            accessibilitySupport?: 'auto' | 'off' | 'on';\n            accessibilityPageSize?: number;\n            suggest?: ISuggestOptions;\n            inlineSuggest?: IInlineSuggestOptions;\n            smartSelect?: ISmartSelectOptions;\n            gotoLocation?: IGotoLocationOptions;\n            quickSuggestions?: boolean | IQuickSuggestionsOptions;\n            quickSuggestionsDelay?: number;\n            padding?: IEditorPaddingOptions;\n            parameterHints?: IEditorParameterHintOptions;\n            autoClosingBrackets?: EditorAutoClosingStrategy;\n            autoClosingQuotes?: EditorAutoClosingStrategy;\n            autoClosingDelete?: EditorAutoClosingEditStrategy;\n            autoClosingOvertype?: EditorAutoClosingEditStrategy;\n            autoSurround?: EditorAutoSurroundStrategy;\n            autoIndent?: 'none' | 'keep' | 'brackets' | 'advanced' | 'full';\n            stickyTabStops?: boolean;\n            formatOnType?: boolean;\n            formatOnPaste?: boolean;\n            dragAndDrop?: boolean;\n            suggestOnTriggerCharacters?: boolean;\n            acceptSuggestionOnEnter?: 'on' | 'smart' | 'off';\n            acceptSuggestionOnCommitCharacter?: boolean;\n            snippetSuggestions?: 'top' | 'bottom' | 'inline' | 'none';\n            emptySelectionClipboard?: boolean;\n            copyWithSyntaxHighlighting?: boolean;\n            suggestSelection?: 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';\n            suggestFontSize?: number;\n            suggestLineHeight?: number;\n            tabCompletion?: 'on' | 'off' | 'onlySnippets';\n            selectionHighlight?: boolean;\n            occurrencesHighlight?: boolean;\n            codeLens?: boolean;\n            codeLensFontFamily?: string;\n            codeLensFontSize?: number;\n            lightbulb?: IEditorLightbulbOptions;\n            codeActionsOnSaveTimeout?: number;\n            folding?: boolean;\n            foldingStrategy?: 'auto' | 'indentation';\n            foldingHighlight?: boolean;\n            foldingImportsByDefault?: boolean;\n            showFoldingControls?: 'always' | 'mouseover';\n            unfoldOnClickAfterEndOfLine?: boolean;\n            matchBrackets?: 'never' | 'near' | 'always';\n            renderWhitespace?: 'none' | 'boundary' | 'selection' | 'trailing' | 'all';\n            renderControlCharacters?: boolean;\n            renderLineHighlight?: 'none' | 'gutter' | 'line' | 'all';\n            renderLineHighlightOnlyWhenFocus?: boolean;\n            useTabStops?: boolean;\n            fontFamily?: string;\n            fontWeight?: string;\n            fontSize?: number;\n            lineHeight?: number;\n            letterSpacing?: number;\n            showUnused?: boolean;\n            peekWidgetDefaultFocus?: 'tree' | 'editor';\n            definitionLinkOpensInPeek?: boolean;\n            showDeprecated?: boolean;\n            inlayHints?: IEditorInlayHintsOptions;\n            useShadowDOM?: boolean;\n            guides?: IGuidesOptions;\n            unicodeHighlight?: IUnicodeHighlightOptions;\n        }\n        interface IDiffEditorBaseOptions {\n            enableSplitViewResizing?: boolean;\n            renderSideBySide?: boolean;\n            maxComputationTime?: number;\n            maxFileSize?: number;\n            ignoreTrimWhitespace?: boolean;\n            renderIndicators?: boolean;\n            originalEditable?: boolean;\n            diffCodeLens?: boolean;\n            renderOverviewRuler?: boolean;\n            diffWordWrap?: 'off' | 'on' | 'inherit';\n        }\n        interface IDiffEditorOptions extends IEditorOptions, IDiffEditorBaseOptions {\n        }\n        class ConfigurationChangedEvent {\n            hasChanged(id: EditorOption): boolean;\n        }\n        interface IComputedEditorOptions {\n            get<T extends EditorOption>(id: T): FindComputedEditorOptionValueById<T>;\n        }\n        interface IEditorOption<K1 extends EditorOption, V> {\n            readonly id: K1;\n            readonly name: string;\n            defaultValue: V;\n            applyUpdate(value: V, update: V): ApplyUpdateResult<V>;\n        }\n        class ApplyUpdateResult<T> {\n            readonly newValue: T;\n            readonly didChange: boolean;\n            constructor(newValue: T, didChange: boolean);\n        }\n        interface IEditorCommentsOptions {\n            insertSpace?: boolean;\n            ignoreEmptyLines?: boolean;\n        }\n        enum TextEditorCursorBlinkingStyle {\n            Hidden = 0,\n            Blink = 1,\n            Smooth = 2,\n            Phase = 3,\n            Expand = 4,\n            Solid = 5\n        }\n        enum TextEditorCursorStyle {\n            Line = 1,\n            Block = 2,\n            Underline = 3,\n            LineThin = 4,\n            BlockOutline = 5,\n            UnderlineThin = 6\n        }\n        interface IEditorFindOptions {\n            cursorMoveOnType?: boolean;\n            seedSearchStringFromSelection?: 'never' | 'always' | 'selection';\n            autoFindInSelection?: 'never' | 'always' | 'multiline';\n            addExtraSpaceOnTop?: boolean;\n            loop?: boolean;\n        }\n        type GoToLocationValues = 'peek' | 'gotoAndPeek' | 'goto';\n        interface IGotoLocationOptions {\n            multiple?: GoToLocationValues;\n            multipleDefinitions?: GoToLocationValues;\n            multipleTypeDefinitions?: GoToLocationValues;\n            multipleDeclarations?: GoToLocationValues;\n            multipleImplementations?: GoToLocationValues;\n            multipleReferences?: GoToLocationValues;\n            alternativeDefinitionCommand?: string;\n            alternativeTypeDefinitionCommand?: string;\n            alternativeDeclarationCommand?: string;\n            alternativeImplementationCommand?: string;\n            alternativeReferenceCommand?: string;\n        }\n        interface IEditorHoverOptions {\n            enabled?: boolean;\n            delay?: number;\n            sticky?: boolean;\n            above?: boolean;\n        }\n        interface OverviewRulerPosition {\n            readonly width: number;\n            readonly height: number;\n            readonly top: number;\n            readonly right: number;\n        }\n        enum RenderMinimap {\n            None = 0,\n            Text = 1,\n            Blocks = 2\n        }\n        interface EditorLayoutInfo {\n            readonly width: number;\n            readonly height: number;\n            readonly glyphMarginLeft: number;\n            readonly glyphMarginWidth: number;\n            readonly lineNumbersLeft: number;\n            readonly lineNumbersWidth: number;\n            readonly decorationsLeft: number;\n            readonly decorationsWidth: number;\n            readonly contentLeft: number;\n            readonly contentWidth: number;\n            readonly minimap: EditorMinimapLayoutInfo;\n            readonly viewportColumn: number;\n            readonly isWordWrapMinified: boolean;\n            readonly isViewportWrapping: boolean;\n            readonly wrappingColumn: number;\n            readonly verticalScrollbarWidth: number;\n            readonly horizontalScrollbarHeight: number;\n            readonly overviewRuler: OverviewRulerPosition;\n        }\n        interface EditorMinimapLayoutInfo {\n            readonly renderMinimap: RenderMinimap;\n            readonly minimapLeft: number;\n            readonly minimapWidth: number;\n            readonly minimapHeightIsEditorHeight: boolean;\n            readonly minimapIsSampling: boolean;\n            readonly minimapScale: number;\n            readonly minimapLineHeight: number;\n            readonly minimapCanvasInnerWidth: number;\n            readonly minimapCanvasInnerHeight: number;\n            readonly minimapCanvasOuterWidth: number;\n            readonly minimapCanvasOuterHeight: number;\n        }\n        interface IEditorLightbulbOptions {\n            enabled?: boolean;\n        }\n        interface IEditorInlayHintsOptions {\n            enabled?: boolean;\n            fontSize?: number;\n            fontFamily?: string;\n        }\n        interface IEditorMinimapOptions {\n            enabled?: boolean;\n            side?: 'right' | 'left';\n            size?: 'proportional' | 'fill' | 'fit';\n            showSlider?: 'always' | 'mouseover';\n            renderCharacters?: boolean;\n            maxColumn?: number;\n            scale?: number;\n        }\n        interface IEditorPaddingOptions {\n            top?: number;\n            bottom?: number;\n        }\n        interface IEditorParameterHintOptions {\n            enabled?: boolean;\n            cycle?: boolean;\n        }\n        interface IQuickSuggestionsOptions {\n            other?: boolean;\n            comments?: boolean;\n            strings?: boolean;\n        }\n        type LineNumbersType = 'on' | 'off' | 'relative' | 'interval' | ((lineNumber: number) => string);\n        enum RenderLineNumbersType {\n            Off = 0,\n            On = 1,\n            Relative = 2,\n            Interval = 3,\n            Custom = 4\n        }\n        interface InternalEditorRenderLineNumbersOptions {\n            readonly renderType: RenderLineNumbersType;\n            readonly renderFn: ((lineNumber: number) => string) | null;\n        }\n        interface IRulerOption {\n            readonly column: number;\n            readonly color: string | null;\n        }\n        interface IEditorScrollbarOptions {\n            arrowSize?: number;\n            vertical?: 'auto' | 'visible' | 'hidden';\n            horizontal?: 'auto' | 'visible' | 'hidden';\n            useShadows?: boolean;\n            verticalHasArrows?: boolean;\n            horizontalHasArrows?: boolean;\n            handleMouseWheel?: boolean;\n            alwaysConsumeMouseWheel?: boolean;\n            horizontalScrollbarSize?: number;\n            verticalScrollbarSize?: number;\n            verticalSliderSize?: number;\n            horizontalSliderSize?: number;\n            scrollByPage?: boolean;\n        }\n        interface InternalEditorScrollbarOptions {\n            readonly arrowSize: number;\n            readonly vertical: ScrollbarVisibility;\n            readonly horizontal: ScrollbarVisibility;\n            readonly useShadows: boolean;\n            readonly verticalHasArrows: boolean;\n            readonly horizontalHasArrows: boolean;\n            readonly handleMouseWheel: boolean;\n            readonly alwaysConsumeMouseWheel: boolean;\n            readonly horizontalScrollbarSize: number;\n            readonly horizontalSliderSize: number;\n            readonly verticalScrollbarSize: number;\n            readonly verticalSliderSize: number;\n            readonly scrollByPage: boolean;\n        }\n        type InUntrustedWorkspace = 'inUntrustedWorkspace';\n        interface IUnicodeHighlightOptions {\n            nonBasicASCII?: boolean | InUntrustedWorkspace;\n            invisibleCharacters?: boolean;\n            ambiguousCharacters?: boolean;\n            includeComments?: boolean | InUntrustedWorkspace;\n            allowedCharacters?: Record<string, true>;\n        }\n        interface IInlineSuggestOptions {\n            enabled?: boolean;\n            mode?: 'prefix' | 'subword' | 'subwordSmart';\n        }\n        interface IBracketPairColorizationOptions {\n            enabled?: boolean;\n        }\n        interface IGuidesOptions {\n            bracketPairs?: boolean | 'active';\n            bracketPairsHorizontal?: boolean | 'active';\n            highlightActiveBracketPair?: boolean;\n            indentation?: boolean;\n            highlightActiveIndentation?: boolean;\n        }\n        interface ISuggestOptions {\n            insertMode?: 'insert' | 'replace';\n            filterGraceful?: boolean;\n            snippetsPreventQuickSuggestions?: boolean;\n            localityBonus?: boolean;\n            shareSuggestSelections?: boolean;\n            showIcons?: boolean;\n            showStatusBar?: boolean;\n            preview?: boolean;\n            previewMode?: 'prefix' | 'subword' | 'subwordSmart';\n            showInlineDetails?: boolean;\n            showMethods?: boolean;\n            showFunctions?: boolean;\n            showConstructors?: boolean;\n            showDeprecated?: boolean;\n            showFields?: boolean;\n            showVariables?: boolean;\n            showClasses?: boolean;\n            showStructs?: boolean;\n            showInterfaces?: boolean;\n            showModules?: boolean;\n            showProperties?: boolean;\n            showEvents?: boolean;\n            showOperators?: boolean;\n            showUnits?: boolean;\n            showValues?: boolean;\n            showConstants?: boolean;\n            showEnums?: boolean;\n            showEnumMembers?: boolean;\n            showKeywords?: boolean;\n            showWords?: boolean;\n            showColors?: boolean;\n            showFiles?: boolean;\n            showReferences?: boolean;\n            showFolders?: boolean;\n            showTypeParameters?: boolean;\n            showIssues?: boolean;\n            showUsers?: boolean;\n            showSnippets?: boolean;\n        }\n        interface ISmartSelectOptions {\n            selectLeadingAndTrailingWhitespace?: boolean;\n        }\n        enum WrappingIndent {\n            None = 0,\n            Same = 1,\n            Indent = 2,\n            DeepIndent = 3\n        }\n        interface EditorWrappingInfo {\n            readonly isDominatedByLongLines: boolean;\n            readonly isWordWrapMinified: boolean;\n            readonly isViewportWrapping: boolean;\n            readonly wrappingColumn: number;\n        }\n        enum EditorOption {\n            acceptSuggestionOnCommitCharacter = 0,\n            acceptSuggestionOnEnter = 1,\n            accessibilitySupport = 2,\n            accessibilityPageSize = 3,\n            ariaLabel = 4,\n            autoClosingBrackets = 5,\n            autoClosingDelete = 6,\n            autoClosingOvertype = 7,\n            autoClosingQuotes = 8,\n            autoIndent = 9,\n            automaticLayout = 10,\n            autoSurround = 11,\n            bracketPairColorization = 12,\n            guides = 13,\n            codeLens = 14,\n            codeLensFontFamily = 15,\n            codeLensFontSize = 16,\n            colorDecorators = 17,\n            columnSelection = 18,\n            comments = 19,\n            contextmenu = 20,\n            copyWithSyntaxHighlighting = 21,\n            cursorBlinking = 22,\n            cursorSmoothCaretAnimation = 23,\n            cursorStyle = 24,\n            cursorSurroundingLines = 25,\n            cursorSurroundingLinesStyle = 26,\n            cursorWidth = 27,\n            disableLayerHinting = 28,\n            disableMonospaceOptimizations = 29,\n            domReadOnly = 30,\n            dragAndDrop = 31,\n            emptySelectionClipboard = 32,\n            extraEditorClassName = 33,\n            fastScrollSensitivity = 34,\n            find = 35,\n            fixedOverflowWidgets = 36,\n            folding = 37,\n            foldingStrategy = 38,\n            foldingHighlight = 39,\n            foldingImportsByDefault = 40,\n            unfoldOnClickAfterEndOfLine = 41,\n            fontFamily = 42,\n            fontInfo = 43,\n            fontLigatures = 44,\n            fontSize = 45,\n            fontWeight = 46,\n            formatOnPaste = 47,\n            formatOnType = 48,\n            glyphMargin = 49,\n            gotoLocation = 50,\n            hideCursorInOverviewRuler = 51,\n            hover = 52,\n            inDiffEditor = 53,\n            inlineSuggest = 54,\n            letterSpacing = 55,\n            lightbulb = 56,\n            lineDecorationsWidth = 57,\n            lineHeight = 58,\n            lineNumbers = 59,\n            lineNumbersMinChars = 60,\n            linkedEditing = 61,\n            links = 62,\n            matchBrackets = 63,\n            minimap = 64,\n            mouseStyle = 65,\n            mouseWheelScrollSensitivity = 66,\n            mouseWheelZoom = 67,\n            multiCursorMergeOverlapping = 68,\n            multiCursorModifier = 69,\n            multiCursorPaste = 70,\n            occurrencesHighlight = 71,\n            overviewRulerBorder = 72,\n            overviewRulerLanes = 73,\n            padding = 74,\n            parameterHints = 75,\n            peekWidgetDefaultFocus = 76,\n            definitionLinkOpensInPeek = 77,\n            quickSuggestions = 78,\n            quickSuggestionsDelay = 79,\n            readOnly = 80,\n            renameOnType = 81,\n            renderControlCharacters = 82,\n            renderFinalNewline = 83,\n            renderLineHighlight = 84,\n            renderLineHighlightOnlyWhenFocus = 85,\n            renderValidationDecorations = 86,\n            renderWhitespace = 87,\n            revealHorizontalRightPadding = 88,\n            roundedSelection = 89,\n            rulers = 90,\n            scrollbar = 91,\n            scrollBeyondLastColumn = 92,\n            scrollBeyondLastLine = 93,\n            scrollPredominantAxis = 94,\n            selectionClipboard = 95,\n            selectionHighlight = 96,\n            selectOnLineNumbers = 97,\n            showFoldingControls = 98,\n            showUnused = 99,\n            snippetSuggestions = 100,\n            smartSelect = 101,\n            smoothScrolling = 102,\n            stickyTabStops = 103,\n            stopRenderingLineAfter = 104,\n            suggest = 105,\n            suggestFontSize = 106,\n            suggestLineHeight = 107,\n            suggestOnTriggerCharacters = 108,\n            suggestSelection = 109,\n            tabCompletion = 110,\n            tabIndex = 111,\n            unicodeHighlighting = 112,\n            unusualLineTerminators = 113,\n            useShadowDOM = 114,\n            useTabStops = 115,\n            wordSeparators = 116,\n            wordWrap = 117,\n            wordWrapBreakAfterCharacters = 118,\n            wordWrapBreakBeforeCharacters = 119,\n            wordWrapColumn = 120,\n            wordWrapOverride1 = 121,\n            wordWrapOverride2 = 122,\n            wrappingIndent = 123,\n            wrappingStrategy = 124,\n            showDeprecated = 125,\n            inlayHints = 126,\n            editorClassName = 127,\n            pixelRatio = 128,\n            tabFocusMode = 129,\n            layoutInfo = 130,\n            wrappingInfo = 131\n        }\n        const EditorOptions: {\n            acceptSuggestionOnCommitCharacter: IEditorOption<EditorOption.acceptSuggestionOnCommitCharacter, boolean>;\n            acceptSuggestionOnEnter: IEditorOption<EditorOption.acceptSuggestionOnEnter, 'on' | 'off' | 'smart'>;\n            accessibilitySupport: IEditorOption<EditorOption.accessibilitySupport, AccessibilitySupport>;\n            accessibilityPageSize: IEditorOption<EditorOption.accessibilityPageSize, number>;\n            ariaLabel: IEditorOption<EditorOption.ariaLabel, string>;\n            autoClosingBrackets: IEditorOption<EditorOption.autoClosingBrackets, 'always' | 'languageDefined' | 'beforeWhitespace' | 'never'>;\n            autoClosingDelete: IEditorOption<EditorOption.autoClosingDelete, 'always' | 'never' | 'auto'>;\n            autoClosingOvertype: IEditorOption<EditorOption.autoClosingOvertype, 'always' | 'never' | 'auto'>;\n            autoClosingQuotes: IEditorOption<EditorOption.autoClosingQuotes, 'always' | 'languageDefined' | 'beforeWhitespace' | 'never'>;\n            autoIndent: IEditorOption<EditorOption.autoIndent, EditorAutoIndentStrategy>;\n            automaticLayout: IEditorOption<EditorOption.automaticLayout, boolean>;\n            autoSurround: IEditorOption<EditorOption.autoSurround, 'languageDefined' | 'never' | 'quotes' | 'brackets'>;\n            bracketPairColorization: IEditorOption<EditorOption.bracketPairColorization, Readonly<Required<IBracketPairColorizationOptions>>>;\n            bracketPairGuides: IEditorOption<EditorOption.guides, Readonly<Required<IGuidesOptions>>>;\n            stickyTabStops: IEditorOption<EditorOption.stickyTabStops, boolean>;\n            codeLens: IEditorOption<EditorOption.codeLens, boolean>;\n            codeLensFontFamily: IEditorOption<EditorOption.codeLensFontFamily, string>;\n            codeLensFontSize: IEditorOption<EditorOption.codeLensFontSize, number>;\n            colorDecorators: IEditorOption<EditorOption.colorDecorators, boolean>;\n            columnSelection: IEditorOption<EditorOption.columnSelection, boolean>;\n            comments: IEditorOption<EditorOption.comments, Readonly<Required<IEditorCommentsOptions>>>;\n            contextmenu: IEditorOption<EditorOption.contextmenu, boolean>;\n            copyWithSyntaxHighlighting: IEditorOption<EditorOption.copyWithSyntaxHighlighting, boolean>;\n            cursorBlinking: IEditorOption<EditorOption.cursorBlinking, TextEditorCursorBlinkingStyle>;\n            cursorSmoothCaretAnimation: IEditorOption<EditorOption.cursorSmoothCaretAnimation, boolean>;\n            cursorStyle: IEditorOption<EditorOption.cursorStyle, TextEditorCursorStyle>;\n            cursorSurroundingLines: IEditorOption<EditorOption.cursorSurroundingLines, number>;\n            cursorSurroundingLinesStyle: IEditorOption<EditorOption.cursorSurroundingLinesStyle, 'default' | 'all'>;\n            cursorWidth: IEditorOption<EditorOption.cursorWidth, number>;\n            disableLayerHinting: IEditorOption<EditorOption.disableLayerHinting, boolean>;\n            disableMonospaceOptimizations: IEditorOption<EditorOption.disableMonospaceOptimizations, boolean>;\n            domReadOnly: IEditorOption<EditorOption.domReadOnly, boolean>;\n            dragAndDrop: IEditorOption<EditorOption.dragAndDrop, boolean>;\n            emptySelectionClipboard: IEditorOption<EditorOption.emptySelectionClipboard, boolean>;\n            extraEditorClassName: IEditorOption<EditorOption.extraEditorClassName, string>;\n            fastScrollSensitivity: IEditorOption<EditorOption.fastScrollSensitivity, number>;\n            find: IEditorOption<EditorOption.find, Readonly<Required<IEditorFindOptions>>>;\n            fixedOverflowWidgets: IEditorOption<EditorOption.fixedOverflowWidgets, boolean>;\n            folding: IEditorOption<EditorOption.folding, boolean>;\n            foldingStrategy: IEditorOption<EditorOption.foldingStrategy, 'auto' | 'indentation'>;\n            foldingHighlight: IEditorOption<EditorOption.foldingHighlight, boolean>;\n            foldingImportsByDefault: IEditorOption<EditorOption.foldingImportsByDefault, boolean>;\n            unfoldOnClickAfterEndOfLine: IEditorOption<EditorOption.unfoldOnClickAfterEndOfLine, boolean>;\n            fontFamily: IEditorOption<EditorOption.fontFamily, string>;\n            fontInfo: IEditorOption<EditorOption.fontInfo, FontInfo>;\n            fontLigatures2: IEditorOption<EditorOption.fontLigatures, string>;\n            fontSize: IEditorOption<EditorOption.fontSize, number>;\n            fontWeight: IEditorOption<EditorOption.fontWeight, string>;\n            formatOnPaste: IEditorOption<EditorOption.formatOnPaste, boolean>;\n            formatOnType: IEditorOption<EditorOption.formatOnType, boolean>;\n            glyphMargin: IEditorOption<EditorOption.glyphMargin, boolean>;\n            gotoLocation: IEditorOption<EditorOption.gotoLocation, Readonly<Required<IGotoLocationOptions>>>;\n            hideCursorInOverviewRuler: IEditorOption<EditorOption.hideCursorInOverviewRuler, boolean>;\n            hover: IEditorOption<EditorOption.hover, Readonly<Required<IEditorHoverOptions>>>;\n            inDiffEditor: IEditorOption<EditorOption.inDiffEditor, boolean>;\n            letterSpacing: IEditorOption<EditorOption.letterSpacing, number>;\n            lightbulb: IEditorOption<EditorOption.lightbulb, Readonly<Required<IEditorLightbulbOptions>>>;\n            lineDecorationsWidth: IEditorOption<EditorOption.lineDecorationsWidth, string | number>;\n            lineHeight: IEditorOption<EditorOption.lineHeight, number>;\n            lineNumbers: IEditorOption<EditorOption.lineNumbers, InternalEditorRenderLineNumbersOptions>;\n            lineNumbersMinChars: IEditorOption<EditorOption.lineNumbersMinChars, number>;\n            linkedEditing: IEditorOption<EditorOption.linkedEditing, boolean>;\n            links: IEditorOption<EditorOption.links, boolean>;\n            matchBrackets: IEditorOption<EditorOption.matchBrackets, 'always' | 'never' | 'near'>;\n            minimap: IEditorOption<EditorOption.minimap, Readonly<Required<IEditorMinimapOptions>>>;\n            mouseStyle: IEditorOption<EditorOption.mouseStyle, 'default' | 'text' | 'copy'>;\n            mouseWheelScrollSensitivity: IEditorOption<EditorOption.mouseWheelScrollSensitivity, number>;\n            mouseWheelZoom: IEditorOption<EditorOption.mouseWheelZoom, boolean>;\n            multiCursorMergeOverlapping: IEditorOption<EditorOption.multiCursorMergeOverlapping, boolean>;\n            multiCursorModifier: IEditorOption<EditorOption.multiCursorModifier, 'altKey' | 'metaKey' | 'ctrlKey'>;\n            multiCursorPaste: IEditorOption<EditorOption.multiCursorPaste, 'spread' | 'full'>;\n            occurrencesHighlight: IEditorOption<EditorOption.occurrencesHighlight, boolean>;\n            overviewRulerBorder: IEditorOption<EditorOption.overviewRulerBorder, boolean>;\n            overviewRulerLanes: IEditorOption<EditorOption.overviewRulerLanes, number>;\n            padding: IEditorOption<EditorOption.padding, Readonly<Required<IEditorPaddingOptions>>>;\n            parameterHints: IEditorOption<EditorOption.parameterHints, Readonly<Required<IEditorParameterHintOptions>>>;\n            peekWidgetDefaultFocus: IEditorOption<EditorOption.peekWidgetDefaultFocus, 'tree' | 'editor'>;\n            definitionLinkOpensInPeek: IEditorOption<EditorOption.definitionLinkOpensInPeek, boolean>;\n            quickSuggestions: IEditorOption<EditorOption.quickSuggestions, any>;\n            quickSuggestionsDelay: IEditorOption<EditorOption.quickSuggestionsDelay, number>;\n            readOnly: IEditorOption<EditorOption.readOnly, boolean>;\n            renameOnType: IEditorOption<EditorOption.renameOnType, boolean>;\n            renderControlCharacters: IEditorOption<EditorOption.renderControlCharacters, boolean>;\n            renderFinalNewline: IEditorOption<EditorOption.renderFinalNewline, boolean>;\n            renderLineHighlight: IEditorOption<EditorOption.renderLineHighlight, 'all' | 'line' | 'none' | 'gutter'>;\n            renderLineHighlightOnlyWhenFocus: IEditorOption<EditorOption.renderLineHighlightOnlyWhenFocus, boolean>;\n            renderValidationDecorations: IEditorOption<EditorOption.renderValidationDecorations, 'on' | 'off' | 'editable'>;\n            renderWhitespace: IEditorOption<EditorOption.renderWhitespace, 'all' | 'none' | 'boundary' | 'selection' | 'trailing'>;\n            revealHorizontalRightPadding: IEditorOption<EditorOption.revealHorizontalRightPadding, number>;\n            roundedSelection: IEditorOption<EditorOption.roundedSelection, boolean>;\n            rulers: IEditorOption<EditorOption.rulers, {}>;\n            scrollbar: IEditorOption<EditorOption.scrollbar, InternalEditorScrollbarOptions>;\n            scrollBeyondLastColumn: IEditorOption<EditorOption.scrollBeyondLastColumn, number>;\n            scrollBeyondLastLine: IEditorOption<EditorOption.scrollBeyondLastLine, boolean>;\n            scrollPredominantAxis: IEditorOption<EditorOption.scrollPredominantAxis, boolean>;\n            selectionClipboard: IEditorOption<EditorOption.selectionClipboard, boolean>;\n            selectionHighlight: IEditorOption<EditorOption.selectionHighlight, boolean>;\n            selectOnLineNumbers: IEditorOption<EditorOption.selectOnLineNumbers, boolean>;\n            showFoldingControls: IEditorOption<EditorOption.showFoldingControls, 'always' | 'mouseover'>;\n            showUnused: IEditorOption<EditorOption.showUnused, boolean>;\n            showDeprecated: IEditorOption<EditorOption.showDeprecated, boolean>;\n            inlayHints: IEditorOption<EditorOption.inlayHints, Readonly<Required<IEditorInlayHintsOptions>>>;\n            snippetSuggestions: IEditorOption<EditorOption.snippetSuggestions, 'none' | 'top' | 'bottom' | 'inline'>;\n            smartSelect: IEditorOption<EditorOption.smartSelect, Readonly<Required<ISmartSelectOptions>>>;\n            smoothScrolling: IEditorOption<EditorOption.smoothScrolling, boolean>;\n            stopRenderingLineAfter: IEditorOption<EditorOption.stopRenderingLineAfter, number>;\n            suggest: IEditorOption<EditorOption.suggest, Readonly<Required<ISuggestOptions>>>;\n            inlineSuggest: IEditorOption<EditorOption.inlineSuggest, Readonly<Required<IInlineSuggestOptions>>>;\n            suggestFontSize: IEditorOption<EditorOption.suggestFontSize, number>;\n            suggestLineHeight: IEditorOption<EditorOption.suggestLineHeight, number>;\n            suggestOnTriggerCharacters: IEditorOption<EditorOption.suggestOnTriggerCharacters, boolean>;\n            suggestSelection: IEditorOption<EditorOption.suggestSelection, 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix'>;\n            tabCompletion: IEditorOption<EditorOption.tabCompletion, 'on' | 'off' | 'onlySnippets'>;\n            tabIndex: IEditorOption<EditorOption.tabIndex, number>;\n            unicodeHighlight: IEditorOption<EditorOption.unicodeHighlighting, Required<Readonly<IUnicodeHighlightOptions>>>;\n            unusualLineTerminators: IEditorOption<EditorOption.unusualLineTerminators, 'auto' | 'off' | 'prompt'>;\n            useShadowDOM: IEditorOption<EditorOption.useShadowDOM, boolean>;\n            useTabStops: IEditorOption<EditorOption.useTabStops, boolean>;\n            wordSeparators: IEditorOption<EditorOption.wordSeparators, string>;\n            wordWrap: IEditorOption<EditorOption.wordWrap, 'on' | 'off' | 'wordWrapColumn' | 'bounded'>;\n            wordWrapBreakAfterCharacters: IEditorOption<EditorOption.wordWrapBreakAfterCharacters, string>;\n            wordWrapBreakBeforeCharacters: IEditorOption<EditorOption.wordWrapBreakBeforeCharacters, string>;\n            wordWrapColumn: IEditorOption<EditorOption.wordWrapColumn, number>;\n            wordWrapOverride1: IEditorOption<EditorOption.wordWrapOverride1, 'on' | 'off' | 'inherit'>;\n            wordWrapOverride2: IEditorOption<EditorOption.wordWrapOverride2, 'on' | 'off' | 'inherit'>;\n            wrappingIndent: IEditorOption<EditorOption.wrappingIndent, WrappingIndent>;\n            wrappingStrategy: IEditorOption<EditorOption.wrappingStrategy, 'simple' | 'advanced'>;\n            editorClassName: IEditorOption<EditorOption.editorClassName, string>;\n            pixelRatio: IEditorOption<EditorOption.pixelRatio, number>;\n            tabFocusMode: IEditorOption<EditorOption.tabFocusMode, boolean>;\n            layoutInfo: IEditorOption<EditorOption.layoutInfo, EditorLayoutInfo>;\n            wrappingInfo: IEditorOption<EditorOption.wrappingInfo, EditorWrappingInfo>;\n        };\n        type EditorOptionsType = typeof EditorOptions;\n        type FindEditorOptionsKeyById<T extends EditorOption> = {\n            [K in keyof EditorOptionsType]: EditorOptionsType[K]['id'] extends T ? K : never;\n        }[keyof EditorOptionsType];\n        type ComputedEditorOptionValue<T extends IEditorOption<any, any>> = T extends IEditorOption<any, infer R> ? R : never;\n        type FindComputedEditorOptionValueById<T extends EditorOption> = NonNullable<ComputedEditorOptionValue<EditorOptionsType[FindEditorOptionsKeyById<T>]>>;\n        interface IViewZone {\n            afterLineNumber: number;\n            afterColumn?: number;\n            suppressMouseDown?: boolean;\n            heightInLines?: number;\n            heightInPx?: number;\n            minWidthInPx?: number;\n            domNode: HTMLElement;\n            marginDomNode?: HTMLElement | null;\n            onDomNodeTop?: (top: number) => void;\n            onComputedHeight?: (height: number) => void;\n        }\n        interface IViewZoneChangeAccessor {\n            addZone(zone: IViewZone): string;\n            removeZone(id: string): void;\n            layoutZone(id: string): void;\n        }\n        enum ContentWidgetPositionPreference {\n            EXACT = 0,\n            ABOVE = 1,\n            BELOW = 2\n        }\n        interface IContentWidgetPosition {\n            position: IPosition | null;\n            range?: IRange | null;\n            preference: ContentWidgetPositionPreference[];\n        }\n        interface IContentWidget {\n            allowEditorOverflow?: boolean;\n            suppressMouseDown?: boolean;\n            getId(): string;\n            getDomNode(): HTMLElement;\n            getPosition(): IContentWidgetPosition | null;\n            beforeRender?(): IDimension | null;\n            afterRender?(position: ContentWidgetPositionPreference | null): void;\n        }\n        enum OverlayWidgetPositionPreference {\n            TOP_RIGHT_CORNER = 0,\n            BOTTOM_RIGHT_CORNER = 1,\n            TOP_CENTER = 2\n        }\n        interface IOverlayWidgetPosition {\n            preference: OverlayWidgetPositionPreference | null;\n        }\n        interface IOverlayWidget {\n            getId(): string;\n            getDomNode(): HTMLElement;\n            getPosition(): IOverlayWidgetPosition | null;\n        }\n        enum MouseTargetType {\n            UNKNOWN = 0,\n            TEXTAREA = 1,\n            GUTTER_GLYPH_MARGIN = 2,\n            GUTTER_LINE_NUMBERS = 3,\n            GUTTER_LINE_DECORATIONS = 4,\n            GUTTER_VIEW_ZONE = 5,\n            CONTENT_TEXT = 6,\n            CONTENT_EMPTY = 7,\n            CONTENT_VIEW_ZONE = 8,\n            CONTENT_WIDGET = 9,\n            OVERVIEW_RULER = 10,\n            SCROLLBAR = 11,\n            OVERLAY_WIDGET = 12,\n            OUTSIDE_EDITOR = 13\n        }\n        interface IMouseTarget {\n            readonly element: Element | null;\n            readonly type: MouseTargetType;\n            readonly position: Position | null;\n            readonly mouseColumn: number;\n            readonly range: Range | null;\n            readonly detail: any;\n        }\n        interface IEditorMouseEvent {\n            readonly event: IMouseEvent;\n            readonly target: IMouseTarget;\n        }\n        interface IPartialEditorMouseEvent {\n            readonly event: IMouseEvent;\n            readonly target: IMouseTarget | null;\n        }\n        interface IPasteEvent {\n            readonly range: Range;\n            readonly languageId: string | null;\n        }\n        interface IEditorConstructionOptions extends IEditorOptions {\n            dimension?: IDimension;\n            overflowWidgetsDomNode?: HTMLElement;\n        }\n        interface IDiffEditorConstructionOptions extends IDiffEditorOptions {\n            dimension?: IDimension;\n            overflowWidgetsDomNode?: HTMLElement;\n            originalAriaLabel?: string;\n            modifiedAriaLabel?: string;\n            isInEmbeddedEditor?: boolean;\n        }\n        interface ICodeEditor extends IEditor {\n            onDidChangeModelContent: IEvent<IModelContentChangedEvent>;\n            onDidChangeModelLanguage: IEvent<IModelLanguageChangedEvent>;\n            onDidChangeModelLanguageConfiguration: IEvent<IModelLanguageConfigurationChangedEvent>;\n            onDidChangeModelOptions: IEvent<IModelOptionsChangedEvent>;\n            onDidChangeConfiguration: IEvent<ConfigurationChangedEvent>;\n            onDidChangeCursorPosition: IEvent<ICursorPositionChangedEvent>;\n            onDidChangeCursorSelection: IEvent<ICursorSelectionChangedEvent>;\n            onDidChangeModel: IEvent<IModelChangedEvent>;\n            onDidChangeModelDecorations: IEvent<IModelDecorationsChangedEvent>;\n            onDidFocusEditorText(listener: () => void): IDisposable;\n            onDidBlurEditorText(listener: () => void): IDisposable;\n            onDidFocusEditorWidget(listener: () => void): IDisposable;\n            onDidBlurEditorWidget(listener: () => void): IDisposable;\n            onDidCompositionStart(listener: () => void): IDisposable;\n            onDidCompositionEnd(listener: () => void): IDisposable;\n            onDidAttemptReadOnlyEdit(listener: () => void): IDisposable;\n            onDidPaste: IEvent<IPasteEvent>;\n            onMouseUp: IEvent<IEditorMouseEvent>;\n            onMouseDown: IEvent<IEditorMouseEvent>;\n            onContextMenu: IEvent<IEditorMouseEvent>;\n            onMouseMove: IEvent<IEditorMouseEvent>;\n            onMouseLeave: IEvent<IPartialEditorMouseEvent>;\n            onKeyUp: IEvent<IKeyboardEvent>;\n            onKeyDown: IEvent<IKeyboardEvent>;\n            onDidLayoutChange: IEvent<EditorLayoutInfo>;\n            onDidContentSizeChange: IEvent<IContentSizeChangedEvent>;\n            onDidScrollChange: IEvent<IScrollEvent>;\n            onDidChangeHiddenAreas: IEvent<void>;\n            saveViewState(): ICodeEditorViewState | null;\n            restoreViewState(state: ICodeEditorViewState): void;\n            hasWidgetFocus(): boolean;\n            getContribution<T extends IEditorContribution>(id: string): T;\n            getModel(): ITextModel | null;\n            setModel(model: ITextModel | null): void;\n            getOptions(): IComputedEditorOptions;\n            getOption<T extends EditorOption>(id: T): FindComputedEditorOptionValueById<T>;\n            getRawOptions(): IEditorOptions;\n            getValue(options?: {\n                preserveBOM: boolean;\n                lineEnding: string;\n            }): string;\n            setValue(newValue: string): void;\n            getContentWidth(): number;\n            getScrollWidth(): number;\n            getScrollLeft(): number;\n            getContentHeight(): number;\n            getScrollHeight(): number;\n            getScrollTop(): number;\n            setScrollLeft(newScrollLeft: number, scrollType?: ScrollType): void;\n            setScrollTop(newScrollTop: number, scrollType?: ScrollType): void;\n            setScrollPosition(position: INewScrollPosition, scrollType?: ScrollType): void;\n            getAction(id: string): IEditorAction;\n            executeCommand(source: string | null | undefined, command: ICommand): void;\n            pushUndoStop(): boolean;\n            popUndoStop(): boolean;\n            executeEdits(source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], endCursorState?: ICursorStateComputer | Selection[]): boolean;\n            executeCommands(source: string | null | undefined, commands: (ICommand | null)[]): void;\n            getLineDecorations(lineNumber: number): IModelDecoration[] | null;\n            deltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[]): string[];\n            getLayoutInfo(): EditorLayoutInfo;\n            getVisibleRanges(): Range[];\n            getTopForLineNumber(lineNumber: number): number;\n            getTopForPosition(lineNumber: number, column: number): number;\n            getContainerDomNode(): HTMLElement;\n            getDomNode(): HTMLElement | null;\n            addContentWidget(widget: IContentWidget): void;\n            layoutContentWidget(widget: IContentWidget): void;\n            removeContentWidget(widget: IContentWidget): void;\n            addOverlayWidget(widget: IOverlayWidget): void;\n            layoutOverlayWidget(widget: IOverlayWidget): void;\n            removeOverlayWidget(widget: IOverlayWidget): void;\n            changeViewZones(callback: (accessor: IViewZoneChangeAccessor) => void): void;\n            getOffsetForColumn(lineNumber: number, column: number): number;\n            render(forceRedraw?: boolean): void;\n            getTargetAtClientPoint(clientX: number, clientY: number): IMouseTarget | null;\n            getScrolledVisiblePosition(position: IPosition): {\n                top: number;\n                left: number;\n                height: number;\n            } | null;\n            applyFontInfo(target: HTMLElement): void;\n            setBanner(bannerDomNode: HTMLElement | null, height: number): void;\n        }\n        interface IDiffLineInformation {\n            readonly equivalentLineNumber: number;\n        }\n        interface IDiffEditor extends IEditor {\n            getDomNode(): HTMLElement;\n            onDidUpdateDiff(listener: () => void): IDisposable;\n            saveViewState(): IDiffEditorViewState | null;\n            restoreViewState(state: IDiffEditorViewState): void;\n            getModel(): IDiffEditorModel | null;\n            setModel(model: IDiffEditorModel | null): void;\n            getOriginalEditor(): ICodeEditor;\n            getModifiedEditor(): ICodeEditor;\n            getLineChanges(): ILineChange[] | null;\n            getDiffLineInformationForOriginal(lineNumber: number): IDiffLineInformation | null;\n            getDiffLineInformationForModified(lineNumber: number): IDiffLineInformation | null;\n            updateOptions(newOptions: IDiffEditorOptions): void;\n        }\n        class FontInfo extends BareFontInfo {\n            readonly _editorStylingBrand: void;\n            readonly version: number;\n            readonly isTrusted: boolean;\n            readonly isMonospace: boolean;\n            readonly typicalHalfwidthCharacterWidth: number;\n            readonly typicalFullwidthCharacterWidth: number;\n            readonly canUseHalfwidthRightwardsArrow: boolean;\n            readonly spaceWidth: number;\n            readonly middotWidth: number;\n            readonly wsmiddotWidth: number;\n            readonly maxDigitWidth: number;\n        }\n        class BareFontInfo {\n            readonly _bareFontInfoBrand: void;\n            readonly zoomLevel: number;\n            readonly pixelRatio: number;\n            readonly fontFamily: string;\n            readonly fontWeight: string;\n            readonly fontSize: number;\n            readonly fontFeatureSettings: string;\n            readonly lineHeight: number;\n            readonly letterSpacing: number;\n        }\n        type IReadOnlyModel = ITextModel;\n        type IModel = ITextModel;\n    }\n    export namespace languages {\n        function register(language: ILanguageExtensionPoint): void;\n        function getLanguages(): ILanguageExtensionPoint[];\n        function getEncodedLanguageId(languageId: string): number;\n        function onLanguage(languageId: string, callback: () => void): IDisposable;\n        function setLanguageConfiguration(languageId: string, configuration: LanguageConfiguration): IDisposable;\n        interface IToken {\n            startIndex: number;\n            scopes: string;\n        }\n        interface ILineTokens {\n            tokens: IToken[];\n            endState: IState;\n        }\n        interface IEncodedLineTokens {\n            tokens: Uint32Array;\n            endState: IState;\n        }\n        interface TokensProvider {\n            getInitialState(): IState;\n            tokenize(line: string, state: IState): ILineTokens;\n        }\n        interface EncodedTokensProvider {\n            getInitialState(): IState;\n            tokenizeEncoded(line: string, state: IState): IEncodedLineTokens;\n            tokenize?(line: string, state: IState): ILineTokens;\n        }\n        function setColorMap(colorMap: string[] | null): void;\n        function setTokensProvider(languageId: string, provider: TokensProvider | EncodedTokensProvider | Thenable<TokensProvider | EncodedTokensProvider>): IDisposable;\n        function setMonarchTokensProvider(languageId: string, languageDef: IMonarchLanguage | Thenable<IMonarchLanguage>): IDisposable;\n        function registerReferenceProvider(languageId: string, provider: ReferenceProvider): IDisposable;\n        function registerRenameProvider(languageId: string, provider: RenameProvider): IDisposable;\n        function registerSignatureHelpProvider(languageId: string, provider: SignatureHelpProvider): IDisposable;\n        function registerHoverProvider(languageId: string, provider: HoverProvider): IDisposable;\n        function registerDocumentSymbolProvider(languageId: string, provider: DocumentSymbolProvider): IDisposable;\n        function registerDocumentHighlightProvider(languageId: string, provider: DocumentHighlightProvider): IDisposable;\n        function registerLinkedEditingRangeProvider(languageId: string, provider: LinkedEditingRangeProvider): IDisposable;\n        function registerDefinitionProvider(languageId: string, provider: DefinitionProvider): IDisposable;\n        function registerImplementationProvider(languageId: string, provider: ImplementationProvider): IDisposable;\n        function registerTypeDefinitionProvider(languageId: string, provider: TypeDefinitionProvider): IDisposable;\n        function registerCodeLensProvider(languageId: string, provider: CodeLensProvider): IDisposable;\n        function registerCodeActionProvider(languageId: string, provider: CodeActionProvider, metadata?: CodeActionProviderMetadata): IDisposable;\n        function registerDocumentFormattingEditProvider(languageId: string, provider: DocumentFormattingEditProvider): IDisposable;\n        function registerDocumentRangeFormattingEditProvider(languageId: string, provider: DocumentRangeFormattingEditProvider): IDisposable;\n        function registerOnTypeFormattingEditProvider(languageId: string, provider: OnTypeFormattingEditProvider): IDisposable;\n        function registerLinkProvider(languageId: string, provider: LinkProvider): IDisposable;\n        function registerCompletionItemProvider(languageId: string, provider: CompletionItemProvider): IDisposable;\n        function registerColorProvider(languageId: string, provider: DocumentColorProvider): IDisposable;\n        function registerFoldingRangeProvider(languageId: string, provider: FoldingRangeProvider): IDisposable;\n        function registerDeclarationProvider(languageId: string, provider: DeclarationProvider): IDisposable;\n        function registerSelectionRangeProvider(languageId: string, provider: SelectionRangeProvider): IDisposable;\n        function registerDocumentSemanticTokensProvider(languageId: string, provider: DocumentSemanticTokensProvider): IDisposable;\n        function registerDocumentRangeSemanticTokensProvider(languageId: string, provider: DocumentRangeSemanticTokensProvider): IDisposable;\n        function registerInlineCompletionsProvider(languageId: string, provider: InlineCompletionsProvider): IDisposable;\n        function registerInlayHintsProvider(languageId: string, provider: InlayHintsProvider): IDisposable;\n        interface CodeActionContext {\n            readonly markers: editor.IMarkerData[];\n            readonly only?: string;\n        }\n        interface CodeActionProvider {\n            provideCodeActions(model: editor.ITextModel, range: Range, context: CodeActionContext, token: CancellationToken): ProviderResult<CodeActionList>;\n            resolveCodeAction?(codeAction: CodeAction, token: CancellationToken): ProviderResult<CodeAction>;\n        }\n        interface CodeActionProviderMetadata {\n            readonly providedCodeActionKinds?: readonly string[];\n        }\n        interface CommentRule {\n            lineComment?: string | null;\n            blockComment?: CharacterPair | null;\n        }\n        interface LanguageConfiguration {\n            comments?: CommentRule;\n            brackets?: CharacterPair[];\n            wordPattern?: RegExp;\n            indentationRules?: IndentationRule;\n            onEnterRules?: OnEnterRule[];\n            autoClosingPairs?: IAutoClosingPairConditional[];\n            surroundingPairs?: IAutoClosingPair[];\n            colorizedBracketPairs?: CharacterPair[];\n            autoCloseBefore?: string;\n            folding?: FoldingRules;\n            __electricCharacterSupport?: {\n                docComment?: IDocComment;\n            };\n        }\n        interface IndentationRule {\n            decreaseIndentPattern: RegExp;\n            increaseIndentPattern: RegExp;\n            indentNextLinePattern?: RegExp | null;\n            unIndentedLinePattern?: RegExp | null;\n        }\n        interface FoldingMarkers {\n            start: RegExp;\n            end: RegExp;\n        }\n        interface FoldingRules {\n            offSide?: boolean;\n            markers?: FoldingMarkers;\n        }\n        interface OnEnterRule {\n            beforeText: RegExp;\n            afterText?: RegExp;\n            previousLineText?: RegExp;\n            action: EnterAction;\n        }\n        interface IDocComment {\n            open: string;\n            close?: string;\n        }\n        type CharacterPair = [string, string];\n        interface IAutoClosingPair {\n            open: string;\n            close: string;\n        }\n        interface IAutoClosingPairConditional extends IAutoClosingPair {\n            notIn?: string[];\n        }\n        enum IndentAction {\n            None = 0,\n            Indent = 1,\n            IndentOutdent = 2,\n            Outdent = 3\n        }\n        interface EnterAction {\n            indentAction: IndentAction;\n            appendText?: string;\n            removeText?: number;\n        }\n        interface IState {\n            clone(): IState;\n            equals(other: IState): boolean;\n        }\n        type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;\n        interface Hover {\n            contents: IMarkdownString[];\n            range?: IRange;\n        }\n        interface HoverProvider {\n            provideHover(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Hover>;\n        }\n        enum CompletionItemKind {\n            Method = 0,\n            Function = 1,\n            Constructor = 2,\n            Field = 3,\n            Variable = 4,\n            Class = 5,\n            Struct = 6,\n            Interface = 7,\n            Module = 8,\n            Property = 9,\n            Event = 10,\n            Operator = 11,\n            Unit = 12,\n            Value = 13,\n            Constant = 14,\n            Enum = 15,\n            EnumMember = 16,\n            Keyword = 17,\n            Text = 18,\n            Color = 19,\n            File = 20,\n            Reference = 21,\n            Customcolor = 22,\n            Folder = 23,\n            TypeParameter = 24,\n            User = 25,\n            Issue = 26,\n            Snippet = 27\n        }\n        interface CompletionItemLabel {\n            label: string;\n            detail?: string;\n            description?: string;\n        }\n        enum CompletionItemTag {\n            Deprecated = 1\n        }\n        enum CompletionItemInsertTextRule {\n            KeepWhitespace = 1,\n            InsertAsSnippet = 4\n        }\n        interface CompletionItemRanges {\n            insert: IRange;\n            replace: IRange;\n        }\n        interface CompletionItem {\n            label: string | CompletionItemLabel;\n            kind: CompletionItemKind;\n            tags?: ReadonlyArray<CompletionItemTag>;\n            detail?: string;\n            documentation?: string | IMarkdownString;\n            sortText?: string;\n            filterText?: string;\n            preselect?: boolean;\n            insertText: string;\n            insertTextRules?: CompletionItemInsertTextRule;\n            range: IRange | CompletionItemRanges;\n            commitCharacters?: string[];\n            additionalTextEdits?: editor.ISingleEditOperation[];\n            command?: Command;\n        }\n        interface CompletionList {\n            suggestions: CompletionItem[];\n            incomplete?: boolean;\n            dispose?(): void;\n        }\n        enum CompletionTriggerKind {\n            Invoke = 0,\n            TriggerCharacter = 1,\n            TriggerForIncompleteCompletions = 2\n        }\n        interface CompletionContext {\n            triggerKind: CompletionTriggerKind;\n            triggerCharacter?: string;\n        }\n        interface CompletionItemProvider {\n            triggerCharacters?: string[];\n            provideCompletionItems(model: editor.ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList>;\n            resolveCompletionItem?(item: CompletionItem, token: CancellationToken): ProviderResult<CompletionItem>;\n        }\n        enum InlineCompletionTriggerKind {\n            Automatic = 0,\n            Explicit = 1\n        }\n        interface InlineCompletionContext {\n            readonly triggerKind: InlineCompletionTriggerKind;\n            readonly selectedSuggestionInfo: SelectedSuggestionInfo | undefined;\n        }\n        interface SelectedSuggestionInfo {\n            range: IRange;\n            text: string;\n            isSnippetText: boolean;\n            completionKind: CompletionItemKind;\n        }\n        interface InlineCompletion {\n            readonly text: string;\n            readonly range?: IRange;\n            readonly command?: Command;\n        }\n        interface InlineCompletions<TItem extends InlineCompletion = InlineCompletion> {\n            readonly items: readonly TItem[];\n        }\n        interface InlineCompletionsProvider<T extends InlineCompletions = InlineCompletions> {\n            provideInlineCompletions(model: editor.ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): ProviderResult<T>;\n            handleItemDidShow?(completions: T, item: T['items'][number]): void;\n            freeInlineCompletions(completions: T): void;\n        }\n        interface CodeAction {\n            title: string;\n            command?: Command;\n            edit?: WorkspaceEdit;\n            diagnostics?: editor.IMarkerData[];\n            kind?: string;\n            isPreferred?: boolean;\n            disabled?: string;\n        }\n        interface CodeActionList extends IDisposable {\n            readonly actions: ReadonlyArray<CodeAction>;\n        }\n        interface ParameterInformation {\n            label: string | [number, number];\n            documentation?: string | IMarkdownString;\n        }\n        interface SignatureInformation {\n            label: string;\n            documentation?: string | IMarkdownString;\n            parameters: ParameterInformation[];\n            activeParameter?: number;\n        }\n        interface SignatureHelp {\n            signatures: SignatureInformation[];\n            activeSignature: number;\n            activeParameter: number;\n        }\n        interface SignatureHelpResult extends IDisposable {\n            value: SignatureHelp;\n        }\n        enum SignatureHelpTriggerKind {\n            Invoke = 1,\n            TriggerCharacter = 2,\n            ContentChange = 3\n        }\n        interface SignatureHelpContext {\n            readonly triggerKind: SignatureHelpTriggerKind;\n            readonly triggerCharacter?: string;\n            readonly isRetrigger: boolean;\n            readonly activeSignatureHelp?: SignatureHelp;\n        }\n        interface SignatureHelpProvider {\n            readonly signatureHelpTriggerCharacters?: ReadonlyArray<string>;\n            readonly signatureHelpRetriggerCharacters?: ReadonlyArray<string>;\n            provideSignatureHelp(model: editor.ITextModel, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelpResult>;\n        }\n        enum DocumentHighlightKind {\n            Text = 0,\n            Read = 1,\n            Write = 2\n        }\n        interface DocumentHighlight {\n            range: IRange;\n            kind?: DocumentHighlightKind;\n        }\n        interface DocumentHighlightProvider {\n            provideDocumentHighlights(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;\n        }\n        interface LinkedEditingRangeProvider {\n            provideLinkedEditingRanges(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<LinkedEditingRanges>;\n        }\n        interface LinkedEditingRanges {\n            ranges: IRange[];\n            wordPattern?: RegExp;\n        }\n        interface ReferenceContext {\n            includeDeclaration: boolean;\n        }\n        interface ReferenceProvider {\n            provideReferences(model: editor.ITextModel, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;\n        }\n        interface Location {\n            uri: Uri;\n            range: IRange;\n        }\n        interface LocationLink {\n            originSelectionRange?: IRange;\n            uri: Uri;\n            range: IRange;\n            targetSelectionRange?: IRange;\n        }\n        type Definition = Location | Location[] | LocationLink[];\n        interface DefinitionProvider {\n            provideDefinition(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n        }\n        interface DeclarationProvider {\n            provideDeclaration(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n        }\n        interface ImplementationProvider {\n            provideImplementation(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n        }\n        interface TypeDefinitionProvider {\n            provideTypeDefinition(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n        }\n        enum SymbolKind {\n            File = 0,\n            Module = 1,\n            Namespace = 2,\n            Package = 3,\n            Class = 4,\n            Method = 5,\n            Property = 6,\n            Field = 7,\n            Constructor = 8,\n            Enum = 9,\n            Interface = 10,\n            Function = 11,\n            Variable = 12,\n            Constant = 13,\n            String = 14,\n            Number = 15,\n            Boolean = 16,\n            Array = 17,\n            Object = 18,\n            Key = 19,\n            Null = 20,\n            EnumMember = 21,\n            Struct = 22,\n            Event = 23,\n            Operator = 24,\n            TypeParameter = 25\n        }\n        enum SymbolTag {\n            Deprecated = 1\n        }\n        interface DocumentSymbol {\n            name: string;\n            detail: string;\n            kind: SymbolKind;\n            tags: ReadonlyArray<SymbolTag>;\n            containerName?: string;\n            range: IRange;\n            selectionRange: IRange;\n            children?: DocumentSymbol[];\n        }\n        interface DocumentSymbolProvider {\n            displayName?: string;\n            provideDocumentSymbols(model: editor.ITextModel, token: CancellationToken): ProviderResult<DocumentSymbol[]>;\n        }\n        type TextEdit = {\n            range: IRange;\n            text: string;\n            eol?: editor.EndOfLineSequence;\n        };\n        interface FormattingOptions {\n            tabSize: number;\n            insertSpaces: boolean;\n        }\n        interface DocumentFormattingEditProvider {\n            readonly displayName?: string;\n            provideDocumentFormattingEdits(model: editor.ITextModel, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n        }\n        interface DocumentRangeFormattingEditProvider {\n            readonly displayName?: string;\n            provideDocumentRangeFormattingEdits(model: editor.ITextModel, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n        }\n        interface OnTypeFormattingEditProvider {\n            autoFormatTriggerCharacters: string[];\n            provideOnTypeFormattingEdits(model: editor.ITextModel, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n        }\n        interface ILink {\n            range: IRange;\n            url?: Uri | string;\n            tooltip?: string;\n        }\n        interface ILinksList {\n            links: ILink[];\n            dispose?(): void;\n        }\n        interface LinkProvider {\n            provideLinks(model: editor.ITextModel, token: CancellationToken): ProviderResult<ILinksList>;\n            resolveLink?: (link: ILink, token: CancellationToken) => ProviderResult<ILink>;\n        }\n        interface IColor {\n            readonly red: number;\n            readonly green: number;\n            readonly blue: number;\n            readonly alpha: number;\n        }\n        interface IColorPresentation {\n            label: string;\n            textEdit?: TextEdit;\n            additionalTextEdits?: TextEdit[];\n        }\n        interface IColorInformation {\n            range: IRange;\n            color: IColor;\n        }\n        interface DocumentColorProvider {\n            provideDocumentColors(model: editor.ITextModel, token: CancellationToken): ProviderResult<IColorInformation[]>;\n            provideColorPresentations(model: editor.ITextModel, colorInfo: IColorInformation, token: CancellationToken): ProviderResult<IColorPresentation[]>;\n        }\n        interface SelectionRange {\n            range: IRange;\n        }\n        interface SelectionRangeProvider {\n            provideSelectionRanges(model: editor.ITextModel, positions: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;\n        }\n        interface FoldingContext {\n        }\n        interface FoldingRangeProvider {\n            onDidChange?: IEvent<this>;\n            provideFoldingRanges(model: editor.ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\n        }\n        interface FoldingRange {\n            start: number;\n            end: number;\n            kind?: FoldingRangeKind;\n        }\n        class FoldingRangeKind {\n            value: string;\n            static readonly Comment: FoldingRangeKind;\n            static readonly Imports: FoldingRangeKind;\n            static readonly Region: FoldingRangeKind;\n            constructor(value: string);\n        }\n        interface WorkspaceEditMetadata {\n            needsConfirmation: boolean;\n            label: string;\n            description?: string;\n        }\n        interface WorkspaceFileEditOptions {\n            overwrite?: boolean;\n            ignoreIfNotExists?: boolean;\n            ignoreIfExists?: boolean;\n            recursive?: boolean;\n            copy?: boolean;\n            folder?: boolean;\n            skipTrashBin?: boolean;\n            maxSize?: number;\n        }\n        interface WorkspaceFileEdit {\n            oldUri?: Uri;\n            newUri?: Uri;\n            options?: WorkspaceFileEditOptions;\n            metadata?: WorkspaceEditMetadata;\n        }\n        interface WorkspaceTextEdit {\n            resource: Uri;\n            edit: TextEdit;\n            modelVersionId?: number;\n            metadata?: WorkspaceEditMetadata;\n        }\n        interface WorkspaceEdit {\n            edits: Array<WorkspaceTextEdit | WorkspaceFileEdit>;\n        }\n        interface Rejection {\n            rejectReason?: string;\n        }\n        interface RenameLocation {\n            range: IRange;\n            text: string;\n        }\n        interface RenameProvider {\n            provideRenameEdits(model: editor.ITextModel, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit & Rejection>;\n            resolveRenameLocation?(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<RenameLocation & Rejection>;\n        }\n        interface Command {\n            id: string;\n            title: string;\n            tooltip?: string;\n            arguments?: any[];\n        }\n        interface CodeLens {\n            range: IRange;\n            id?: string;\n            command?: Command;\n        }\n        interface CodeLensList {\n            lenses: CodeLens[];\n            dispose(): void;\n        }\n        interface CodeLensProvider {\n            onDidChange?: IEvent<this>;\n            provideCodeLenses(model: editor.ITextModel, token: CancellationToken): ProviderResult<CodeLensList>;\n            resolveCodeLens?(model: editor.ITextModel, codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>;\n        }\n        enum InlayHintKind {\n            Other = 0,\n            Type = 1,\n            Parameter = 2\n        }\n        interface InlayHint {\n            text: string;\n            position: IPosition;\n            kind: InlayHintKind;\n            whitespaceBefore?: boolean;\n            whitespaceAfter?: boolean;\n        }\n        interface InlayHintsProvider {\n            onDidChangeInlayHints?: IEvent<void>;\n            provideInlayHints(model: editor.ITextModel, range: Range, token: CancellationToken): ProviderResult<InlayHint[]>;\n        }\n        interface SemanticTokensLegend {\n            readonly tokenTypes: string[];\n            readonly tokenModifiers: string[];\n        }\n        interface SemanticTokens {\n            readonly resultId?: string;\n            readonly data: Uint32Array;\n        }\n        interface SemanticTokensEdit {\n            readonly start: number;\n            readonly deleteCount: number;\n            readonly data?: Uint32Array;\n        }\n        interface SemanticTokensEdits {\n            readonly resultId?: string;\n            readonly edits: SemanticTokensEdit[];\n        }\n        interface DocumentSemanticTokensProvider {\n            onDidChange?: IEvent<void>;\n            getLegend(): SemanticTokensLegend;\n            provideDocumentSemanticTokens(model: editor.ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits>;\n            releaseDocumentSemanticTokens(resultId: string | undefined): void;\n        }\n        interface DocumentRangeSemanticTokensProvider {\n            getLegend(): SemanticTokensLegend;\n            provideDocumentRangeSemanticTokens(model: editor.ITextModel, range: Range, token: CancellationToken): ProviderResult<SemanticTokens>;\n        }\n        interface ILanguageExtensionPoint {\n            id: string;\n            extensions?: string[];\n            filenames?: string[];\n            filenamePatterns?: string[];\n            firstLine?: string;\n            aliases?: string[];\n            mimetypes?: string[];\n            configuration?: Uri;\n        }\n        interface IMonarchLanguage {\n            tokenizer: {\n                [name: string]: IMonarchLanguageRule[];\n            };\n            ignoreCase?: boolean;\n            unicode?: boolean;\n            defaultToken?: string;\n            brackets?: IMonarchLanguageBracket[];\n            start?: string;\n            tokenPostfix?: string;\n            includeLF?: boolean;\n            [key: string]: any;\n        }\n        type IShortMonarchLanguageRule1 = [string | RegExp, IMonarchLanguageAction];\n        type IShortMonarchLanguageRule2 = [string | RegExp, IMonarchLanguageAction, string];\n        interface IExpandedMonarchLanguageRule {\n            regex?: string | RegExp;\n            action?: IMonarchLanguageAction;\n            include?: string;\n        }\n        type IMonarchLanguageRule = IShortMonarchLanguageRule1 | IShortMonarchLanguageRule2 | IExpandedMonarchLanguageRule;\n        type IShortMonarchLanguageAction = string;\n        interface IExpandedMonarchLanguageAction {\n            group?: IMonarchLanguageAction[];\n            cases?: Object;\n            token?: string;\n            next?: string;\n            switchTo?: string;\n            goBack?: number;\n            bracket?: string;\n            nextEmbedded?: string;\n            log?: string;\n        }\n        type IMonarchLanguageAction = IShortMonarchLanguageAction | IExpandedMonarchLanguageAction | IShortMonarchLanguageAction[] | IExpandedMonarchLanguageAction[];\n        interface IMonarchLanguageBracket {\n            open: string;\n            close: string;\n            token: string;\n        }\n    }\n    export namespace worker {\n        interface IMirrorTextModel {\n            readonly version: number;\n        }\n        interface IMirrorModel extends IMirrorTextModel {\n            readonly uri: Uri;\n            readonly version: number;\n            getValue(): string;\n        }\n        interface IWorkerContext<H = undefined> {\n            host: H;\n            getMirrorModels(): IMirrorModel[];\n        }\n    }\n    export namespace languages.typescript {\n        enum ModuleKind {\n            None = 0,\n            CommonJS = 1,\n            AMD = 2,\n            UMD = 3,\n            System = 4,\n            ES2015 = 5,\n            ESNext = 99\n        }\n        enum JsxEmit {\n            None = 0,\n            Preserve = 1,\n            React = 2,\n            ReactNative = 3,\n            ReactJSX = 4,\n            ReactJSXDev = 5\n        }\n        enum NewLineKind {\n            CarriageReturnLineFeed = 0,\n            LineFeed = 1\n        }\n        enum ScriptTarget {\n            ES3 = 0,\n            ES5 = 1,\n            ES2015 = 2,\n            ES2016 = 3,\n            ES2017 = 4,\n            ES2018 = 5,\n            ES2019 = 6,\n            ES2020 = 7,\n            ESNext = 99,\n            JSON = 100,\n            Latest = 99\n        }\n        enum ModuleResolutionKind {\n            Classic = 1,\n            NodeJs = 2\n        }\n        interface MapLike<T> {\n            [index: string]: T;\n        }\n        type CompilerOptionsValue = string | number | boolean | (string | number)[] | string[] | MapLike<string[]> | null | undefined;\n        interface CompilerOptions {\n            allowJs?: boolean;\n            allowSyntheticDefaultImports?: boolean;\n            allowUmdGlobalAccess?: boolean;\n            allowUnreachableCode?: boolean;\n            allowUnusedLabels?: boolean;\n            alwaysStrict?: boolean;\n            baseUrl?: string;\n            charset?: string;\n            checkJs?: boolean;\n            declaration?: boolean;\n            declarationMap?: boolean;\n            emitDeclarationOnly?: boolean;\n            declarationDir?: string;\n            disableSizeLimit?: boolean;\n            disableSourceOfProjectReferenceRedirect?: boolean;\n            downlevelIteration?: boolean;\n            emitBOM?: boolean;\n            emitDecoratorMetadata?: boolean;\n            experimentalDecorators?: boolean;\n            forceConsistentCasingInFileNames?: boolean;\n            importHelpers?: boolean;\n            inlineSourceMap?: boolean;\n            inlineSources?: boolean;\n            isolatedModules?: boolean;\n            jsx?: JsxEmit;\n            keyofStringsOnly?: boolean;\n            lib?: string[];\n            locale?: string;\n            mapRoot?: string;\n            maxNodeModuleJsDepth?: number;\n            module?: ModuleKind;\n            moduleResolution?: ModuleResolutionKind;\n            newLine?: NewLineKind;\n            noEmit?: boolean;\n            noEmitHelpers?: boolean;\n            noEmitOnError?: boolean;\n            noErrorTruncation?: boolean;\n            noFallthroughCasesInSwitch?: boolean;\n            noImplicitAny?: boolean;\n            noImplicitReturns?: boolean;\n            noImplicitThis?: boolean;\n            noStrictGenericChecks?: boolean;\n            noUnusedLocals?: boolean;\n            noUnusedParameters?: boolean;\n            noImplicitUseStrict?: boolean;\n            noLib?: boolean;\n            noResolve?: boolean;\n            out?: string;\n            outDir?: string;\n            outFile?: string;\n            paths?: MapLike<string[]>;\n            preserveConstEnums?: boolean;\n            preserveSymlinks?: boolean;\n            project?: string;\n            reactNamespace?: string;\n            jsxFactory?: string;\n            composite?: boolean;\n            removeComments?: boolean;\n            rootDir?: string;\n            rootDirs?: string[];\n            skipLibCheck?: boolean;\n            skipDefaultLibCheck?: boolean;\n            sourceMap?: boolean;\n            sourceRoot?: string;\n            strict?: boolean;\n            strictFunctionTypes?: boolean;\n            strictBindCallApply?: boolean;\n            strictNullChecks?: boolean;\n            strictPropertyInitialization?: boolean;\n            stripInternal?: boolean;\n            suppressExcessPropertyErrors?: boolean;\n            suppressImplicitAnyIndexErrors?: boolean;\n            target?: ScriptTarget;\n            traceResolution?: boolean;\n            resolveJsonModule?: boolean;\n            types?: string[];\n            typeRoots?: string[];\n            esModuleInterop?: boolean;\n            useDefineForClassFields?: boolean;\n            [option: string]: CompilerOptionsValue | undefined;\n        }\n        interface DiagnosticsOptions {\n            noSemanticValidation?: boolean;\n            noSyntaxValidation?: boolean;\n            noSuggestionDiagnostics?: boolean;\n            onlyVisible?: boolean;\n            diagnosticCodesToIgnore?: number[];\n        }\n        interface WorkerOptions {\n            customWorkerPath?: string;\n        }\n        interface InlayHintsOptions {\n            readonly includeInlayParameterNameHints?: 'none' | 'literals' | 'all';\n            readonly includeInlayParameterNameHintsWhenArgumentMatchesName?: boolean;\n            readonly includeInlayFunctionParameterTypeHints?: boolean;\n            readonly includeInlayVariableTypeHints?: boolean;\n            readonly includeInlayPropertyDeclarationTypeHints?: boolean;\n            readonly includeInlayFunctionLikeReturnTypeHints?: boolean;\n            readonly includeInlayEnumMemberValueHints?: boolean;\n        }\n        interface IExtraLib {\n            content: string;\n            version: number;\n        }\n        interface IExtraLibs {\n            [path: string]: IExtraLib;\n        }\n        interface DiagnosticMessageChain {\n            messageText: string;\n            category: 0 | 1 | 2 | 3;\n            code: number;\n            next?: DiagnosticMessageChain[];\n        }\n        interface Diagnostic extends DiagnosticRelatedInformation {\n            reportsUnnecessary?: {};\n            reportsDeprecated?: {};\n            source?: string;\n            relatedInformation?: DiagnosticRelatedInformation[];\n        }\n        interface DiagnosticRelatedInformation {\n            category: 0 | 1 | 2 | 3;\n            code: number;\n            file: {\n                fileName: string;\n            } | undefined;\n            start: number | undefined;\n            length: number | undefined;\n            messageText: string | DiagnosticMessageChain;\n        }\n        interface EmitOutput {\n            outputFiles: OutputFile[];\n            emitSkipped: boolean;\n        }\n        interface OutputFile {\n            name: string;\n            writeByteOrderMark: boolean;\n            text: string;\n        }\n        interface LanguageServiceDefaults {\n            readonly onDidChange: IEvent<void>;\n            readonly onDidExtraLibsChange: IEvent<void>;\n            readonly workerOptions: WorkerOptions;\n            readonly inlayHintsOptions: InlayHintsOptions;\n            getExtraLibs(): IExtraLibs;\n            addExtraLib(content: string, filePath?: string): IDisposable;\n            setExtraLibs(libs: {\n                content: string;\n                filePath?: string;\n            }[]): void;\n            getCompilerOptions(): CompilerOptions;\n            setCompilerOptions(options: CompilerOptions): void;\n            getDiagnosticsOptions(): DiagnosticsOptions;\n            setDiagnosticsOptions(options: DiagnosticsOptions): void;\n            setWorkerOptions(options: WorkerOptions): void;\n            setMaximumWorkerIdleTime(value: number): void;\n            setEagerModelSync(value: boolean): void;\n            getEagerModelSync(): boolean;\n            setInlayHintsOptions(options: InlayHintsOptions): void;\n        }\n        interface TypeScriptWorker {\n            getSyntacticDiagnostics(fileName: string): Promise<Diagnostic[]>;\n            getSemanticDiagnostics(fileName: string): Promise<Diagnostic[]>;\n            getSuggestionDiagnostics(fileName: string): Promise<Diagnostic[]>;\n            getScriptText(fileName: string): Promise<string | undefined>;\n            getCompilerOptionsDiagnostics(fileName: string): Promise<Diagnostic[]>;\n            getCompletionsAtPosition(fileName: string, position: number): Promise<any | undefined>;\n            getCompletionEntryDetails(fileName: string, position: number, entry: string): Promise<any | undefined>;\n            getSignatureHelpItems(fileName: string, position: number, options: any): Promise<any | undefined>;\n            getQuickInfoAtPosition(fileName: string, position: number): Promise<any | undefined>;\n            getOccurrencesAtPosition(fileName: string, position: number): Promise<ReadonlyArray<any> | undefined>;\n            getDefinitionAtPosition(fileName: string, position: number): Promise<ReadonlyArray<any> | undefined>;\n            getReferencesAtPosition(fileName: string, position: number): Promise<any[] | undefined>;\n            getNavigationBarItems(fileName: string): Promise<any[]>;\n            getFormattingEditsForDocument(fileName: string, options: any): Promise<any[]>;\n            getFormattingEditsForRange(fileName: string, start: number, end: number, options: any): Promise<any[]>;\n            getFormattingEditsAfterKeystroke(fileName: string, postion: number, ch: string, options: any): Promise<any[]>;\n            findRenameLocations(fileName: string, positon: number, findInStrings: boolean, findInComments: boolean, providePrefixAndSuffixTextForRename: boolean): Promise<readonly any[] | undefined>;\n            getRenameInfo(fileName: string, positon: number, options: any): Promise<any>;\n            getEmitOutput(fileName: string): Promise<EmitOutput>;\n            getCodeFixesAtPosition(fileName: string, start: number, end: number, errorCodes: number[], formatOptions: any): Promise<ReadonlyArray<any>>;\n            provideInlayHints(fileName: string, start: number, end: number): Promise<ReadonlyArray<any>>;\n        }\n        const typescriptVersion: string;\n        const typescriptDefaults: LanguageServiceDefaults;\n        const javascriptDefaults: LanguageServiceDefaults;\n        const getTypeScriptWorker: () => Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;\n        const getJavaScriptWorker: () => Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;\n    }\n    export namespace languages.css {\n        interface Options {\n            readonly validate?: boolean;\n            readonly lint?: {\n                readonly compatibleVendorPrefixes?: 'ignore' | 'warning' | 'error';\n                readonly vendorPrefix?: 'ignore' | 'warning' | 'error';\n                readonly duplicateProperties?: 'ignore' | 'warning' | 'error';\n                readonly emptyRules?: 'ignore' | 'warning' | 'error';\n                readonly importStatement?: 'ignore' | 'warning' | 'error';\n                readonly boxModel?: 'ignore' | 'warning' | 'error';\n                readonly universalSelector?: 'ignore' | 'warning' | 'error';\n                readonly zeroUnits?: 'ignore' | 'warning' | 'error';\n                readonly fontFaceProperties?: 'ignore' | 'warning' | 'error';\n                readonly hexColorLength?: 'ignore' | 'warning' | 'error';\n                readonly argumentsInColorFunction?: 'ignore' | 'warning' | 'error';\n                readonly unknownProperties?: 'ignore' | 'warning' | 'error';\n                readonly ieHack?: 'ignore' | 'warning' | 'error';\n                readonly unknownVendorSpecificProperties?: 'ignore' | 'warning' | 'error';\n                readonly propertyIgnoredDueToDisplay?: 'ignore' | 'warning' | 'error';\n                readonly important?: 'ignore' | 'warning' | 'error';\n                readonly float?: 'ignore' | 'warning' | 'error';\n                readonly idSelector?: 'ignore' | 'warning' | 'error';\n            };\n            readonly data?: CSSDataConfiguration;\n        }\n        interface ModeConfiguration {\n            readonly completionItems?: boolean;\n            readonly hovers?: boolean;\n            readonly documentSymbols?: boolean;\n            readonly definitions?: boolean;\n            readonly references?: boolean;\n            readonly documentHighlights?: boolean;\n            readonly rename?: boolean;\n            readonly colors?: boolean;\n            readonly foldingRanges?: boolean;\n            readonly diagnostics?: boolean;\n            readonly selectionRanges?: boolean;\n        }\n        interface LanguageServiceDefaults {\n            readonly languageId: string;\n            readonly onDidChange: IEvent<LanguageServiceDefaults>;\n            readonly modeConfiguration: ModeConfiguration;\n            readonly options: Options;\n            setOptions(options: Options): void;\n            setModeConfiguration(modeConfiguration: ModeConfiguration): void;\n            readonly diagnosticsOptions: DiagnosticsOptions;\n            setDiagnosticsOptions(options: DiagnosticsOptions): void;\n        }\n        type DiagnosticsOptions = Options;\n        const cssDefaults: LanguageServiceDefaults;\n        const scssDefaults: LanguageServiceDefaults;\n        const lessDefaults: LanguageServiceDefaults;\n        interface CSSDataConfiguration {\n            useDefaultDataProvider?: boolean;\n            dataProviders?: {\n                [providerId: string]: CSSDataV1;\n            };\n        }\n        interface CSSDataV1 {\n            version: 1 | 1.1;\n            properties?: IPropertyData[];\n            atDirectives?: IAtDirectiveData[];\n            pseudoClasses?: IPseudoClassData[];\n            pseudoElements?: IPseudoElementData[];\n        }\n        type EntryStatus = 'standard' | 'experimental' | 'nonstandard' | 'obsolete';\n        interface IReference {\n            name: string;\n            url: string;\n        }\n        interface IPropertyData {\n            name: string;\n            description?: string | MarkupContent;\n            browsers?: string[];\n            restrictions?: string[];\n            status?: EntryStatus;\n            syntax?: string;\n            values?: IValueData[];\n            references?: IReference[];\n            relevance?: number;\n        }\n        interface IAtDirectiveData {\n            name: string;\n            description?: string | MarkupContent;\n            browsers?: string[];\n            status?: EntryStatus;\n            references?: IReference[];\n        }\n        interface IPseudoClassData {\n            name: string;\n            description?: string | MarkupContent;\n            browsers?: string[];\n            status?: EntryStatus;\n            references?: IReference[];\n        }\n        interface IPseudoElementData {\n            name: string;\n            description?: string | MarkupContent;\n            browsers?: string[];\n            status?: EntryStatus;\n            references?: IReference[];\n        }\n        interface IValueData {\n            name: string;\n            description?: string | MarkupContent;\n            browsers?: string[];\n            status?: EntryStatus;\n            references?: IReference[];\n        }\n        interface MarkupContent {\n            kind: MarkupKind;\n            value: string;\n        }\n        type MarkupKind = 'plaintext' | 'markdown';\n    }\n    export namespace languages.json {\n        interface DiagnosticsOptions {\n            readonly validate?: boolean;\n            readonly allowComments?: boolean;\n            readonly schemas?: {\n                readonly uri: string;\n                readonly fileMatch?: string[];\n                readonly schema?: any;\n            }[];\n            readonly enableSchemaRequest?: boolean;\n            readonly schemaValidation?: SeverityLevel;\n            readonly schemaRequest?: SeverityLevel;\n            readonly trailingCommas?: SeverityLevel;\n            readonly comments?: SeverityLevel;\n        }\n        type SeverityLevel = 'error' | 'warning' | 'ignore';\n        interface ModeConfiguration {\n            readonly documentFormattingEdits?: boolean;\n            readonly documentRangeFormattingEdits?: boolean;\n            readonly completionItems?: boolean;\n            readonly hovers?: boolean;\n            readonly documentSymbols?: boolean;\n            readonly tokens?: boolean;\n            readonly colors?: boolean;\n            readonly foldingRanges?: boolean;\n            readonly diagnostics?: boolean;\n            readonly selectionRanges?: boolean;\n        }\n        interface LanguageServiceDefaults {\n            readonly languageId: string;\n            readonly onDidChange: IEvent<LanguageServiceDefaults>;\n            readonly diagnosticsOptions: DiagnosticsOptions;\n            readonly modeConfiguration: ModeConfiguration;\n            setDiagnosticsOptions(options: DiagnosticsOptions): void;\n            setModeConfiguration(modeConfiguration: ModeConfiguration): void;\n        }\n        const jsonDefaults: LanguageServiceDefaults;\n    }\n    export namespace languages.html {\n        interface HTMLFormatConfiguration {\n            readonly tabSize: number;\n            readonly insertSpaces: boolean;\n            readonly wrapLineLength: number;\n            readonly unformatted: string;\n            readonly contentUnformatted: string;\n            readonly indentInnerHtml: boolean;\n            readonly preserveNewLines: boolean;\n            readonly maxPreserveNewLines: number | undefined;\n            readonly indentHandlebars: boolean;\n            readonly endWithNewline: boolean;\n            readonly extraLiners: string;\n            readonly wrapAttributes: 'auto' | 'force' | 'force-aligned' | 'force-expand-multiline';\n        }\n        interface CompletionConfiguration {\n            readonly [providerId: string]: boolean;\n        }\n        interface Options {\n            readonly format?: HTMLFormatConfiguration;\n            readonly suggest?: CompletionConfiguration;\n            readonly data?: HTMLDataConfiguration;\n        }\n        interface ModeConfiguration {\n            readonly completionItems?: boolean;\n            readonly hovers?: boolean;\n            readonly documentSymbols?: boolean;\n            readonly links?: boolean;\n            readonly documentHighlights?: boolean;\n            readonly rename?: boolean;\n            readonly colors?: boolean;\n            readonly foldingRanges?: boolean;\n            readonly diagnostics?: boolean;\n            readonly selectionRanges?: boolean;\n            readonly documentFormattingEdits?: boolean;\n            readonly documentRangeFormattingEdits?: boolean;\n        }\n        interface LanguageServiceDefaults {\n            readonly languageId: string;\n            readonly modeConfiguration: ModeConfiguration;\n            readonly onDidChange: IEvent<LanguageServiceDefaults>;\n            readonly options: Options;\n            setOptions(options: Options): void;\n            setModeConfiguration(modeConfiguration: ModeConfiguration): void;\n        }\n        const htmlLanguageService: LanguageServiceRegistration;\n        const htmlDefaults: LanguageServiceDefaults;\n        const handlebarLanguageService: LanguageServiceRegistration;\n        const handlebarDefaults: LanguageServiceDefaults;\n        const razorLanguageService: LanguageServiceRegistration;\n        const razorDefaults: LanguageServiceDefaults;\n        interface LanguageServiceRegistration extends IDisposable {\n            readonly defaults: LanguageServiceDefaults;\n        }\n        function registerHTMLLanguageService(languageId: string, options?: Options, modeConfiguration?: ModeConfiguration): LanguageServiceRegistration;\n        interface HTMLDataConfiguration {\n            readonly useDefaultDataProvider?: boolean;\n            readonly dataProviders?: {\n                [providerId: string]: HTMLDataV1;\n            };\n        }\n        interface HTMLDataV1 {\n            readonly version: 1 | 1.1;\n            readonly tags?: ITagData[];\n            readonly globalAttributes?: IAttributeData[];\n            readonly valueSets?: IValueSet[];\n        }\n        interface IReference {\n            readonly name: string;\n            readonly url: string;\n        }\n        interface ITagData {\n            readonly name: string;\n            readonly description?: string | MarkupContent;\n            readonly attributes: IAttributeData[];\n            readonly references?: IReference[];\n        }\n        interface IAttributeData {\n            readonly name: string;\n            readonly description?: string | MarkupContent;\n            readonly valueSet?: string;\n            readonly values?: IValueData[];\n            readonly references?: IReference[];\n        }\n        interface IValueData {\n            readonly name: string;\n            readonly description?: string | MarkupContent;\n            readonly references?: IReference[];\n        }\n        interface IValueSet {\n            readonly name: string;\n            readonly values: IValueData[];\n        }\n        interface MarkupContent {\n            readonly kind: MarkupKind;\n            readonly value: string;\n        }\n        type MarkupKind = 'plaintext' | 'markdown';\n    }\n}\ndeclare module \"packages/code-editor/src/monaco\" {\n    import * as IMonaco from \"packages/code-editor/src/editor.api\";\n    export type LanguageType = \"txt\" | \"css\" | \"json\" | \"javascript\" | \"typescript\" | \"solidity\" | \"markdown\" | \"html\" | \"xml\" | \"shell\";\n    export function getLanguageType(fileName: string): LanguageType | undefined;\n    export interface Monaco {\n        editor: typeof IMonaco.editor;\n        Uri: typeof IMonaco.Uri;\n        languages: typeof IMonaco.languages;\n        $loaded: boolean;\n    }\n    export function addFile(fileName: string, content: string): Promise<IMonaco.editor.ITextModel | null>;\n    export function updateFile(fileName: string, content: string): Promise<IMonaco.editor.ITextModel | null>;\n    export function getFileModel(fileName: string): Promise<IMonaco.editor.ITextModel | null>;\n    export function addLib(lib: string, dts: string): Promise<void>;\n    export function initMonaco(): Promise<Monaco>;\n}\ndeclare module \"packages/code-editor/src/style/code-editor.css\" { }\ndeclare module \"packages/code-editor/src/code-editor\" {\n    import { Control, ControlElement, notifyEventCallback } from \"@ijstech/components/base\";\n    import { addLib, addFile, getFileModel, updateFile, LanguageType, Monaco } from \"packages/code-editor/src/monaco\";\n    import * as IMonaco from \"packages/code-editor/src/editor.api\";\n    import \"packages/code-editor/src/style/code-editor.css\";\n    export interface CodeEditorElement extends ControlElement {\n        language?: LanguageType;\n        onChange?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-code-editor\"]: CodeEditorElement;\n            }\n        }\n    }\n    export class CodeEditor extends Control {\n        private _editor;\n        private _language;\n        private _fileName;\n        private _value;\n        private _options;\n        onChange: notifyEventCallback;\n        static addLib: typeof addLib;\n        static addFile: typeof addFile;\n        static getFileModel: typeof getFileModel;\n        static updateFile: typeof updateFile;\n        get monaco(): Monaco;\n        protected init(): void;\n        get editor(): IMonaco.editor.IStandaloneCodeEditor;\n        focus(): void;\n        setCursor(line: number, column: number): void;\n        get language(): LanguageType;\n        set language(value: LanguageType);\n        loadContent(content?: string, language?: LanguageType, fileName?: string): Promise<void>;\n        loadFile(fileName: string): Promise<void>;\n        updateOptions(options: IMonaco.editor.IEditorOptions): void;\n        get value(): string;\n        set value(value: string);\n    }\n}\ndeclare module \"packages/code-editor/src/diff-editor\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { addLib, addFile, getFileModel, updateFile, LanguageType } from \"packages/code-editor/src/monaco\";\n    import { CodeEditorElement } from \"packages/code-editor/src/code-editor\";\n    import * as IMonaco from \"packages/code-editor/src/editor.api\";\n    import \"packages/code-editor/src/style/code-editor.css\";\n    enum EditorType {\n        'modified' = 0,\n        'original' = 1\n    }\n    export interface CodeDiffEditorElement extends CodeEditorElement {\n        onChange?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-code-diff-editor\"]: CodeDiffEditorElement;\n            }\n        }\n    }\n    export class CodeDiffEditor extends Control {\n        private _editor;\n        private _originalModel;\n        private _modifiedModel;\n        private _language;\n        private _fileName;\n        private _originalValue;\n        private _modifiedValue;\n        onChange: any;\n        static addLib: typeof addLib;\n        static addFile: typeof addFile;\n        static getFileModel: typeof getFileModel;\n        static updateFile: typeof updateFile;\n        protected init(): void;\n        get editor(): IMonaco.editor.IDiffEditor;\n        get language(): LanguageType;\n        set language(value: LanguageType);\n        setModelLanguage(value: LanguageType, functionName: 'getModifiedEditor' | 'getOriginalEditor'): void;\n        getEditor(type: EditorType): IMonaco.editor.ICodeEditor;\n        getModel(type: EditorType): IMonaco.editor.ITextModel | null;\n        loadContent(type: EditorType, content?: string, language?: LanguageType, fileName?: string): Promise<void>;\n        updateOptions(options: IMonaco.editor.IEditorOptions): void;\n        get originalValue(): string;\n        set originalValue(value: string);\n        get modifiedValue(): string;\n        set modifiedValue(value: string);\n    }\n}\ndeclare module \"packages/code-editor/src/index\" {\n    export { CodeEditor, CodeEditorElement } from \"packages/code-editor/src/code-editor\";\n    export { CodeDiffEditor, CodeDiffEditorElement } from \"packages/code-editor/src/diff-editor\";\n    export { LanguageType } from \"packages/code-editor/src/monaco\";\n}\ndeclare module \"packages/data-grid/src/style/dataGrid.css\" { }\ndeclare module \"packages/data-grid/src/dataGrid\" {\n    import { Control, Container, ControlElement } from \"@ijstech/components/base\";\n    import { IComboItem } from \"packages/combo-box/src/index\";\n    import \"packages/data-grid/src/style/dataGrid.css\";\n    export type ColRowType = \"datePicker\" | \"dateTimePicker\" | \"timePicker\" | \"checkBox\" | \"comboBox\" | \"number\" | \"integer\" | \"string\";\n    type DataType = \"date\" | \"dateTime\" | \"time\" | \"boolean\" | \"number\" | \"integer\" | \"string\";\n    export type cellValueChangedCallback = (source: DataGrid, cell: DataGridCell, oldValue: any, newValue: any) => void;\n    export interface IDataGridElement extends ControlElement {\n        caption?: string;\n        mode?: GridMode;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-data-grid']: IDataGridElement;\n            }\n        }\n    }\n    interface IDataGrid {\n        colCount: number;\n        columns: {\n            [colIdx: number]: any;\n        };\n        rowHeights: any[];\n        getColWidth(col: number): number;\n        setColWidth(col: number, value: number): void;\n        enableUpdateTimer(): void;\n    }\n    export class DataGridCell {\n        private grid;\n        private _col;\n        private _row;\n        private _visible;\n        private _button;\n        private _checkBox;\n        private _color;\n        private _formula;\n        private _hint;\n        private _horizontalAlign;\n        private _html;\n        private _image;\n        private _object;\n        private _readOnly;\n        private _text;\n        private _value;\n        mergeRect: any;\n        constructor(grid: DataGrid, col: number, row: number);\n        get button(): boolean;\n        set button(value: boolean);\n        get checkBox(): boolean;\n        set checkBox(value: boolean);\n        get col(): number;\n        set col(value: number);\n        get color(): string;\n        set color(value: string);\n        get displayValue(): any;\n        get formula(): any;\n        set formula(value: any);\n        get hint(): string;\n        set hint(value: string);\n        get horizontalAlign(): boolean;\n        set horizontalAlign(value: boolean);\n        get html(): string;\n        set html(value: string);\n        get image(): string;\n        set image(value: string);\n        get object(): any;\n        set object(value: any);\n        get readOnly(): boolean;\n        set readOnly(value: boolean);\n        get row(): number;\n        set row(value: number);\n        get text(): string;\n        set text(value: string);\n        get value(): any;\n        set value(value: any);\n        get visible(): boolean;\n        set visible(value: boolean);\n    }\n    class TGridColumn {\n        private grid;\n        private _colIdx;\n        private _dataType;\n        private _visible;\n        private _resizable;\n        private _sortable;\n        private _color;\n        private _horizontalAlign;\n        private _type;\n        private _readOnly;\n        private _lookupContext;\n        private _lookupTable;\n        private _suggestTable;\n        private _lookupField;\n        private _lookupDetailField;\n        private _lookupDetailValue;\n        private _lookupDetailType;\n        private _listOfValue;\n        private _format;\n        private _formula;\n        private _displayUserName;\n        private _binding;\n        private _comboItems;\n        private _rows;\n        constructor(grid: IDataGrid, colIdx: number);\n        get asJSON(): any;\n        set asJSON(value: any);\n        get binding(): any;\n        set binding(value: any);\n        get colIdx(): number;\n        set colIdx(value: number);\n        get color(): string;\n        set color(value: string);\n        get comboItems(): IComboItem[];\n        set comboItems(value: IComboItem[]);\n        get default(): boolean;\n        get format(): string;\n        set format(value: string);\n        get formula(): string;\n        set formula(value: string);\n        get horizontalAlign(): number;\n        set horizontalAlign(value: number);\n        get readOnly(): boolean;\n        set readOnly(value: boolean);\n        get resizable(): boolean;\n        set resizable(value: boolean);\n        get sortable(): boolean;\n        set sortable(value: boolean);\n        get type(): ColRowType;\n        set type(value: ColRowType);\n        get dataType(): DataType;\n        get visible(): boolean;\n        set visible(value: boolean);\n        get width(): number;\n        set width(value: number);\n    }\n    class TGridColumns {\n        private grid;\n        private columns;\n        private count;\n        constructor(grid: DataGrid);\n        clear(): void;\n        deleteCol(aCol: number): void;\n        getColumn(index: number): TGridColumn;\n        insertCol(colIdx: number): void;\n        loadFromJSON(value: any): void;\n        _loadFromJSON(value: any): void;\n        saveToJSON(): any[] | undefined;\n        setColCount(value: number): void;\n        updateColIndex(): void;\n    }\n    class TGridRow {\n        private grid;\n        private _comboItems;\n        private _visible;\n        private _color;\n        private _height;\n        private _readOnly;\n        private _resizable;\n        private _type;\n        private _dataType;\n        constructor(grid: DataGrid);\n        get color(): string;\n        set color(value: string);\n        get comboItems(): IComboItem[];\n        set comboItems(value: IComboItem[]);\n        get height(): number;\n        set height(value: number);\n        get readOnly(): boolean;\n        set readOnly(value: boolean);\n        get resizable(): boolean;\n        set resizable(value: boolean);\n        get type(): ColRowType;\n        set type(value: ColRowType);\n        get dataType(): DataType;\n        get visible(): boolean;\n        set visible(value: boolean);\n    }\n    class TGridRows {\n        private grid;\n        rows: any[];\n        private defaultHeight;\n        constructor(grid: DataGrid, defaultHeight: number);\n        clear(): void;\n        getHeight(index: number): any;\n        getRow(index: number): TGridRow;\n    }\n    export type TGridLayout = 'grid' | 'card';\n    export type GridMode = 'vertical' | 'horizontal';\n    export class DataGrid extends Control {\n        private _colResizing;\n        private _listOfValue;\n        private _defaultRowHeight;\n        private _defaultColWidth;\n        private _layout;\n        private mergeRect;\n        private tableCells;\n        private tableSplitters;\n        private selectedCells;\n        private selectedCellsHighlight;\n        private placeHolder;\n        private _table;\n        private edit;\n        private cellHighlight;\n        private selectedRangeHighlight;\n        private _scrollBox;\n        private tableContainer;\n        private data;\n        columns: TGridColumns;\n        gridRows: TGridRows;\n        private _mode;\n        private _colCount;\n        private _rowCount;\n        private editor;\n        private editorMode;\n        private _cardPanel;\n        private colWidths;\n        private _rowHeights;\n        private mouseDownPosX;\n        private resizeCol;\n        private origColWidth;\n        private _fixedCol;\n        private _fixedRow;\n        private _leftCol;\n        private _topRow;\n        private _row;\n        private _col;\n        private _readOnly;\n        private _scrollLeft;\n        private _scrollTop;\n        private _dataBindingContext;\n        private dataBinding;\n        private _skipRefreshData;\n        private _bindingRecordSet;\n        private showDataInternalFlag;\n        private _updateTableTimer;\n        private _sorting;\n        private _setScrollLeftInterval;\n        private _setScrollTopInterval;\n        private _restScrollboxHandler;\n        private scrollHorizontalTimer;\n        private scrollVerticalTimer;\n        private _updateTableInternalFlag;\n        private _totalColWidth;\n        private _totalRowHeight;\n        private visibleRowCount;\n        private visibleColCount;\n        private _needUpdate;\n        private showDataFlag;\n        private _showDataTimeout;\n        private _refreshDataTimeout;\n        private _destroyed;\n        private sortingCol;\n        private sortingDescending;\n        private _currCell;\n        private resizeTimer;\n        private lastClickCell;\n        private formula;\n        private formulaCell;\n        private origValue;\n        onSort: any;\n        onRowChange: any;\n        onCellSelect: any;\n        onColResize: any;\n        onButtonClick: any;\n        onCellClick: any;\n        onCellChange: cellValueChangedCallback;\n        onDisplayCell: any;\n        onEditModeChanged: any;\n        onGetEditControl: any;\n        onKeyDown: any;\n        static create(options?: IDataGridElement, parent?: Container): Promise<DataGrid>;\n        constructor(parent?: Control, options?: IDataGridElement);\n        get fixedCol(): number;\n        set fixedCol(value: number);\n        get fixedRow(): number;\n        set fixedRow(value: number);\n        get layout(): TGridLayout;\n        set layout(value: TGridLayout);\n        init(): Promise<void>;\n        private _init;\n        calcTopRow(rowIdx: number): number;\n        cells(aCol: number, aRow: number, refresh?: boolean): DataGridCell;\n        get col(): number;\n        set col(value: number);\n        get row(): number;\n        set row(value: number);\n        get colCount(): number;\n        set colCount(value: number);\n        get mode(): GridMode;\n        get readOnly(): boolean;\n        set readOnly(value: boolean);\n        get rowCount(): number;\n        set rowCount(value: number);\n        get topRow(): number;\n        set topRow(value: number);\n        private _updateRowHeights;\n        setObject(aCol: number, aRow: number, aObject: any): void;\n        private setJSONValue;\n        private updateBindingData;\n        private _updateCurrCellValue;\n        private hideEditor;\n        checkEmptyRow(row: number): boolean;\n        setRowCount(aRowCount: number): void;\n        refresh(): void;\n        deleteRow(row: number): void;\n        getObject(aCol: number, aRow: number): any;\n        getValue(col: number, row: number): any;\n        setScrollLeft(): void;\n        setScrollLeftInternal(): void;\n        setScrollTop(): void;\n        setScrollTopInternal(): void;\n        setLeftCol(aLeftCol: number, skipSetScroll?: boolean): void;\n        private setTopRow;\n        showData(interval: number): void;\n        getTableCellByActualIndex(aColIdx: number, aRowIdx: number): HTMLTableCellElement | undefined;\n        getTableCell(aColIdx: number, aRowIdx: number): any;\n        highlightCurrCell(): void;\n        setCurrCell(aCol: number, aRow: number, triggerEvent?: boolean): void;\n        private highlightSelectedCell;\n        private _updateLanguage;\n        private _updateListOfValues;\n        private _handleScrollHorizontal;\n        _handleScrollVertical(sender: HTMLElement): void;\n        private _handleScroll;\n        private _handleFileDrop;\n        private _handleDragOver;\n        private _handleInput;\n        protected _handleMouseWheel(event: WheelEvent, delta: number): void;\n        private getColLeft;\n        private getColRight;\n        getColWidth(col: number): number;\n        private getRowHeight;\n        private _updateTotalRowHeight;\n        private _updateTotalColWidth;\n        private _updateTableRows;\n        private getActualColIdx;\n        private getActualRowIdx;\n        cols(colIdx: number): TGridColumn;\n        rows(rowIdx: number): TGridRow;\n        private _updateTableCellDiv;\n        private _updateTableCols;\n        setColWidth(aColIndex: number, width: number, trigerEvent?: boolean): void;\n        private _updateTableMergedCells;\n        sort(col: number, descending?: boolean): void;\n        private getEditor;\n        private handleEditControlChange;\n        protected _handleEditDblClick(event: Event, stopPropagation?: boolean): boolean;\n        protected colLeft(): void;\n        protected colRight(): void;\n        protected autoAddRow(): void;\n        protected rowDown(disableAutoAddRow?: boolean): void;\n        protected calcBottomRow(topRowIdx: number): number;\n        protected calcLeftCol(colIdx: number): number;\n        protected rowUp(): void;\n        protected restoreOrigCellValue(): void;\n        protected _handleKeyDown(event: KeyboardEvent, stopPropagation?: boolean): boolean | undefined;\n        protected _handleBlur(event: Event, stopPropagation?: boolean): boolean;\n        private showEditor;\n        protected _handleMouseDown(event: MouseEvent): boolean;\n        private _updateCell;\n        private checkCellReadOnly;\n        private toggleCellValue;\n        protected _handleMouseMove(event: MouseEvent): boolean;\n        protected _handleMouseUp(event: Event): boolean;\n        private _handleColumnResizeStart;\n        private _updateTableSplitter;\n        private _showDataInternalGrid;\n        private showDataInternal;\n        private _updateTableInternal;\n        enableUpdateTimer(updateRowHeightFlag?: boolean, updateColWidthFlag?: boolean): void;\n    }\n}\n/// <amd-module name=\"@ijstech/components/dataGrid\" />\ndeclare module \"@ijstech/components/dataGrid\" {\n    export { DataGrid, DataGridCell } from \"packages/data-grid/src/dataGrid\";\n}\ndeclare module \"packages/markdown/src/styles/index.css\" { }\ndeclare module \"packages/markdown/src/markdown\" {\n    import { Control, ControlElement, ISpace } from \"@ijstech/components/base\";\n    import \"packages/markdown/src/styles/index.css\";\n    export interface MarkdownElement extends ControlElement {\n        caption?: string;\n        src?: string;\n        assetPath?: string;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-markdown\"]: MarkdownElement;\n            }\n        }\n    }\n    export class Markdown extends Control {\n        private elm;\n        private marked;\n        gitbookProcess: boolean;\n        fileRoot: string;\n        private _theme;\n        private _space;\n        constructor(parent?: Control, options?: MarkdownElement);\n        get theme(): 'light' | 'dark';\n        set theme(value: 'light' | 'dark');\n        get padding(): ISpace;\n        set padding(value: ISpace);\n        private getRenderer;\n        load(text: string): Promise<any>;\n        private preParse;\n        beforeRender(text: string): Promise<void>;\n        processText(text: string): Promise<string>;\n        loadLib(): Promise<unknown>;\n        protected init(): void;\n    }\n}\ndeclare module \"packages/markdown/src/index\" {\n    export { Markdown, MarkdownElement } from \"packages/markdown/src/markdown\";\n}\ndeclare module \"packages/markdown-editor/src/styles/index.css\" { }\ndeclare module \"packages/markdown-editor/src/markdown-editor\" {\n    import { Border, Container, Control, IBorder, ISpace, notifyEventCallback } from \"@ijstech/components/base\";\n    import { Markdown } from \"packages/markdown/src/index\";\n    import { Text, TextElement } from \"packages/text/src/index\";\n    import \"packages/markdown-editor/src/styles/index.css\";\n    export interface MarkdownEditorElement extends TextElement {\n        mode?: 'wysiwyg' | 'markdown';\n        theme?: 'light' | 'dark';\n        previewStyle?: 'tab' | 'vertical';\n        hideModeSwitch?: boolean;\n        value?: string;\n        viewer?: boolean;\n        width?: string;\n        height?: string;\n        toolbarItems?: any[];\n        plugins?: any[];\n        widgetRules?: {\n            rule: string | object;\n            toDOM: (text: string) => any;\n        }[];\n        placeholder?: string;\n        onChanged?: notifyEventCallback;\n        onFocus?: notifyEventCallback;\n        onBlur?: notifyEventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-markdown-editor\"]: MarkdownEditorElement;\n            }\n        }\n    }\n    export class MarkdownEditor extends Text {\n        private editor;\n        private editorPlugins;\n        private editorObj;\n        private mdViewer;\n        private elm;\n        private _theme;\n        private _mode;\n        private _previewStyle;\n        private _value;\n        private _viewer;\n        private _heightValue;\n        private _toolbarItems;\n        private _customPlugins;\n        private _widgetRules;\n        private _hideModeSwitch;\n        private _placeholder;\n        private autoFocus;\n        onChanged: notifyEventCallback;\n        onFocus: notifyEventCallback;\n        onBlur: notifyEventCallback;\n        setFocus(): void;\n        get mode(): 'wysiwyg' | 'markdown';\n        set mode(value: 'wysiwyg' | 'markdown');\n        get theme(): 'light' | 'dark';\n        set theme(value: 'light' | 'dark');\n        get previewStyle(): 'tab' | 'vertical';\n        set previewStyle(value: 'tab' | 'vertical');\n        get viewer(): boolean;\n        set viewer(value: boolean);\n        get value(): string;\n        set value(value: string);\n        setValue(value: string): Promise<void>;\n        get height(): string;\n        set height(value: string);\n        get toolbarItems(): any[];\n        set toolbarItems(items: any[]);\n        get plugins(): any[];\n        set plugins(plugins: any[]);\n        get widgetRules(): {\n            rule: string | object;\n            toDOM: (text: string) => any;\n        }[];\n        set widgetRules(rules: {\n            rule: string | object;\n            toDOM: (text: string) => any;\n        }[]);\n        get hideModeSwitch(): boolean;\n        set hideModeSwitch(value: boolean);\n        get placeholder(): string;\n        set placeholder(value: string);\n        get padding(): ISpace;\n        set padding(value: ISpace);\n        get border(): Border;\n        set border(value: IBorder);\n        static create(options?: MarkdownEditorElement, parent?: Container): Promise<MarkdownEditor>;\n        constructor(parent?: Control, options?: MarkdownEditorElement);\n        private loadPlugin;\n        private loadSyntaxHighlightPlugin;\n        private loadPlugins;\n        private addCSS;\n        private initEditor;\n        private renderEditor;\n        getMarkdownValue(): any;\n        getEditorElm(): any;\n        getViewerElm(): Markdown | null;\n        protected init(): Promise<void>;\n    }\n}\ndeclare module \"packages/markdown-editor/src/index\" {\n    export { MarkdownEditor, MarkdownEditorElement } from \"packages/markdown-editor/src/markdown-editor\";\n}\ndeclare module \"packages/menu/src/style/menu.css\" {\n    export const menuStyle: string;\n    export const meunItemStyle: string;\n    export const modalStyle: string;\n}\ndeclare module \"packages/menu/src/menu\" {\n    import { Control, ControlElement, IContextMenu, IFont, ISpace } from \"@ijstech/components/base\";\n    import { Link, LinkElement } from \"packages/link/src/index\";\n    import { Icon, IconElement } from \"packages/icon/src/index\";\n    export type MenuMode = \"horizontal\" | \"vertical\" | \"inline\";\n    type AlignType = 'left' | 'right' | 'center';\n    interface MenuItemElement extends IMenuItem {\n        level?: number;\n    }\n    export interface IMenuItem extends ControlElement {\n        title?: string;\n        link?: LinkElement;\n        icon?: IconElement;\n        items?: IMenuItem[];\n        textAlign?: AlignType;\n    }\n    export interface MenuElement extends ControlElement {\n        mode?: MenuMode;\n        data?: IMenuItem[];\n        items?: MenuItem[];\n        onItemClick?: (target: Menu, item: MenuItem) => void;\n    }\n    export interface ContextMenuElement extends ControlElement {\n        data?: IMenuItem[];\n        items?: MenuItem[];\n        onItemClick?: (target: Menu, item: MenuItem) => void;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-menu\"]: MenuElement;\n                [\"i-context-menu\"]: ContextMenuElement;\n            }\n        }\n    }\n    export class Menu extends Control {\n        private menuElm;\n        private _mode;\n        private _data;\n        private _items;\n        private moreItem;\n        onItemClick: (target: Menu, item: MenuItem) => void;\n        private _oldWidth;\n        private itemsWidth;\n        private resizeTimeout;\n        add(options?: IMenuItem): MenuItem;\n        delete(item: MenuItem): void;\n        get mode(): MenuMode;\n        set mode(value: MenuMode);\n        get data(): IMenuItem[];\n        set data(value: IMenuItem[]);\n        get items(): MenuItem[];\n        set items(items: MenuItem[]);\n        get menuItems(): MenuItem[];\n        private clear;\n        private renderItem;\n        private handleUpdateMode;\n        private onResize;\n        private handleResize;\n        protected init(): void;\n        disconnectedCallback(): void;\n        static create(options?: MenuElement, parent?: Control): Promise<Menu>;\n    }\n    export class ContextMenu extends Menu implements IContextMenu {\n        private modal;\n        private openTimeout;\n        private itemPanel;\n        show(pos: {\n            x: number;\n            y: number;\n        }): void;\n        private renderItemModal;\n        private getModalContainer;\n        private handleModalOpen;\n    }\n    export class MenuItem extends Control {\n        private itemElm;\n        private itemWrapperElm;\n        private captionElm;\n        private subMenu;\n        private arrowIcon;\n        private modal;\n        private itemPanel;\n        protected _linkTo: Menu;\n        private _link;\n        private _icon;\n        private _items;\n        private openTimeout;\n        private closeTimeout;\n        private _level;\n        private _textAlign;\n        constructor(parent?: Control, options?: MenuItemElement);\n        add(options?: IMenuItem): MenuItem;\n        delete(item: MenuItem): void;\n        get title(): string;\n        set title(value: string);\n        set font(value: IFont);\n        get font(): IFont;\n        get link(): Link;\n        set link(value: Link);\n        get icon(): Icon;\n        set icon(elm: Icon);\n        get items(): MenuItem[];\n        set items(items: MenuItem[]);\n        get textAlign(): AlignType;\n        set textAlign(value: AlignType);\n        set level(value: number);\n        get padding(): ISpace;\n        set padding(value: ISpace);\n        private get selected();\n        private set selected(value);\n        private updateLevel;\n        private menuMode;\n        private renderArrowIcon;\n        private renderSubMenuItem;\n        private renderItemModal;\n        private getModalPlacement;\n        private getModalContainer;\n        private setSelectedItem;\n        private handleSelectItem;\n        _handleClick(event: MouseEvent): boolean;\n        private handleModalOpen;\n        private handleModalClose;\n        protected init(): void;\n        static create(options?: MenuItemElement, parent?: Control): Promise<MenuItem>;\n    }\n}\ndeclare module \"packages/menu/src/index\" {\n    export { Menu, ContextMenu, IMenuItem, MenuElement } from \"packages/menu/src/menu\";\n}\ndeclare module \"packages/tree-view/src/style/treeView.css\" { }\ndeclare module \"packages/tree-view/src/treeView\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    import { Icon, IconElement } from \"packages/icon/src/index\";\n    import { Button, ButtonElement } from \"packages/button/src/index\";\n    import \"packages/tree-view/src/style/treeView.css\";\n    type activedChangeCallback = (target: TreeView, prevNode?: TreeNode, event?: Event) => void;\n    type changeCallback = (target: TreeView, node: TreeNode, oldValue: string, newValue: string) => void;\n    type renderCallback = (target: TreeView, node: TreeNode) => void;\n    type mouseEnterCallback = (target: TreeView, node: TreeNode) => void;\n    type mouseLeaveCallback = (target: TreeView, node: TreeNode) => void;\n    type actionButtonCallback = (target: TreeView, actionButton: Button, event: Event) => void;\n    type lazyLoadCallback = (target: TreeView, node: TreeNode) => void;\n    export interface ITreeNode {\n        caption?: string;\n        icon?: IconElement;\n        rightIcon?: IconElement;\n        collapsible?: boolean;\n        expanded?: boolean;\n        isLazyLoad?: boolean;\n        active?: boolean;\n        children?: ITreeNode[];\n        alwaysExpanded?: boolean;\n    }\n    export interface TreeViewElement extends ControlElement {\n        activeItem?: TreeNode;\n        data?: ITreeNode[];\n        editable?: boolean;\n        actionButtons?: ButtonElement[];\n        alwaysExpanded?: boolean;\n        deleteNodeOnEmptyCaption?: boolean;\n        onActiveChange?: activedChangeCallback;\n        onChange?: changeCallback;\n        onRenderNode?: renderCallback;\n        onMouseEnterNode?: mouseEnterCallback;\n        onMouseLeaveNode?: mouseLeaveCallback;\n        onLazyLoad?: lazyLoadCallback;\n        onActionButtonClick?: actionButtonCallback;\n    }\n    export interface TreeNodeElement extends ControlElement {\n        caption?: string;\n        icon?: IconElement;\n        rightIcon?: IconElement;\n        collapsible?: boolean;\n        expanded?: boolean;\n        isLazyLoad?: boolean;\n        active?: boolean;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-tree-view']: TreeViewElement;\n                ['i-tree-node']: TreeNodeElement;\n            }\n        }\n    }\n    export class TreeView extends Control {\n        private _activeItem;\n        private _data;\n        private _editable;\n        private _items;\n        private _actionButtons;\n        private _alwaysExpanded;\n        _deleteNodeOnEmptyCaption: boolean;\n        onRenderNode: renderCallback;\n        onActiveChange: activedChangeCallback;\n        onChange: changeCallback;\n        onMouseEnterNode: mouseEnterCallback;\n        onMouseLeaveNode: mouseLeaveCallback;\n        onLazyLoad: lazyLoadCallback;\n        onActionButtonClick: actionButtonCallback;\n        constructor(parent?: Control, options?: any);\n        get activeItem(): TreeNode | undefined;\n        set activeItem(value: TreeNode | undefined);\n        get alwaysExpanded(): boolean;\n        set alwaysExpanded(value: boolean);\n        get data(): ITreeNode[];\n        set data(value: ITreeNode[]);\n        get items(): TreeNode[];\n        get editable(): boolean;\n        set editable(value: boolean);\n        get actionButtons(): ButtonElement[];\n        set actionButtons(value: ButtonElement[]);\n        add(parentNode?: TreeNode | null, caption?: string): TreeNode;\n        delete(node: TreeNode): void;\n        clear(): void;\n        _setActiveItem(node: TreeNode, event?: Event): void;\n        private handleMouseEnter;\n        private handleMouseLeave;\n        private handleLazyLoad;\n        private initNode;\n        private registerEvents;\n        private renderTreeNode;\n        private renderTree;\n        private renderActions;\n        protected init(): void;\n        static create(options?: TreeViewElement, parent?: Control): Promise<TreeView>;\n    }\n    export class TreeNode extends Control {\n        private _caption;\n        private _collapsible;\n        private _expanded;\n        private _active;\n        private _isLazyLoad;\n        private _editable;\n        private _data;\n        private _alwaysExpanded;\n        private _wrapperElm;\n        private _expandElm;\n        private _captionElm;\n        private _childNodeElm;\n        private _iconElm;\n        private _iconRightElm;\n        constructor(parent?: Control, options?: any);\n        get data(): ITreeNode;\n        set data(value: ITreeNode);\n        get caption(): string;\n        set caption(value: string);\n        get collapsible(): boolean;\n        set collapsible(value: any);\n        get expanded(): boolean;\n        set expanded(value: any);\n        get alwaysExpanded(): boolean;\n        set alwaysExpanded(value: boolean);\n        get active(): boolean;\n        set active(value: any);\n        get isLazyLoad(): boolean;\n        set isLazyLoad(value: boolean);\n        get editable(): boolean;\n        set editable(value: boolean);\n        get rootParent(): TreeView;\n        get icon(): Icon;\n        get rightIcon(): Icon;\n        get height(): number | string;\n        set height(value: number | string);\n        private handleChange;\n        private renderEditMode;\n        private handleEdit;\n        edit(): void;\n        appendNode(childNode: TreeNode): void;\n        private initChildNodeElm;\n        _handleClick(event: MouseEvent): boolean;\n        _handleDblClick(event: MouseEvent): boolean;\n        _handleContextMenu(event: MouseEvent): boolean;\n        protected init(): void;\n        static create(options?: TreeNodeElement, parent?: Control): Promise<TreeNode>;\n    }\n}\ndeclare module \"packages/tree-view/src/index\" {\n    export { TreeView, TreeViewElement, TreeNode, TreeNodeElement } from \"packages/tree-view/src/treeView\";\n}\ndeclare module \"packages/popover/src/style/popover.css\" {\n    export const getOverlayStyle: () => string;\n    export const getNoBackdropStyle: () => string;\n    export const getAbsoluteWrapperStyle: (left: string, top: string) => string;\n    export const popoverMainContentStyle: string;\n}\ndeclare module \"packages/popover/src/popover\" {\n    import { Control, ControlElement, Container, IBackground, IBorder, Background, Border, ISpace } from \"@ijstech/components/base\";\n    export type popoverPlacementType = 'center' | 'bottom' | 'bottomLeft' | 'bottomRight' | 'top' | 'topLeft' | 'topRight' | 'rightTop' | 'left' | 'right';\n    type eventCallback = (target: Control) => void;\n    type PopoverPositionType = \"fixed\" | \"absolute\";\n    export interface PopoverElement extends ControlElement {\n        placement?: popoverPlacementType;\n        closeOnScrollChildFixed?: boolean;\n        item?: Control;\n        onOpen?: eventCallback;\n        onClose?: eventCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-popover']: PopoverElement;\n            }\n        }\n    }\n    export class Popover extends Container {\n        protected _visible: boolean;\n        private wrapperDiv;\n        private popoverDiv;\n        private bodyDiv;\n        private overlayDiv;\n        private _placement;\n        private _wrapperPositionAt;\n        private insideClick;\n        private boundHandlePopoverMouseDown;\n        private boundHandlePopoverMouseUp;\n        protected _onOpen: eventCallback;\n        onClose: eventCallback;\n        constructor(parent?: Control, options?: any);\n        get visible(): boolean;\n        set visible(value: boolean);\n        get onOpen(): any;\n        set onOpen(callback: any);\n        get placement(): popoverPlacementType;\n        set placement(value: popoverPlacementType);\n        get item(): Control;\n        set item(value: Control);\n        get position(): PopoverPositionType;\n        set position(value: PopoverPositionType);\n        _handleClick(event: MouseEvent): boolean;\n        private positionPopoverRelativeToParent;\n        private calculatePopoverWrapperCoordinates;\n        protected _handleOnShow(event: Event): void;\n        private handlePopoverMouseDown;\n        private handlePopoverMouseUp;\n        private setInsideClick;\n        private setPropertyValue;\n        refresh(): void;\n        get background(): Background;\n        set background(value: IBackground);\n        get width(): number | string;\n        set width(value: number | string);\n        get height(): number | string;\n        set height(value: number | string);\n        get border(): Border;\n        set border(value: IBorder);\n        get padding(): ISpace;\n        set padding(value: ISpace);\n        protected removeTargetStyle(target: HTMLElement, propertyName: string): void;\n        protected setTargetStyle(target: HTMLElement, propertyName: string, value: string): void;\n        protected init(): void;\n        static create(options?: PopoverElement, parent?: Container): Promise<Popover>;\n    }\n}\ndeclare module \"packages/popover/src/index\" {\n    export { Popover, PopoverElement, popoverPlacementType } from \"packages/popover/src/popover\";\n}\ndeclare module \"packages/chart/src/chart\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    export interface EchartElement extends ControlElement {\n        theme?: 'light' | 'dark';\n    }\n    export class Chart<T> extends Control {\n        private _data;\n        private _theme;\n        private _echart;\n        private _chartDom;\n        private _chartIns;\n        constructor(parent?: Control, options?: any);\n        get data(): T;\n        set data(value: T);\n        get theme(): 'light' | 'dark';\n        set theme(value: 'light' | 'dark');\n        private get dataObj();\n        showLoading(): void;\n        drawChart(): void;\n        private _drawChart;\n        updateChartOptions(): void;\n        resize(): void;\n        private initChartDom;\n        protected init(): void;\n    }\n}\ndeclare module \"packages/chart/src/lineChart\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { Chart, EchartElement } from \"packages/chart/src/chart\";\n    export interface LineEchartElement extends EchartElement {\n        data?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-line-chart']: LineEchartElement;\n            }\n        }\n    }\n    export class LineChart extends Chart<any> {\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n    }\n}\ndeclare module \"packages/chart/src/barChart\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { Chart, EchartElement } from \"packages/chart/src/chart\";\n    export interface IBarChartAxisTick {\n        show?: boolean;\n    }\n    export interface IBarChartAxisLineStyle {\n        type?: string;\n    }\n    export interface IBarChartAxisLine {\n        show?: boolean;\n        lineStyle?: IBarChartAxisLineStyle;\n    }\n    export interface IBarChartAxisSplitLine {\n        show?: boolean;\n        lineStyle?: IBarChartAxisLineStyle;\n    }\n    export interface IBarChartAxisLabel {\n        color?: string;\n        fontSize?: number;\n        fontFamily?: string;\n    }\n    export interface IBarChartAxisNameTextStyle {\n        fontSize?: number;\n        color?: string;\n    }\n    export interface IBarChartAxis {\n        type?: string;\n        name?: string;\n        nameGap?: number;\n        nameTextStyle?: IBarChartAxisNameTextStyle;\n        boundaryGap?: boolean;\n        data?: string[];\n        min?: number;\n        max?: number;\n        axisTick?: IBarChartAxisTick;\n        axisLabel?: IBarChartAxisLabel;\n        axisLine?: IBarChartAxisLine;\n        splitLine?: IBarChartAxisSplitLine;\n    }\n    export interface IBarChartSeriesLabel {\n        show: boolean;\n        position: string;\n    }\n    export interface IBarChartSeries {\n        type?: string;\n        name?: string;\n        data?: any[];\n        label?: IBarChartSeriesLabel;\n    }\n    export interface IBarChartData {\n        xAxis?: IBarChartAxis;\n        yAxis?: IBarChartAxis;\n        color?: string[];\n        series?: IBarChartSeries[];\n    }\n    export interface BarEchartElement extends EchartElement {\n        data?: IBarChartData;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-bar-chart']: BarEchartElement;\n            }\n        }\n    }\n    export class BarChart extends Chart<IBarChartData> {\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n    }\n}\ndeclare module \"packages/chart/src/barStackChart\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { Chart, EchartElement } from \"packages/chart/src/chart\";\n    export interface BarEchartElement extends EchartElement {\n        data?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-bar-stack-chart']: BarEchartElement;\n            }\n        }\n    }\n    export class BarStackChart extends Chart<any> {\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n    }\n}\ndeclare module \"packages/chart/src/pieChart\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { Chart, EchartElement } from \"packages/chart/src/chart\";\n    export interface IPieChartTooltip {\n        trigger?: string;\n        formatter?: string;\n    }\n    export interface IPieChartSeries {\n        type?: string;\n        radius?: string[];\n        avoidLabelOverlap?: boolean;\n        data?: any[];\n    }\n    export interface IPieChartData {\n        tooltip?: IPieChartTooltip;\n        series?: IPieChartSeries[];\n    }\n    export interface PieEchartElement extends EchartElement {\n        data?: IPieChartData;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-pie-chart']: PieEchartElement;\n            }\n        }\n    }\n    export class PieChart extends Chart<IPieChartData> {\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n    }\n}\ndeclare module \"packages/chart/src/scatterChart\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { Chart, EchartElement } from \"packages/chart/src/chart\";\n    export interface ScatterChartElement extends EchartElement {\n        data?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-scatter-chart']: ScatterChartElement;\n            }\n        }\n    }\n    export class ScatterChart extends Chart<any> {\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n    }\n}\ndeclare module \"packages/chart/src/scatterLineChart\" {\n    import { Control } from \"@ijstech/components/base\";\n    import { Chart, EchartElement } from \"packages/chart/src/chart\";\n    export interface ScatterLineChartElement extends EchartElement {\n        data?: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-scatter-line-chart']: ScatterLineChartElement;\n            }\n        }\n    }\n    export class ScatterLineChart extends Chart<any> {\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n    }\n}\ndeclare module \"packages/chart/src/index\" {\n    export { Chart } from \"packages/chart/src/chart\";\n    export { LineChart } from \"packages/chart/src/lineChart\";\n    export { BarChart } from \"packages/chart/src/barChart\";\n    export { BarStackChart } from \"packages/chart/src/barStackChart\";\n    export { PieChart } from \"packages/chart/src/pieChart\";\n    export { ScatterChart } from \"packages/chart/src/scatterChart\";\n    export { ScatterLineChart } from \"packages/chart/src/scatterLineChart\";\n}\ndeclare module \"packages/iframe/src/iframe\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    export interface IframeElement extends ControlElement {\n        url?: string;\n        allowFullscreen?: boolean;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-iframe']: IframeElement;\n            }\n        }\n    }\n    export class Iframe extends Control {\n        private _url;\n        private allowFullscreen;\n        private iframeElm;\n        constructor(parent?: Control, options?: any);\n        reload(): Promise<void>;\n        postMessage(msg: string): void;\n        get url(): string;\n        set url(value: string);\n        protected init(): void;\n        static create(options?: IframeElement, parent?: Control): Promise<Iframe>;\n    }\n}\ndeclare module \"packages/iframe/src/index\" {\n    export { Iframe, IframeElement } from \"packages/iframe/src/iframe\";\n}\ndeclare module \"packages/pagination/src/style/pagination.css\" { }\ndeclare module \"packages/pagination/src/pagination\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    import \"packages/pagination/src/style/pagination.css\";\n    type notifyCallback = (target: Pagination, lastActivePage: number) => void;\n    export interface PaginationElement extends ControlElement {\n        totalPages?: number;\n        currentPage?: number;\n        pageSize?: number;\n        onPageChanged?: notifyCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-pagination']: PaginationElement;\n            }\n        }\n    }\n    export class Pagination extends Control {\n        private _totalPages;\n        private _curPage;\n        private _pageSize;\n        private _showPrevMore;\n        private _showNextMore;\n        private pagers;\n        private pageItems;\n        private activeItem;\n        private _paginationDiv;\n        private _prevElm;\n        private _nextElm;\n        private pagerCount;\n        onPageChanged: notifyCallback;\n        constructor(parent?: Control, options?: any);\n        get totalPages(): number;\n        set totalPages(value: number);\n        get currentPage(): number;\n        set currentPage(value: number);\n        get pageSize(): number;\n        set pageSize(value: number);\n        private onActiveItem;\n        private onDisablePrevNext;\n        protected _handleOnClickIndex(value: number, event: Event): void;\n        private _handleOnClickMore;\n        protected _handleOnNext(event: Event): void;\n        protected _handleOnPrev(event: Event): void;\n        private onMouseenter;\n        private renderEllipsis;\n        private renderPage;\n        private updatePagers;\n        private renderPageItem;\n        protected init(): void;\n        static create(options?: PaginationElement, parent?: Control): Promise<Pagination>;\n    }\n}\ndeclare module \"packages/pagination/src/index\" {\n    export { Pagination, PaginationElement } from \"packages/pagination/src/pagination\";\n}\ndeclare module \"packages/table/src/style/table.css\" {\n    import { TableColumnElement } from \"packages/table/src/tableColumn\";\n    import { ITableMediaQuery } from \"packages/table/src/table\";\n    import { ControlElement } from \"@ijstech/components/base\";\n    export const tableStyle: string;\n    export const getCustomStylesClass: (styles: ControlElement) => string;\n    export const getTableMediaQueriesStyleClass: (columns: TableColumnElement[], mediaQueries: ITableMediaQuery[]) => string;\n}\ndeclare module \"packages/table/src/tableCell\" {\n    import \"packages/table/src/style/table.css\";\n    export interface ITableCell {\n        rowSpan: number;\n        columnSpan: number;\n        value: string;\n    }\n    export class TableCell {\n        private _rowSpan;\n        private _columnSpan;\n        private _value;\n        constructor(options: ITableCell);\n        get rowSpan(): number;\n        set rowSpan(value: number);\n        get columnSpan(): number;\n        set columnSpan(value: number);\n        get value(): string;\n        set value(data: string);\n    }\n}\ndeclare module \"packages/table/src/tableColumn\" {\n    import { Control, ControlElement } from \"@ijstech/components/base\";\n    import { TableCell } from \"packages/table/src/tableCell\";\n    import \"packages/table/src/style/table.css\";\n    export type SortDirection = 'asc' | 'desc' | 'none';\n    type renderCallback = (target: TableColumn, columnData: any, rowData: any, rowIndex?: number, cell?: TableCell) => any;\n    type TextAlign = 'left' | 'right' | 'center';\n    export interface TableColumnElement extends ControlElement {\n        title: string;\n        fieldName: string;\n        key?: string | number;\n        sortable?: boolean;\n        sortOrder?: SortDirection;\n        textAlign?: TextAlign;\n        sorter?: (a: any, b: any) => number;\n        onRenderCell?: renderCallback;\n    }\n    export class TableColumn extends Control {\n        caption: string;\n        fieldName: string;\n        key?: string | number;\n        sortable?: boolean;\n        private columnElm;\n        private sortElm;\n        private ascElm;\n        private descElm;\n        private isHeader;\n        private _sortOrder;\n        private _data;\n        private _textAlign;\n        private _rowData;\n        onSortChange: (source: Control, key: string, value: SortDirection) => void;\n        onRenderCell: renderCallback;\n        sorter: (a: any, b: any) => number;\n        constructor(parent?: Control, options?: any);\n        get data(): number | string;\n        set data(value: number | string);\n        get rowData(): number | string;\n        set rowData(value: any);\n        get sortOrder(): SortDirection;\n        set sortOrder(value: SortDirection);\n        get textAlign(): TextAlign;\n        set textAlign(value: TextAlign);\n        renderSort(): void;\n        appendNode(params: any): Promise<void>;\n        init(): void;\n    }\n}\ndeclare module \"packages/table/src/utils\" {\n    import { TableColumnElement } from \"packages/table/src/tableColumn\";\n    export const paginate: <Type>(array: Type[], pageSize: number, pageNumber: number) => Type[];\n    export const getColumnIndex: (columns: TableColumnElement[], key: string) => number;\n    export const getColumnKey: (columns: TableColumnElement[], columnIdx: number) => string;\n    export const getSorter: (columns: TableColumnElement[], key: string) => ((a: any, b: any) => number) | null | undefined;\n    export const getValueByPath: (object: any, prop: string) => any;\n    export const orderBy: (list: any, sortConfig: any, columns: TableColumnElement[]) => any;\n    export const filterBy: (list: any[], value: any, columnKey: string | number) => any[];\n}\ndeclare module \"packages/table/src/tableRow\" {\n    import \"packages/table/src/style/table.css\";\n    import { TableCell } from \"packages/table/src/tableCell\";\n    export class TableRow {\n        private _cells;\n        constructor(cells: TableCell[]);\n        get cells(): TableCell[];\n        set cells(value: TableCell[]);\n    }\n}\ndeclare module \"packages/table/src/table\" {\n    import { Control, ControlElement, IMediaQuery, IControlMediaQueryProps } from \"@ijstech/components/base\";\n    import { TableColumnElement } from \"packages/table/src/tableColumn\";\n    import { Pagination } from \"packages/pagination/src/index\";\n    import { TableRow } from \"packages/table/src/tableRow\";\n    import { Icon } from \"packages/icon/src/index\";\n    type cellClickCallback = (target: Table, rowIndex: number, columnIdx: number, record: any) => void;\n    type emptyCallback = (target: Table) => void;\n    type sortCallback = (target: Table, key: string, value: string) => void;\n    interface ITableExpandable {\n        onRenderExpandedRow: (record: any) => any;\n        rowExpandable: boolean;\n        onRenderExpandIcon?: (target: Table, expand: boolean) => Icon;\n    }\n    export interface ITableMediaQueryProps extends IControlMediaQueryProps {\n        fieldNames?: string[];\n        expandable?: ITableExpandable;\n    }\n    export type ITableMediaQuery = IMediaQuery<ITableMediaQueryProps>;\n    export interface TableElement extends ControlElement {\n        heading?: boolean;\n        data?: any;\n        columns?: TableColumnElement[];\n        rows?: TableRow[];\n        pagination?: string;\n        expandable?: ITableExpandable;\n        mediaQueries?: ITableMediaQuery[];\n        headingStyles?: ControlElement;\n        bodyStyles?: ControlElement;\n        onRenderEmptyTable?: emptyCallback;\n        onCellClick?: cellClickCallback;\n        onColumnSort?: sortCallback;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-table']: TableElement;\n            }\n        }\n    }\n    export class Table extends Control {\n        private wrapperElm;\n        private tableElm;\n        private tHeadElm;\n        private tBodyElm;\n        private pagingElm;\n        onCellClick: cellClickCallback;\n        onRenderEmptyTable: emptyCallback;\n        onColumnSort: sortCallback;\n        private _data;\n        private _filteredData;\n        private _tableID;\n        private _columns;\n        private _rows;\n        private _pagination;\n        private firstLoad;\n        private _mediaQueries;\n        private _expandable;\n        private _sortConfig;\n        private _heading;\n        private _headingStyles;\n        private _bodyStyles;\n        private _bodyStyle;\n        private _headingStyle;\n        constructor(parent?: Control, options?: any);\n        get data(): any;\n        set data(value: any);\n        get filteredData(): any;\n        set filteredData(value: any);\n        private get hasData();\n        private get sortConfig();\n        private sortFn;\n        get columns(): TableColumnElement[];\n        set columns(value: TableColumnElement[]);\n        get rows(): TableRow[];\n        get pagination(): Pagination;\n        set pagination(value: string | Pagination);\n        get expandable(): ITableExpandable;\n        set expandable(value: ITableExpandable);\n        private get hasExpandColumn();\n        private get columnLength();\n        get mediaQueries(): ITableMediaQuery[];\n        set mediaQueries(value: ITableMediaQuery[]);\n        get headingStyles(): ControlElement;\n        set headingStyles(value: ControlElement);\n        get bodyStyles(): ControlElement;\n        set bodyStyles(value: ControlElement);\n        private onPageChanged;\n        private onSortChange;\n        private renderHeader;\n        _handleClick(event: MouseEvent): boolean;\n        private expandRow;\n        private renderRow;\n        private renderBody;\n        private createTable;\n        filter(predicate: (dataItem: any) => boolean): void;\n        protected init(): void;\n        connectedCallback(): void;\n        static create(options?: TableElement, parent?: Control): Promise<Table>;\n    }\n}\ndeclare module \"packages/table/src/index\" {\n    export { Table, TableElement } from \"packages/table/src/table\";\n    export { TableColumn } from \"packages/table/src/tableColumn\";\n    export { TableRow } from \"packages/table/src/tableRow\";\n    export { TableCell } from \"packages/table/src/tableCell\";\n}\ndeclare module \"packages/carousel/src/style/carousel.css\" {\n    import { ICarouselMediaQuery } from \"packages/carousel/src/carousel\";\n    export const sliderStyle: string;\n    export const getCarouselMediaQueriesStyleClass: (mediaQueries: ICarouselMediaQuery[]) => string;\n}\ndeclare module \"packages/carousel/src/carousel\" {\n    import { Control, ControlElement, ContainerElement, IMediaQuery, IControlMediaQueryProps } from \"@ijstech/components/base\";\n    type SwipeStartEventCallback = () => void;\n    type SwipeEndEventCallback = (isSwiping: boolean) => void;\n    export interface ICarouselMediaQueryProps extends IControlMediaQueryProps {\n        indicators?: boolean;\n    }\n    export type ICarouselMediaQuery = IMediaQuery<ICarouselMediaQueryProps>;\n    export interface CarouselItemElement extends ContainerElement {\n        name?: string;\n    }\n    export interface CarouselSliderElement extends ControlElement {\n        slidesToShow?: number;\n        transitionSpeed?: number;\n        autoplay?: boolean;\n        autoplaySpeed?: number;\n        items?: CarouselItemElement[];\n        activeSlide?: number;\n        type?: 'dot' | 'arrow';\n        indicators?: boolean;\n        swipe?: boolean;\n        mediaQueries?: ICarouselMediaQuery[];\n        onSwipeStart?: SwipeStartEventCallback;\n        onSwipeEnd?: SwipeEndEventCallback;\n        onSlideChange?: (index: number) => void;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-carousel-slider']: CarouselSliderElement;\n            }\n        }\n    }\n    export class CarouselSlider extends Control {\n        private _slidesToShow;\n        private _transitionSpeed;\n        private _type;\n        private _autoplay;\n        private _autoplaySpeed;\n        private _activeSlide;\n        private _items;\n        private _slider;\n        private timer;\n        private sliderListElm;\n        private dotPagination;\n        private dotsElm;\n        private wrapperSliderElm;\n        private arrowPrev;\n        private arrowNext;\n        private pos1;\n        private pos2;\n        private threshold;\n        private _swipe;\n        private _indicators;\n        private _mediaQueries;\n        onSwipeStart: SwipeStartEventCallback;\n        onSwipeEnd: SwipeEndEventCallback;\n        onSlideChange: (index: number) => void;\n        private isSwiping;\n        private isHorizontalSwiping;\n        constructor(parent?: Control, options?: any);\n        get slidesToShow(): number;\n        set slidesToShow(value: number);\n        get transitionSpeed(): number;\n        set transitionSpeed(value: number);\n        get autoplay(): boolean;\n        set autoplay(value: boolean);\n        get autoplaySpeed(): number;\n        set autoplaySpeed(value: number);\n        get activeSlide(): number;\n        set activeSlide(value: number);\n        get items(): CarouselItemElement[];\n        set items(nodes: CarouselItemElement[]);\n        get type(): 'dot' | 'arrow';\n        set type(value: 'dot' | 'arrow');\n        get swipe(): boolean;\n        set swipe(value: boolean);\n        get mediaQueries(): ICarouselMediaQuery[];\n        set mediaQueries(value: ICarouselMediaQuery[]);\n        _handleMouseDown(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;\n        _handleMouseMove(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;\n        _handleMouseUp(event: PointerEvent | MouseEvent | TouchEvent, stopPropagation?: boolean): boolean;\n        get indicators(): boolean;\n        set indicators(value: boolean);\n        get isArrow(): boolean;\n        private updateArrows;\n        private updateSliderByArrows;\n        private updateWrapperClass;\n        private renderItems;\n        private renderDotPagination;\n        private renderArrows;\n        private onDotClick;\n        private setAutoplay;\n        prev(): void;\n        next(): void;\n        refresh(): void;\n        dragStartHandler(event: MouseEvent | TouchEvent): void;\n        dragHandler(event: MouseEvent | TouchEvent): void;\n        dragEndHandler(event: MouseEvent | TouchEvent): void;\n        protected init(): void;\n        static create(options?: CarouselSliderElement, parent?: Control): Promise<CarouselSlider>;\n    }\n}\ndeclare module \"packages/carousel/src/index\" {\n    export { CarouselSlider } from \"packages/carousel/src/carousel\";\n}\ndeclare module \"packages/video/src/style/video.css\" { }\ndeclare module \"packages/video/src/video\" {\n    import { Container, ControlElement, Control, Border, IBorder } from \"@ijstech/components/base\";\n    import \"packages/video/src/style/video.css\";\n    export interface VideoElement extends ControlElement {\n        url?: string;\n        isStreaming?: boolean;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-video']: VideoElement;\n            }\n        }\n    }\n    export class Video extends Container {\n        private videoElm;\n        private sourceElm;\n        private overlayElm;\n        private player;\n        private _url;\n        private _isPlayed;\n        get url(): string;\n        set url(value: string);\n        get border(): Border;\n        set border(value: IBorder);\n        getPlayer(): any;\n        private getVideoTypeFromExtension;\n        protected init(): void;\n        static create(options?: VideoElement, parent?: Control): Promise<Video>;\n    }\n}\ndeclare module \"packages/video/src/index\" {\n    export { Video, VideoElement } from \"packages/video/src/video\";\n}\ndeclare module \"packages/schema-designer/src/uiSchema\" {\n    import { Container, ControlElement } from \"@ijstech/components/base\";\n    import { ISchemaDesignerData } from \"packages/schema-designer/src/schemaDesigner\";\n    type IUISchemaOptions = 'DEFAULT' | 'GENERATED' | 'REGISTERED' | 'INLINED';\n    type IUISchemaRuleEffect = 'HIDE' | 'SHOW' | 'ENABLE' | 'DISABLE';\n    type IUISchemaType = 'VerticalLayout' | 'HorizontalLayout' | 'Group' | 'Categorization' | 'Category' | 'Control';\n    export interface ISchemaDesignerUI {\n        type: IUISchemaType;\n        scope?: string;\n        label?: string;\n        elements?: ISchemaDesignerUI[];\n        options?: {\n            format?: string;\n            readonly?: boolean;\n        } | {\n            detail: IUISchemaOptions | {\n                type: IUISchemaType;\n                elements: ISchemaDesignerUI;\n            };\n        };\n        rule?: IUISchemaRule;\n    }\n    interface IRules {\n        not?: IRules;\n        const?: string | number | boolean;\n        minimum?: number;\n        exclusiveMaximum?: number;\n        enum?: string[] | number[];\n    }\n    interface IUISchemaRule {\n        effect: IUISchemaRuleEffect;\n        condition: {\n            scope: string;\n            schema: IRules;\n        };\n    }\n    export class SchemaDesignerUI extends Container {\n        private txtUISchema;\n        private pnlUISchemaBuilder;\n        private uiSchema;\n        schema: ISchemaDesignerData;\n        constructor(parent?: Container, options?: ControlElement);\n        protected init(): void;\n        refresh(): void;\n        getUISchema(): ISchemaDesignerUI;\n        private updateJsonUISchema;\n        private getUISchemaMap;\n        private getScopeByFields;\n        updateActionsItems(): Promise<void>;\n        updateActionsRules(): Promise<void>;\n        updateUISchemaItemsByRename(fields: string[], newFields: string[]): Promise<void>;\n        updateUISchemaByType(fields: string[], isOption?: boolean): Promise<void>;\n        deleteUISchema(fields: string[], onlyChild?: boolean): void;\n        private createUISchema;\n        private initUI;\n    }\n}\ndeclare module \"packages/schema-designer/src/style/schema-designer.css\" { }\ndeclare module \"packages/schema-designer/src/schemaDesigner\" {\n    import { Container, ControlElement } from \"@ijstech/components/base\";\n    import { ISchemaDesignerUI } from \"packages/schema-designer/src/uiSchema\";\n    export { ISchemaDesignerUI };\n    import \"packages/schema-designer/src/style/schema-designer.css\";\n    type IDataType = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array';\n    export interface ISchemaDesignerData {\n        type: IDataType;\n        properties: {\n            [key: string]: {\n                type: IDataType;\n                title?: string;\n                description?: string;\n                pattern?: number | string;\n                format?: string;\n                const?: string | number | boolean;\n                default?: string | number | boolean;\n                multipleOf?: number;\n                minimum?: number;\n                maximum?: number;\n                exclusiveMinimum?: number;\n                exclusiveMaximum?: number;\n                minLength?: number;\n                maxLength?: number;\n                minItems?: number;\n                maxItems?: number;\n                uniqueItems?: boolean;\n                deprecated?: boolean;\n                readOnly?: boolean;\n                writeOnly?: boolean;\n                additionalProperties?: boolean;\n                enum?: string[] | number[];\n                oneOf?: {\n                    title?: string;\n                    const: number | string;\n                }[];\n                items?: ISchemaDesignerData | false;\n                prefixItems?: {\n                    type?: string | number;\n                    enum?: string | number;\n                }[];\n                required?: string[];\n            };\n        };\n        required?: string[];\n    }\n    export interface SchemaDesignerElement extends ControlElement {\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-schema-designer']: SchemaDesignerElement;\n            }\n        }\n    }\n    export class SchemaDesigner extends Container {\n        private txtSchema;\n        private pnlSchemaBuilder;\n        private schema;\n        private pnlUISchema;\n        private uiSchemaPanel;\n        static create(options?: SchemaDesignerElement, parent?: Container): Promise<SchemaDesigner>;\n        constructor(parent?: Container, options?: SchemaDesignerElement);\n        refresh(): void;\n        protected init(): void;\n        getJsonData(): ISchemaDesignerData;\n        getJsonUI(): ISchemaDesignerUI;\n        private getJSON;\n        private updateJsonData;\n        private convertFieldNameToLabel;\n        private generateFieldName;\n        private createDataSchema;\n        private renderEnum;\n        private renderOneOf;\n        private renderPrefixItems;\n        private updateControls;\n        private getControlByPath;\n        private renderSchema;\n        private addSchemaByType;\n        private renderObjectSchema;\n        private renderStringSchema;\n        private renderNumberSchema;\n        private renderBooleanSchema;\n        private renderArraySchema;\n        private initUI;\n    }\n}\ndeclare module \"packages/schema-designer/src/index\" {\n    export { SchemaDesigner, SchemaDesignerElement, ISchemaDesignerData, ISchemaDesignerUI } from \"packages/schema-designer/src/schemaDesigner\";\n}\ndeclare module \"packages/navigator/src/style/navigator.css\" { }\ndeclare module \"packages/navigator/src/navigator\" {\n    import { Container, Control, ControlElement } from \"@ijstech/components/base\";\n    import \"packages/navigator/src/style/navigator.css\";\n    interface INavOption {\n        searchPlaceholder?: string;\n    }\n    interface INavItem {\n        id: number | string;\n        caption: string;\n        navItems: INavItem[];\n        data: any;\n    }\n    export interface NavElement extends ControlElement {\n        navItems?: INavItem[];\n        options?: INavOption;\n        onItemClick?: () => void;\n    }\n    export interface NavItemElement extends ControlElement {\n        caption: string;\n        navItems: INavItem[];\n        data: any;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-nav\"]: NavElement;\n            }\n        }\n    }\n    export class Nav extends Control {\n        private _navItems;\n        private _flatNavItems;\n        private _parentNavItem;\n        private _wrapper;\n        private txtSearch;\n        private _navWrapper;\n        private _options;\n        private _onItemClick;\n        private _searching;\n        private _activeNavItem;\n        constructor(parent?: Control, options?: any);\n        static create(options?: NavElement, parent?: Container): Promise<Nav>;\n        protected init(): void;\n        set navItems(navItems: INavItem[]);\n        get navItems(): INavItem[];\n        setRootActive(): void;\n        setSelectedItemById(id: number | string): void;\n        getSelectedItemById(id: number | string): INavItem | undefined;\n        getActiveRoute(): INavItem[];\n        clear(): void;\n        private render;\n        private renderNav;\n        private setNavItemActive;\n        private handleSearchOnChange;\n        private flattenNavItem;\n        private findSiblingsById;\n        private findParentNavItem;\n        private findParentPathByNavItem;\n    }\n    export class NavItem extends Control {\n        private _navItems;\n        private _wrapper;\n        private _caption;\n        private _back;\n        constructor(parent?: Control, options?: any);\n        static create(options?: NavItemElement, parent?: Container): Promise<NavItem>;\n        protected init(): void;\n        private render;\n    }\n}\ndeclare module \"packages/navigator/src/index\" {\n    export { Nav, NavItem } from \"packages/navigator/src/navigator\";\n}\ndeclare module \"packages/breadcrumb/src/style/breadcrumb.css\" { }\ndeclare module \"packages/breadcrumb/src/breadcrumb\" {\n    import { Container, Control, ControlElement } from \"@ijstech/components/base\";\n    import \"packages/breadcrumb/src/style/breadcrumb.css\";\n    interface IBreadcrumbItem {\n        caption: string;\n        data?: any;\n    }\n    export interface BreadcrumbElement extends ControlElement {\n        onItemClick: (breadcrumbItem?: IBreadcrumbItem) => void;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                [\"i-breadcrumb\"]: BreadcrumbElement;\n            }\n        }\n    }\n    export class Breadcrumb extends Control {\n        private _wrapper;\n        private _breadcrumbItems;\n        private _onItemClick;\n        constructor(parent?: Control, options?: any);\n        static create(options?: BreadcrumbElement, parent?: Container): Promise<Breadcrumb>;\n        protected init(): void;\n        set breadcrumbItems(breadcrumbItems: IBreadcrumbItem[]);\n        get breadcrumbItems(): IBreadcrumbItem[];\n        private clear;\n        private render;\n    }\n}\ndeclare module \"packages/breadcrumb/src/index\" {\n    export { Breadcrumb } from \"packages/breadcrumb/src/breadcrumb\";\n}\ndeclare module \"packages/form/src/styles/index.css\" {\n    export const formStyle: string;\n    export const formGroupStyle: string;\n    export const groupStyle: string;\n    export const groupHeaderStyle: string;\n    export const groupBodyStyle: string;\n    export const collapseBtnStyle: string;\n    export const inputStyle: string;\n    export const datePickerStyle: string;\n    export const comboBoxStyle: string;\n    export const buttonStyle: string;\n    export const iconButtonStyle: string;\n    export const checkboxStyle: string;\n    export const listHeaderStyle: string;\n    export const listBtnAddStyle: string;\n    export const listColumnHeaderStyle: string;\n    export const listItemStyle: string;\n    export const listVerticalLayoutStyle: string;\n    export const listItemBtnDelete: string;\n    export const tabsStyle: string;\n    export const cardStyle: string;\n    export const cardHeader: string;\n    export const cardBody: string;\n    export const uploadStyle: string;\n    export const tokenInputStyle: string;\n}\ndeclare module \"packages/form/src/types/jsonSchema4\" {\n    export type IJSONSchema4TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';\n    type IJSONSchema4Type = string | number | boolean | IJSONSchema4Object | IJSONSchema4Array | null;\n    interface IJSONSchema4Object {\n        [key: string]: IJSONSchema4Type;\n    }\n    interface IJSONSchema4Array extends Array<IJSONSchema4Type> {\n    }\n    type IJSONSchema4Version = string;\n    export interface IJSONSchema4 {\n        id?: string | undefined;\n        $ref?: string | undefined;\n        $schema?: IJSONSchema4Version | undefined;\n        title?: string | undefined;\n        description?: string | undefined;\n        default?: IJSONSchema4Type | undefined;\n        multipleOf?: number | undefined;\n        maximum?: number | undefined;\n        exclusiveMaximum?: boolean | undefined;\n        minimum?: number | undefined;\n        exclusiveMinimum?: boolean | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        pattern?: string | undefined;\n        additionalItems?: boolean | IJSONSchema4 | undefined;\n        items?: IJSONSchema4 | IJSONSchema4[] | undefined;\n        maxItems?: number | undefined;\n        minItems?: number | undefined;\n        uniqueItems?: boolean | undefined;\n        maxProperties?: number | undefined;\n        minProperties?: number | undefined;\n        required?: boolean | string[] | undefined;\n        additionalProperties?: boolean | IJSONSchema4 | undefined;\n        definitions?: {\n            [k: string]: IJSONSchema4;\n        } | undefined;\n        properties?: {\n            [k: string]: IJSONSchema4;\n        } | undefined;\n        patternProperties?: {\n            [k: string]: IJSONSchema4;\n        } | undefined;\n        dependencies?: {\n            [k: string]: IJSONSchema4 | string[];\n        } | undefined;\n        enum?: IJSONSchema4Type[] | undefined;\n        type?: IJSONSchema4TypeName | IJSONSchema4TypeName[] | undefined;\n        allOf?: IJSONSchema4[] | undefined;\n        anyOf?: IJSONSchema4[] | undefined;\n        oneOf?: IJSONSchema4[] | undefined;\n        not?: IJSONSchema4 | undefined;\n        extends?: string | string[] | undefined;\n        [k: string]: any;\n        format?: string | undefined;\n    }\n}\ndeclare module \"packages/form/src/types/jsonSchema6\" {\n    export type IJSONSchema6TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null' | 'any';\n    type IJSONSchema6Type = string | number | boolean | IJSONSchema6Object | IJSONSchema6Array | null;\n    interface IJSONSchema6Object {\n        [key: string]: IJSONSchema6Type;\n    }\n    interface IJSONSchema6Array extends Array<IJSONSchema6Type> {\n    }\n    type IJSONSchema6Version = string;\n    type IJSONSchema6Definition = IJSONSchema6 | boolean;\n    export interface IJSONSchema6 {\n        $id?: string | undefined;\n        $ref?: string | undefined;\n        $schema?: IJSONSchema6Version | undefined;\n        multipleOf?: number | undefined;\n        maximum?: number | undefined;\n        exclusiveMaximum?: number | undefined;\n        minimum?: number | undefined;\n        exclusiveMinimum?: number | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        pattern?: string | undefined;\n        items?: IJSONSchema6Definition | IJSONSchema6Definition[] | undefined;\n        additionalItems?: IJSONSchema6Definition | undefined;\n        maxItems?: number | undefined;\n        minItems?: number | undefined;\n        uniqueItems?: boolean | undefined;\n        contains?: IJSONSchema6Definition | undefined;\n        maxProperties?: number | undefined;\n        minProperties?: number | undefined;\n        required?: string[] | undefined;\n        properties?: {\n            [k: string]: IJSONSchema6Definition;\n        } | undefined;\n        patternProperties?: {\n            [k: string]: IJSONSchema6Definition;\n        } | undefined;\n        additionalProperties?: IJSONSchema6Definition | undefined;\n        dependencies?: {\n            [k: string]: IJSONSchema6Definition | string[];\n        } | undefined;\n        propertyNames?: IJSONSchema6Definition | undefined;\n        enum?: IJSONSchema6Type[] | undefined;\n        const?: IJSONSchema6Type | undefined;\n        type?: IJSONSchema6TypeName | IJSONSchema6TypeName[] | undefined;\n        allOf?: IJSONSchema6Definition[] | undefined;\n        anyOf?: IJSONSchema6Definition[] | undefined;\n        oneOf?: IJSONSchema6Definition[] | undefined;\n        not?: IJSONSchema6Definition | undefined;\n        definitions?: {\n            [k: string]: IJSONSchema6Definition;\n        } | undefined;\n        title?: string | undefined;\n        description?: string | undefined;\n        default?: IJSONSchema6Type | undefined;\n        examples?: IJSONSchema6Type[] | undefined;\n        format?: string | undefined;\n    }\n}\ndeclare module \"packages/form/src/types/jsonSchema7\" {\n    export type IJSONSchema7TypeName = 'string' | 'number' | 'integer' | 'boolean' | 'object' | 'array' | 'null';\n    type IJSONSchema7Type = string | number | boolean | IJSONSchema7Object | IJSONSchema7Array | null;\n    interface IJSONSchema7Object {\n        [key: string]: IJSONSchema7Type;\n    }\n    interface IJSONSchema7Array extends Array<IJSONSchema7Type> {\n    }\n    type IJSONSchema7Version = string;\n    type IJSONSchema7Definition = IJSONSchema7 | boolean;\n    export interface IJSONSchema7 {\n        $id?: string | undefined;\n        $ref?: string | undefined;\n        $schema?: IJSONSchema7Version | undefined;\n        $comment?: string | undefined;\n        $defs?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        type?: IJSONSchema7TypeName | IJSONSchema7TypeName[] | undefined;\n        enum?: IJSONSchema7Type[] | undefined;\n        const?: IJSONSchema7Type | undefined;\n        multipleOf?: number | undefined;\n        maximum?: number | undefined;\n        exclusiveMaximum?: number | undefined;\n        minimum?: number | undefined;\n        exclusiveMinimum?: number | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        pattern?: string | undefined;\n        items?: IJSONSchema7Definition | IJSONSchema7Definition[] | undefined;\n        additionalItems?: IJSONSchema7Definition | undefined;\n        maxItems?: number | undefined;\n        minItems?: number | undefined;\n        uniqueItems?: boolean | undefined;\n        contains?: IJSONSchema7 | undefined;\n        maxProperties?: number | undefined;\n        minProperties?: number | undefined;\n        required?: string[] | undefined;\n        properties?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        patternProperties?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        additionalProperties?: IJSONSchema7Definition | undefined;\n        dependencies?: {\n            [key: string]: IJSONSchema7Definition | string[];\n        } | undefined;\n        propertyNames?: IJSONSchema7Definition | undefined;\n        if?: IJSONSchema7Definition | undefined;\n        then?: IJSONSchema7Definition | undefined;\n        else?: IJSONSchema7Definition | undefined;\n        allOf?: IJSONSchema7Definition[] | undefined;\n        anyOf?: IJSONSchema7Definition[] | undefined;\n        oneOf?: IJSONSchema7Definition[] | undefined;\n        not?: IJSONSchema7Definition | undefined;\n        format?: string | undefined;\n        contentMediaType?: string | undefined;\n        contentEncoding?: string | undefined;\n        definitions?: {\n            [key: string]: IJSONSchema7Definition;\n        } | undefined;\n        title?: string | undefined;\n        description?: string | undefined;\n        default?: IJSONSchema7Type | undefined;\n        readOnly?: boolean | undefined;\n        writeOnly?: boolean | undefined;\n        examples?: IJSONSchema7Type | undefined;\n    }\n}\ndeclare module \"packages/form/src/types/index\" {\n    import { IJSONSchema4TypeName, IJSONSchema4 } from \"packages/form/src/types/jsonSchema4\";\n    import { IJSONSchema6TypeName, IJSONSchema6 } from \"packages/form/src/types/jsonSchema6\";\n    import { IJSONSchema7TypeName, IJSONSchema7 } from \"packages/form/src/types/jsonSchema7\";\n    export type IUISchemaType = 'VerticalLayout' | 'HorizontalLayout' | 'Group' | 'Categorization' | 'Category' | 'Control';\n    export type IUISchemaRulesEffect = 'HIDE' | 'SHOW' | 'DISABLE' | 'ENABLE';\n    export interface IUISchemaRulesCondition {\n        scope: string;\n        schema: IDataSchema;\n    }\n    export interface IUISchemaOptions {\n        detail?: 'DEFAULT' | 'GENERATED' | 'REGISTERED' | IUISchema;\n        showSortButtons?: boolean;\n        elementLabelProp?: string;\n        format?: 'date' | 'time' | 'date-time' | 'radio';\n        slider?: boolean;\n        multi?: boolean;\n        color?: boolean;\n        restrict?: boolean;\n        showUnfocusedDescription?: boolean;\n        hideRequiredAsterisk?: boolean;\n        toggle?: boolean;\n        readonly?: boolean;\n        autocomplete?: boolean;\n        variant?: 'stepper';\n    }\n    export interface IUISchemaRules {\n        effect?: IUISchemaRulesEffect;\n        condition?: IUISchemaRulesCondition;\n    }\n    export interface ValidationError {\n        property: string;\n        scope: string;\n        message: string;\n    }\n    export interface ValidationResult {\n        valid: boolean;\n        errors: ValidationError[];\n    }\n    export type IDataSchemaTypeName = IJSONSchema4TypeName | IJSONSchema6TypeName | IJSONSchema7TypeName;\n    export type IDataSchema = IJSONSchema4 & IJSONSchema6 & IJSONSchema7;\n    export interface IUISchema {\n        type: IUISchemaType;\n        elements?: IUISchema[];\n        label?: string | boolean;\n        scope?: string;\n        rule?: IUISchemaRules;\n        options?: IUISchemaOptions;\n    }\n}\ndeclare module \"packages/form/src/form\" {\n    import { Control, ControlElement, notifyMouseEventCallback } from \"@ijstech/components/base\";\n    import { IDataSchema, IUISchema, ValidationResult } from \"packages/form/src/types/index\";\n    import \"packages/form/src/styles/index.css\";\n    export { IDataSchema, IUISchema };\n    export interface FormElement extends ControlElement {\n        jsonSchema?: IDataSchema;\n        uiSchema?: IUISchema;\n        data?: any;\n        options?: IFormOptions;\n    }\n    global {\n        namespace JSX {\n            interface IntrinsicElements {\n                ['i-form']: FormElement;\n            }\n        }\n    }\n    interface IButtonOptions {\n        caption?: string;\n        backgroundColor?: string;\n        fontColor?: string;\n        hide?: boolean;\n        onClick?: notifyMouseEventCallback;\n    }\n    export interface IFormOptions {\n        columnsPerRow?: number;\n        confirmButtonOptions?: IButtonOptions;\n        clearButtonOptions?: IButtonOptions;\n        columnWidth?: string | number;\n        dateTimeFormat: {\n            date?: string;\n            time?: string;\n            dateTime?: string;\n        };\n        customControls?: {\n            [key: string]: {\n                render: () => Control;\n                getData: (control: Control) => any;\n                setData: (control: Control, value: any) => void;\n            };\n        };\n        onChange?: (control: Control, value?: any) => void;\n    }\n    export class Form extends Control {\n        private _jsonSchema;\n        private _uiSchema;\n        private _formOptions;\n        private _formRules;\n        private _formControls;\n        private validationData;\n        private validationResult;\n        constructor(parent?: Control, options?: any);\n        protected init(): void;\n        set formOptions(options: any);\n        get formOptions(): any;\n        set jsonSchema(jsonSchema: IDataSchema);\n        get jsonSchema(): IDataSchema;\n        set uiSchema(uiSchema: IUISchema);\n        get uiSchema(): IUISchema;\n        clearFormData(): void;\n        setFormData(data: any): void;\n        private setCustomData;\n        private setData;\n        getFormData(isErrorShown?: boolean): Promise<any>;\n        private getDataBySchema;\n        private isNumber;\n        renderForm(): void;\n        private renderFormByJSONSchema;\n        private replacePhrase;\n        private renderFormByUISchema;\n        private setupRules;\n        private setupControlRule;\n        private validateRule;\n        private validateAllRule;\n        private getDataSchemaByScope;\n        private renderGroup;\n        private renderLabel;\n        private renderInput;\n        private renderNumberInput;\n        private renderTextArea;\n        private renderColorPicker;\n        private renderUploader;\n        private renderDatePicker;\n        private renderComboBox;\n        private renderRadioGroup;\n        private renderCheckBox;\n        private renderList;\n        private renderCard;\n        private validateOnValueChanged;\n        private checkPropertyChange;\n        private mustBeValid;\n        validate(instance: any, schema: IDataSchema, options: any): ValidationResult;\n        private convertFieldNameToLabel;\n        private setDataUpload;\n    }\n}\ndeclare module \"packages/form/src/index\" {\n    export { Form, FormElement, IDataSchema, IUISchema, IFormOptions } from \"packages/form/src/form\";\n}\ndeclare module \"@ijstech/components\" {\n    export * as Styles from \"packages/style/src/index\";\n    export { application, EventBus, IEventBus, IHasDependencies, IModuleOptions, IModuleRoute, IModuleMenuItem, IRenderUIOptions, DataSchemaValidator, renderUI, FormatUtils, IFormatNumberOptions, IdUtils } from \"packages/application/src/index\";\n    export { customModule, customElements, getCustomElements, Component, Control, ControlElement, Container, Observe, Unobserve, ClearObservers, isObservable, observable, LibPath, RequireJS, ISpace, IBorder, IFont } from \"@ijstech/components/base\";\n    export { Alert } from \"packages/alert/src/index\";\n    export { Button } from \"packages/button/src/index\";\n    export { CodeEditor, LanguageType, CodeDiffEditor } from \"packages/code-editor/src/index\";\n    export { ComboBox, IComboItem } from \"packages/combo-box/src/index\";\n    export { DataGrid, DataGridCell } from \"@ijstech/components/dataGrid\";\n    export { Input } from \"packages/input/src/index\";\n    export { Icon, IconName } from \"packages/icon/src/index\";\n    export { Image } from \"packages/image/src/index\";\n    export { Markdown } from \"packages/markdown/src/index\";\n    export { MarkdownEditor } from \"packages/markdown-editor/src/index\";\n    export { Menu, ContextMenu, IMenuItem } from \"packages/menu/src/index\";\n    export { Module } from \"packages/module/src/index\";\n    export { Label } from \"packages/label/src/index\";\n    export { Tooltip } from \"packages/tooltip/src/index\";\n    export { TreeView, TreeNode } from \"packages/tree-view/src/index\";\n    export { Switch } from \"packages/switch/src/index\";\n    export { Modal } from \"packages/modal/src/index\";\n    export { Popover } from \"packages/popover/src/index\";\n    export { Checkbox } from \"packages/checkbox/src/index\";\n    export { Datepicker } from \"packages/datepicker/src/index\";\n    export { LineChart, BarChart, PieChart, ScatterChart, ScatterLineChart } from \"packages/chart/src/index\";\n    export { Upload, UploadModal } from \"packages/upload/src/index\";\n    export { Tabs, Tab } from \"packages/tab/src/index\";\n    export { Iframe } from \"packages/iframe/src/index\";\n    export { Range } from \"packages/range/src/index\";\n    export { Radio, RadioGroup } from \"packages/radio/src/index\";\n    export { Panel, VStack, HStack, CardLayout, GridLayout, StackLayout } from \"packages/layout/src/index\";\n    export { Pagination } from \"packages/pagination/src/index\";\n    export { Progress } from \"packages/progress/src/index\";\n    export { Link } from \"packages/link/src/index\";\n    export { Table, TableColumn, TableCell } from \"packages/table/src/index\";\n    export { CarouselSlider } from \"packages/carousel/src/index\";\n    export * as IPFS from \"packages/ipfs/src/index\";\n    export { moment } from \"packages/moment/src/index\";\n    export { Video } from \"packages/video/src/index\";\n    export { SchemaDesigner } from \"packages/schema-designer/src/index\";\n    export { Nav } from \"packages/navigator/src/index\";\n    export { Breadcrumb } from \"packages/breadcrumb/src/index\";\n    export { Form, IDataSchema, IUISchema, IFormOptions } from \"packages/form/src/index\";\n    export { ColorPicker } from \"packages/color/src/index\";\n}\n";
    export default _default_1;
}
/// <amd-module name="@scom/scom-designer/types/index.ts" />
declare module "@scom/scom-designer/types/index.ts" {
    import components from "@scom/scom-designer/types/components.ts";
    export { components };
}
/// <amd-module name="@scom/scom-designer" />
declare module "@scom/scom-designer" {
    import { Container, Control, ControlElement, Module } from '@ijstech/components';
    import { IFileHandler, IIPFSData, IStudio } from "@scom/scom-designer/interface.ts";
    import { ScomDesignerForm } from "@scom/scom-designer/designer.tsx";
    type onSaveCallback = (path: string, content: string) => void;
    interface ScomDesignerElement extends ControlElement {
        url?: string;
        onSave?: onSaveCallback;
        onChanged?: (value: string) => void;
    }
    global {
        namespace JSX {
            interface IntrinsicElements {
                ['i-scom-designer']: ScomDesignerElement;
            }
        }
    }
    export class ScomDesigner extends Module implements IFileHandler, IStudio {
        private designTabs;
        private formDesigner;
        private codeEditor;
        private pnlMessage;
        private compiler;
        private contentChangeTimer;
        private _data;
        private updateDesigner;
        onSave: onSaveCallback;
        onChanged?: (value: string) => void;
        tag: any;
        addEventHandler(designer: ScomDesignerForm, eventName: string, funcName: string): void;
        locateMethod(designer: ScomDesignerForm, funcName: string): void;
        removeComponent(designer: ScomDesignerForm): void;
        renameComponent(designer: ScomDesignerForm, oldId: string, newId: string): boolean;
        renameEventHandler(designer: ScomDesignerForm, funcName: string, newFuncName: string): boolean;
        constructor(parent?: Container, options?: any);
        static create(options?: ScomDesignerElement, parent?: Container): Promise<ScomDesigner>;
        get url(): string;
        set url(value: string);
        get fileName(): string;
        get value(): string;
        private setData;
        private getData;
        setValue(url: string): void;
        private renderUI;
        private addLib;
        private handleTabChanged;
        private updateRoot;
        private updatePath;
        private handleCodeEditorChange;
        private updateDesignerCode;
        handleGetChangedFiles(): Promise<void>;
        openFile(file: IIPFSData, endpoint: string, parentCid: string, parent: Control): Promise<void>;
        init(): void;
        private updateTag;
        private setTag;
        private updateStyle;
        private updateTheme;
        private getTag;
        getConfigurators(): ({
            name: string;
            target: string;
            getActions: () => any[];
            getData: any;
            setData: any;
            getTag: any;
            setTag: any;
        } | {
            name: string;
            target: string;
            getData: any;
            setData: any;
            getTag: any;
            setTag: any;
            getActions?: undefined;
        })[];
        private _getActions;
        private getWidgetSchemas;
        render(): any;
    }
}
